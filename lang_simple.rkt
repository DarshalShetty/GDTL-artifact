;; #source  
;;; generated by Ott 0.28 from: ./ott/lang_simple.ott

#lang racket
(require redex)

;; #source file ./ott/lang_simple.ott  lines 4 - 6 
;; #source file ./ott/lang_simple.ott  lines 8 - 76 
;; #source file ./ott/lang_simple.ott  lines 8 - 76 
;; #source file ./ott/lang_simple.ott  lines 81 - 83 
;; #source file ./ott/lang_simple.ott  lines 86 - 86 
;; #source file ./ott/lang_simple.ott  lines 92 - 99 and file ./ott/lang_simple.ott  lines 104 - 128 and file ./ott/lang_simple.ott  lines 132 - 141 and file ./ott/lang_simple.ott  lines 143 - 148 and file ./ott/lang_simple.ott  lines 150 - 155 and file ./ott/lang_simple.ott  lines 158 - 163 and file ./ott/lang_simple.ott  lines 165 - 167 and file ./ott/lang_simple.ott  lines 172 - 192 and file ./ott/lang_simple.ott  lines 197 - 206 and file ./ott/lang_simple.ott  lines 208 - 213 and file ./ott/lang_simple.ott  lines 215 - 218 and file ./ott/lang_simple.ott  lines 226 - 227 and file ./ott/lang_simple.ott  lines 235 - 246 and file ./ott/lang_simple.ott  lines 250 - 256 and file ./ott/lang_simple.ott  lines 259 - 264 and file ./ott/lang_simple.ott  lines 266 - 274 and file ./ott/lang_simple.ott  lines 278 - 280 and file ./ott/lang_simple.ott  lines 282 - 284 and file ./ott/lang_simple.ott  lines 286 - 288 and file ./ott/lang_simple.ott  lines 291 - 296 and file ./ott/lang_simple.ott  lines 298 - 303 and file ./ott/lang_simple.ott  lines 349 - 352 and file ./ott/lang_simple.ott  lines 354 - 358 and file ./ott/lang_simple.ott  lines 360 - 364 and file ./ott/lang_simple.ott  lines 465 - 470 and file ./ott/lang_simple.ott  lines 473 - 475 and file ./ott/lang_simple.ott  lines 477 - 479 
(define-language L  

;; #source file ./ott/lang_simple.ott  lines 92 - 99 
  (level i j ::= 
    (LevelRdx index))

;; #source file ./ott/lang_simple.ott  lines 197 - 206 
  (canonical gu gv gU gV ::= 
    (CanonicalLam var canonical)
    CanonicalDyn
    (CanonicalAtomic atomic)
    (CanonicalPi var canonical canonical))
  ;grammar_pp, 2817: and 
;; #source file ./ott/lang_simple.ott  lines 208 - 213 
  (atomic grr gRR ::= 
    (AtomicSpine var spine)
    (AtomicSet level))
  ;grammar_pp, 2817: and 
;; #source file ./ott/lang_simple.ott  lines 215 - 218 
  (spine ge ::= 
    SpineEmpty
    (SpineCons spine canonical))

;; #source file ./ott/lang_simple.ott  lines 226 - 227 
  (epsilon ep ::= 
    (EvidencePair canonical canonical))

;; #source file ./ott/lang_simple.ott  lines 360 - 364 
  (Env ::= 
    EnvEmpty
    (EnvExt var canonical Env)
    (Envconcat Env Env))

;; #source file ./ott/lang_simple.ott  lines 104 - 128 
  (term ss tt ett SS TT ::= 
    (TermLam var term)
    (TermApp term term)
    var
    (TermSet level)
    (TermPi var term term)
    (TermAnn term term)
    (TermEp epsilon term)
    TermDyn
    (TermDynAnn canonical)
    TermError)

;; #source file ./ott/lang_simple.ott  lines 465 - 470 
  (iinf jinf ::= 
    (UniverseLevel level)
    UniverseInf)

;; #source file ./ott/lang_simple.ott  lines 291 - 296 
  (simpleContext SC ::= 
    (SimpleContextPi1 var hole term)
    (SimpleContextPi2 var term hole)
    (SimpleContextApp1 hole term)
    (SimpleContextApp2 term hole)
    (SimpleContextAnn hole term))

;; #source file ./ott/lang_simple.ott  lines 278 - 280 
  (dummyeu dummyev dummyeueU dummyeueV ::= 
    (DummyEvidenceValueEv epsilon term)
    (DummyEvidenceValueRaw term))

;; #source file ./ott/lang_simple.ott  lines 298 - 303 
  (evalContext EC ::= 
    (EvalContextPi1 var hole term)
    (EvalContextPi2 var term hole)
    (EvalContextApp1 hole term)
    (EvalContextApp2 term hole)
    (EvalContextEp epsilon hole))

;; #source file ./ott/lang_simple.ott  lines 473 - 475 
  (is js ::= 
    (LevelMultiSetSingleton level)
    (LevelMultiSetSum is is))

;; #source file ./ott/lang_simple.ott  lines 477 - 479 
  (iinfs jinfs ::= 
    (UniverseMultiSetSingleton iinf)
    (UniverseMultiSetSum iinfs iinfs))
  (var variable-not-otherwise-mentioned)

    #:binding-forms

    (TermLam x tt #:refers-to (shadow x))
    (TermPi x SS TT #:refers-to (shadow x))
    (StaticTermLam x t #:refers-to (shadow x))
    (StaticTermPi x S T #:refers-to (shadow x))
    (StaticTermNoAnnLam x ta)
    (StaticTermNoAnnPi x Sa Ta)
    (StaticCanonicalLam x u #:refers-to (shadow x))


    (GradualTermLam x gt #:refers-to (shadow x))
    (GradualTermPi x gS gT #:refers-to (shadow x))
    (CanonicalLam x gu #:refers-to (shadow x))
    (CanonicalPi x gU gV #:refers-to (shadow x))



    (EvidenceTermLam x et #:refers-to (shadow x))
    (RawValueLam x et #:refers-to (shadow x))
    (SimpleValueLam x ta)
    (EvidenceValueLam x et #:refers-to (shadow x))










)

;;;; subrules 
;; #source file ./ott/lang_simple.ott  lines 492 - 492 and file ./ott/lang_simple.ott  lines 493 - 493 and file ./ott/lang_simple.ott  lines 496 - 496 and file ./ott/lang_simple.ott  lines 497 - 497 and file ./ott/lang_simple.ott  lines 498 - 498 and file ./ott/lang_simple.ott  lines 499 - 499 and file ./ott/lang_simple.ott  lines 500 - 500 and file ./ott/lang_simple.ott  lines 502 - 502 and file ./ott/lang_simple.ott  lines 503 - 503 and file ./ott/lang_simple.ott  lines 504 - 504 and file ./ott/lang_simple.ott  lines 505 - 505 and file ./ott/lang_simple.ott  lines 506 - 506 and file ./ott/lang_simple.ott  lines 507 - 507 and file ./ott/lang_simple.ott  lines 508 - 508 and file ./ott/lang_simple.ott  lines 509 - 509 and file ./ott/lang_simple.ott  lines 510 - 510 and file ./ott/lang_simple.ott  lines 511 - 511 and file ./ott/lang_simple.ott  lines 512 - 512 and file ./ott/lang_simple.ott  lines 513 - 513 
; DEPENDENCIES12
(define-judgment-form L 
#:mode (is_es_of_term I )

[(is_es_of_term tt)
------------------
 (is_es_of_term (TermLam x tt))
]

[(is_es_of_term ss)
  (is_es_of_term tt)
------------------
 (is_es_of_term (TermApp ss tt))
]

[
------------------
 (is_es_of_term (TermVar x))
]

[
------------------
 (is_es_of_term (TermSet i))
]

[(is_es_of_term SS)
  (is_es_of_term TT)
------------------
 (is_es_of_term (TermPi x SS TT))
]

[(is_es_of_term ss)
------------------
 (is_es_of_term (TermEp ep ss))
]

[
------------------
 (is_es_of_term (TermDynAnn gU))
]

[
------------------
 (is_es_of_term TermError)
]
)

(define-judgment-form L 
#:mode (is_sa_of_term I )

[(is_sa_of_term tt)
------------------
 (is_sa_of_term (TermLam x tt))
]

[(is_sa_of_term ss)
  (is_sa_of_term tt)
------------------
 (is_sa_of_term (TermApp ss tt))
]

[
------------------
 (is_sa_of_term (TermVar x))
]

[
------------------
 (is_sa_of_term (TermSet i))
]

[(is_sa_of_term SS)
  (is_sa_of_term TT)
------------------
 (is_sa_of_term (TermPi x SS TT))
]
)

(define-judgment-form L 
#:mode (is_evidenceSpine_of_term I )

[(is_evidenceSpine_of_term ss)
  (is_eu_of_term tt)
------------------
 (is_evidenceSpine_of_term (TermApp ss tt))
]

[
------------------
 (is_evidenceSpine_of_term (TermVar x))
]
)
(define-judgment-form L 
#:mode (is_ru_of_term I )

[(is_es_of_term tt)
------------------
 (is_ru_of_term (TermLam x tt))
]

[(is_evidenceSpine_of_term ss)
  (is_eu_of_term tt)
------------------
 (is_ru_of_term (TermApp ss tt))
]

[
------------------
 (is_ru_of_term (TermVar x))
]

[
------------------
 (is_ru_of_term (TermSet i))
]

[(is_eu_of_term SS)
  (is_eu_of_term TT)
------------------
 (is_ru_of_term (TermPi x SS TT))
]

[
------------------
 (is_ru_of_term (TermDynAnn gU))
]
)
(define-judgment-form L 
#:mode (is_eu_of_term I )

[(is_es_of_term tt)
------------------
 (is_eu_of_term (TermLam x tt))
]

[(is_evidenceSpine_of_term ss)
  (is_eu_of_term tt)
------------------
 (is_eu_of_term (TermApp ss tt))
]

[
------------------
 (is_eu_of_term (TermVar x))
]

[
------------------
 (is_eu_of_term (TermSet i))
]

[(is_eu_of_term SS)
  (is_eu_of_term TT)
------------------
 (is_eu_of_term (TermPi x SS TT))
]

[(is_ru_of_term ss)
------------------
 (is_eu_of_term (TermEp ep ss))
]

[
------------------
 (is_eu_of_term (TermDynAnn gU))
]
)(define-judgment-form L 
#:mode (is_s_of_term I )

[(is_s_of_term tt)
------------------
 (is_s_of_term (TermLam x tt))
]

[(is_s_of_term ss)
  (is_s_of_term tt)
------------------
 (is_s_of_term (TermApp ss tt))
]

[
------------------
 (is_s_of_term (TermVar x))
]

[
------------------
 (is_s_of_term (TermSet i))
]

[(is_s_of_term SS)
  (is_s_of_term TT)
------------------
 (is_s_of_term (TermPi x SS TT))
]

[(is_s_of_term tt)
  (is_s_of_term TT)
------------------
 (is_s_of_term (TermAnn tt TT))
]
)

(define-judgment-form L 
#:mode (is_simpleValue_of_term I )

[(is_sa_of_term tt)
------------------
 (is_simpleValue_of_term (TermLam x tt))
]

[(is_simpleSpine_of_term ss)
  (is_simpleValue_of_term tt)
------------------
 (is_simpleValue_of_term (TermApp ss tt))
]

[
------------------
 (is_simpleValue_of_term (TermVar x))
]

[
------------------
 (is_simpleValue_of_term (TermSet i))
]

[(is_simpleValue_of_term SS)
  (is_simpleValue_of_term TT)
------------------
 (is_simpleValue_of_term (TermPi x SS TT))
]
)
(define-judgment-form L 
#:mode (is_simpleSpine_of_term I )

[(is_simpleSpine_of_term ss)
  (is_simpleValue_of_term tt)
------------------
 (is_simpleSpine_of_term (TermApp ss tt))
]

[
------------------
 (is_simpleSpine_of_term (TermVar x))
]
)(define-judgment-form L 
#:mode (is_e_of_spine I )

[
------------------
 (is_e_of_spine SpineEmpty)
]

[(is_e_of_spine ge)
  (is_u_of_canonical gu)
------------------
 (is_e_of_spine (SpineCons ge gu))
]
)
(define-judgment-form L 
#:mode (is_rr_of_atomic I )

[(is_e_of_spine ge)
------------------
 (is_rr_of_atomic (AtomicSpine x ge))
]

[
------------------
 (is_rr_of_atomic (AtomicSet i))
]
)
(define-judgment-form L 
#:mode (is_u_of_canonical I )

[(is_u_of_canonical gu)
------------------
 (is_u_of_canonical (CanonicalLam x gu))
]

[(is_rr_of_atomic grr)
------------------
 (is_u_of_canonical (CanonicalAtomic grr))
]

[(is_u_of_canonical gU)
  (is_u_of_canonical gV)
------------------
 (is_u_of_canonical (CanonicalPi x gU gV))
]
)(define-judgment-form L 
#:mode (is_gs_of_term I )

[(is_gs_of_term tt)
------------------
 (is_gs_of_term (TermLam x tt))
]

[(is_gs_of_term ss)
  (is_gs_of_term tt)
------------------
 (is_gs_of_term (TermApp ss tt))
]

[
------------------
 (is_gs_of_term (TermVar x))
]

[
------------------
 (is_gs_of_term (TermSet i))
]

[(is_gs_of_term SS)
  (is_gs_of_term TT)
------------------
 (is_gs_of_term (TermPi x SS TT))
]

[(is_gs_of_term tt)
  (is_gs_of_term TT)
------------------
 (is_gs_of_term (TermAnn tt TT))
]

[
------------------
 (is_gs_of_term TermDyn)
]
)

(define-judgment-form L 
#:mode (is_evalContext_of_evalContext I )

[(is_es_of_term eT)
------------------
 (is_evalContext_of_evalContext (EvalContextPi1 x hole eT))
]

[(is_eu_of_term eV)
------------------
 (is_evalContext_of_evalContext (EvalContextPi2 x eV hole))
]

[(is_es_of_term et)
------------------
 (is_evalContext_of_evalContext (EvalContextApp1 hole))
]

[(is_eu_of_term ev)
------------------
 (is_evalContext_of_evalContext (EvalContextApp2 ev))
]

[
------------------
 (is_evalContext_of_evalContext (EvalContextEp ep))
]
)

(define-judgment-form L 
#:mode (is_Gamma_of_Env I )

[
------------------
 (is_Gamma_of_Env EnvEmpty)
]

[(is_Gamma_of_Env Env)
------------------
 (is_Gamma_of_Env (EnvExt x gU Env))
]

[(is_Gamma_of_Env Env1)
  (is_Gamma_of_Env Env2)
------------------
 (is_Gamma_of_Env (Envconcat Env1 Env2))
]
)

(define-judgment-form L 
#:mode (is_dummyeu_of_dummyeu I )

[(is_ru_of_term rv)
------------------
 (is_dummyeu_of_dummyeu (DummyEvidenceValueEv ep rv))
]

[(is_ru_of_term rv)
------------------
 (is_dummyeu_of_dummyeu (DummyEvidenceValueRaw rv))
]
)

(define-judgment-form L 
#:mode (is_simpleContext_of_simpleContext I )

[(is_s_of_term T)
------------------
 (is_simpleContext_of_simpleContext (SimpleContextPi1 x hole T))
]

[(is_simpleValue_of_term sV)
------------------
 (is_simpleContext_of_simpleContext (SimpleContextPi2 x sV hole))
]

[(is_s_of_term t)
------------------
 (is_simpleContext_of_simpleContext (SimpleContextApp1 hole))
]

[(is_simpleValue_of_term sv)
------------------
 (is_simpleContext_of_simpleContext (SimpleContextApp2 sv))
]

[(is_s_of_term T)
------------------
 (is_simpleContext_of_simpleContext (SimpleContextAnn hole))
]
)

(define-judgment-form L 
#:mode (is_SGamma_of_Env I )

[
------------------
 (is_SGamma_of_Env EnvEmpty)
]

[(is_u_of_canonical gU)
  (is_SGamma_of_Env Env)
------------------
 (is_SGamma_of_Env (EnvExt x gU Env))
]

[(is_SGamma_of_Env Env1)
  (is_SGamma_of_Env Env2)
------------------
 (is_SGamma_of_Env (Envconcat Env1 Env2))
]
)

;; #source file ./ott/lang_simple.ott  lines 524 - 535 

;;; definitions 

(define-judgment-form
  L
  #:mode (GVarLook I O I)


;; #source file ./ott/lang_simple.ott  lines 544 - 546 
 [(is_Gamma_of_Env Gamma)
  -------------------------------------
  (GVarLook x gU (EnvExt x gU Gamma))]



;; #source file ./ott/lang_simple.ott  lines 547 - 551 
 [(is_Gamma_of_Env Gamma)
  (GVarLook x gU Gamma)
   (side-condition (not (equal?  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) )   (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) ))) 
  -------------------------------------
  (GVarLook x gU (EnvExt y gV Gamma))]

)
(define-judgment-form L 
 
  #:mode (GVarFree I I)


;; #source file ./ott/lang_simple.ott  lines 555 - 557 
 [-----------------------
  (GVarFree x EnvEmpty)]



;; #source file ./ott/lang_simple.ott  lines 558 - 562 
 [(is_Gamma_of_Env Gamma)
   (side-condition (not (equal?  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) )   (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) ))) 
  (GVarFree x Gamma)
  ----------------------------------
  (GVarFree x (EnvExt y gU Gamma))]
)

;;; definitions 

(define-judgment-form
  L
  #:mode (Universe I I O)


;; #source file ./ott/lang_simple.ott  lines 583 - 586 
 [(is_Gamma_of_Env Gamma)
   (side-condition (>  i  0)) 
  ----------------------------------------------------------------
  (Universe Gamma (CanonicalAtomic (AtomicSet i))   (+  i  1)  )]



;; #source file ./ott/lang_simple.ott  lines 587 - 591 
 [(is_Gamma_of_Env Gamma)
  (GVarLook x gV Gamma)
  (Universe Gamma gV (UniverseLevel  (+  i  1) ))
  -------------------------------------------------------------------------------------
  (Universe Gamma (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) (UniverseLevel i))]



;; #source file ./ott/lang_simple.ott  lines 592 - 596 
 [(is_Gamma_of_Env Gamma)
  (Universe Gamma gU (UniverseLevel i))
  (Universe (EnvExt x gU Gamma) gV (UniverseLevel j))
  ----------------------------------------------------------------------------------------
  (Universe Gamma (CanonicalPi x gU gV)  (max  (UniverseLevel i)   (UniverseLevel j) ) )]



;; #source file ./ott/lang_simple.ott  lines 597 - 600 
 [(is_Gamma_of_Env Gamma)
  (Universe Gamma gu (UniverseLevel i))
  ----------------------------------------------------------
  (Universe Gamma  (CanonicalLam x gu)  (UniverseLevel i))]



;; #source file ./ott/lang_simple.ott  lines 601 - 605 
 [(is_Gamma_of_Env Gamma)
  (Universe Gamma (CanonicalAtomic (AtomicSpine x ge)) (UniverseLevel i))
  (Universe Gamma gv (UniverseLevel j))
  ----------------------------------------------------------------------------------------------------------------------
  (Universe Gamma (CanonicalAtomic (AtomicSpine x (SpineCons ge gv)))  (max  (UniverseLevel i)   (UniverseLevel j) ) )]



;; #source file ./ott/lang_simple.ott  lines 606 - 608 
 [(is_Gamma_of_Env Gamma)
  -------------------------------------------
  (Universe Gamma CanonicalDyn UniverseInf)]

)
(define-judgment-form L 
 
  #:mode (SUniverse I I O)


;; #source file ./ott/lang_simple.ott  lines 614 - 617 
 [(is_SGamma_of_Env SGamma)
   (side-condition (>  i  0)) 
  ----------------------------------------------------------------
  (SUniverse SGamma (CanonicalAtomic (AtomicSet i))  (+  i  1) )]



;; #source file ./ott/lang_simple.ott  lines 618 - 622 
 [(is_SGamma_of_Env SGamma)
  (GVarLook x V SGamma)
  (SUniverse SGamma V  (+  i  1) )
  -----------------------------------------------------------------------
  (SUniverse SGamma (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) i)]



;; #source file ./ott/lang_simple.ott  lines 624 - 628 
 [(is_SGamma_of_Env SGamma)
  (SUniverse SGamma U i)
  (SUniverse (EnvExt x U SGamma) V j)
  --------------------------------------------------------
  (SUniverse SGamma (CanonicalPi x U V)  (max  i   j ) )]



;; #source file ./ott/lang_simple.ott  lines 629 - 631 
 [(is_SGamma_of_Env SGamma)
  (is_u_of_canonical u)
  ---------------------------------------------
  (SUniverse SGamma  (CanonicalLam x u)   0 )]



;; #source file ./ott/lang_simple.ott  lines 632 - 636 
 [(is_e_of_spine e)
  (is_SGamma_of_Env SGamma)
  (SUniverse SGamma (CanonicalAtomic (AtomicSpine x e)) i)
  (SUniverse SGamma v j)
  --------------------------------------------------------------------------------------
  (SUniverse SGamma (CanonicalAtomic (AtomicSpine x (SpineCons e v)))  (max  i   j ) )]
)

;;; definitions 

(define-judgment-form
  L
  #:mode (StaticHsub I I I I O)


;; #source file ./ott/lang_simple.ott  lines 666 - 668 
 [(is_u_of_canonical u)
  ------------------------------------------------------------------------------------
  (StaticHsub x U u (CanonicalAtomic (AtomicSet i)) (CanonicalAtomic (AtomicSet i)))]



;; #source file ./ott/lang_simple.ott  lines 671 - 676 
 [(is_u_of_canonical u)
  (StaticHsub x U u U U9)
  (StaticHsub x U u V V9)
   (side-condition (not (equal?  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) )   (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) ))) 
  --------------------------------------------------------------
  (StaticHsub x U u (CanonicalPi y U V) (CanonicalPi y U9 V9))]



;; #source file ./ott/lang_simple.ott  lines 678 - 682 
 [(is_u_of_canonical u)
  (StaticHsub x U u v v9)
   (side-condition (not (equal?  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) )   (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) ))) 
  ---------------------------------------------------------------
  (StaticHsub x U u  (CanonicalLam y v)   (CanonicalLam y v9) )]



;; #source file ./ott/lang_simple.ott  lines 685 - 688 
 [(is_u_of_canonical u)
   (side-condition (not (equal?  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) )   (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) ))) 
  ----------------------------------------------------------------------------------------------------------------------
  (StaticHsub x U u (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ))]



;; #source file ./ott/lang_simple.ott  lines 689 - 694 
 [(is_e_of_spine e)
  (is_e_of_spine e9)
  (is_u_of_canonical u)
   (side-condition (not (equal?  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) )   (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) ))) 
  (StaticHsub x U u (CanonicalAtomic (AtomicSpine y e)) (CanonicalAtomic (AtomicSpine y e9)))
  (StaticHsub x U u v v9)
  --------------------------------------------------------------------------------------------------------------------------
  (StaticHsub x U u (CanonicalAtomic (AtomicSpine y (SpineCons e v))) (CanonicalAtomic (AtomicSpine y (SpineCons e9 v9))))]



;; #source file ./ott/lang_simple.ott  lines 695 - 698 
 [(is_u_of_canonical u1)
  (is_e_of_spine e)
  (is_u_of_canonical u2)
  (StaticHsubR x U u1 (AtomicSpine x (SpineCons e u2)) v2 V9)
  ---------------------------------------------------------------------------
  (StaticHsub x U u1 (CanonicalAtomic (AtomicSpine x (SpineCons e u2))) v2)]

)
(define-judgment-form L 
 
  #:mode (StaticHsubR I I I I O O)


;; #source file ./ott/lang_simple.ott  lines 709 - 711 
 [(is_u_of_canonical u)
  --------------------------------------------------------
  (StaticHsubR x U u  (AtomicSpine  x  SpineEmpty)  u U)]



;; #source file ./ott/lang_simple.ott  lines 712 - 721 
 [(is_u_of_canonical u2)
  (is_u_of_canonical u1)
  (is_e_of_spine e)
  (is_u_of_canonical u3)
  (StaticHsub x U u1 u2 u3)
  (StaticHsubR x U u1 (AtomicSpine x e)  (CanonicalLam y v1)  (CanonicalPi y V1 V2))
  (StaticHsub y V1 u3 v1 v2)
  (StaticHsub y V1 u3 V2 V9)
  ------------------------------------
  (StaticHsubR x U u1  [grr]  v2 V9)]
)

;;; definitions 

(define-judgment-form
  L
  #:mode (SWellFormed I)


;; #source file ./ott/lang_simple.ott  lines 731 - 733 
 [------------------------
  (SWellFormed EnvEmpty)]



;; #source file ./ott/lang_simple.ott  lines 734 - 739 
 [(is_SGamma_of_Env SGamma)
  (SWellFormed SGamma)
  (StaticSet SGamma U)
  (GVarFree x SGamma)
  -----------------------------------
  (SWellFormed (EnvExt x U SGamma))]

)
(define-judgment-form L 
 
  #:mode (StaticSet I I)


;; #source file ./ott/lang_simple.ott  lines 748 - 751 
 [(is_SGamma_of_Env SGamma)
  (is_rr_of_atomic rr)
  (StaticCSynth SGamma rr (CanonicalAtomic (AtomicSet i)))
  -----------------------------------------
  (StaticSet SGamma (CanonicalAtomic rr))]



;; #source file ./ott/lang_simple.ott  lines 754 - 759 
 [(is_SGamma_of_Env SGamma)
  (StaticSet SGamma U)
  (SWellFormed (EnvExt x U SGamma))
  (StaticSet (EnvExt x U SGamma) V)
  ----------------------------------------
  (StaticSet SGamma (CanonicalPi x U V))]

)
(define-judgment-form L 
 
  #:mode (StaticCSynth I I O)


;; #source file ./ott/lang_simple.ott  lines 767 - 770 
 [(is_SGamma_of_Env SGamma)
   (side-condition (>  i  0)) 
  --------------------------------------------------------------------------------
  (StaticCSynth SGamma (AtomicSet i) (CanonicalAtomic  (AtomicSet (+  i  1) ) ))]



;; #source file ./ott/lang_simple.ott  lines 772 - 776 
 [(is_u_of_canonical U)
  (is_SGamma_of_Env SGamma)
  (SWellFormed SGamma)
  (GVarLook x U SGamma)
  --------------------------------------------------------
  (StaticCSynth SGamma  (AtomicSpine  x  SpineEmpty)  U)]



;; #source file ./ott/lang_simple.ott  lines 780 - 786 
 [(is_e_of_spine e)
  (is_SGamma_of_Env SGamma)
  (is_u_of_canonical u)
  (StaticCSynth SGamma (AtomicSpine x e) (CanonicalPi y U1 U2))
  (StaticCCheck SGamma u U1)
  (StaticHsub y U1 u U2 V)
  ---------------------------------------------------------
  (StaticCSynth SGamma (AtomicSpine x (SpineCons e u)) V)]

)
(define-judgment-form L 
 
  #:mode (StaticCCheck I I I)


;; #source file ./ott/lang_simple.ott  lines 794 - 797 
 [(is_SGamma_of_Env SGamma)
  (is_rr_of_atomic rr)
  (StaticCSynth SGamma rr (CanonicalAtomic RR))
  -----------------------------------------------------------------
  (StaticCCheck SGamma (CanonicalAtomic rr) (CanonicalAtomic RR))]



;; #source file ./ott/lang_simple.ott  lines 798 - 802 
 [(is_SGamma_of_Env SGamma)
  (is_rr_of_atomic rr)
  (StaticCSynth SGamma rr (CanonicalAtomic (AtomicSet i)))
   (side-condition (and (< 0  i ) (<  i   j ))) 
  ----------------------------------------------------------------------------
  (StaticCCheck SGamma (CanonicalAtomic rr) (CanonicalAtomic (AtomicSet j)))]



;; #source file ./ott/lang_simple.ott  lines 804 - 808 
 [(is_SGamma_of_Env SGamma)
  (is_u_of_canonical u)
  (SWellFormed (EnvExt x U SGamma))
  (StaticCCheck (EnvExt x U SGamma) u V)
  ----------------------------------------------------------------
  (StaticCCheck SGamma  (CanonicalLam x u)  (CanonicalPi x U V))]



;; #source file ./ott/lang_simple.ott  lines 809 - 814 
 [(is_SGamma_of_Env SGamma)
  (StaticCCheck SGamma U (CanonicalAtomic (AtomicSet i)))
  (SWellFormed (EnvExt x U SGamma))
  (StaticCCheck (EnvExt x U SGamma) V (CanonicalAtomic (AtomicSet i)))
  ---------------------------------------------------------------------------
  (StaticCCheck SGamma (CanonicalPi x U V) (CanonicalAtomic (AtomicSet i)))]
)

;;; definitions 

(define-judgment-form
  L
  #:mode (StaticSynth I I O)


;; #source file ./ott/lang_simple.ott  lines 824 - 828 
 [(is_SGamma_of_Env SGamma)
  (StaticSetNorm SGamma V T)
  (StaticCheck SGamma t V)
  ----------------------------------------
  (StaticSynth SGamma  (TermAnn t T)  V)]



;; #source file ./ott/lang_simple.ott  lines 829 - 832 
 [(is_SGamma_of_Env SGamma)
   (side-condition (>  i  0)) 
  -----------------------------------------------------------------------------
  (StaticSynth SGamma (TermSet i) (CanonicalAtomic  (AtomicSet (+  i  1) ) ))]



;; #source file ./ott/lang_simple.ott  lines 834 - 838 
 [(is_u_of_canonical U)
  (is_SGamma_of_Env SGamma)
  (SWellFormed SGamma)
  (GVarLook x U SGamma)
  ------------------------------------
  (StaticSynth SGamma (TermVar x) U)]



;; #source file ./ott/lang_simple.ott  lines 843 - 849 
 [(is_s_of_term s)
  (is_SGamma_of_Env SGamma)
  (StaticSynth SGamma s (CanonicalPi x U V))
  (StaticNormCheck SGamma v t U)
  (StaticHsub y U v V V9)
  ---------------------------------------
  (StaticSynth SGamma (TermApp s t) V9)]

)
(define-judgment-form L 
 
  #:mode (StaticCheck I I I)


;; #source file ./ott/lang_simple.ott  lines 856 - 859 
 [(is_SGamma_of_Env SGamma)
  (StaticSynth SGamma t U)
  --------------------------
  (StaticCheck SGamma t U)]



;; #source file ./ott/lang_simple.ott  lines 860 - 864 
 [(is_SGamma_of_Env SGamma)
  (StaticSynth SGamma t (CanonicalAtomic (AtomicSet i)))
   (side-condition (and (< 0  i ) (<  i   j ))) 
  --------------------------------------------------------
  (StaticCheck SGamma t (CanonicalAtomic (AtomicSet j)))]



;; #source file ./ott/lang_simple.ott  lines 865 - 870 
 [(is_SGamma_of_Env SGamma)
  (StaticNormCheck SGamma U S (CanonicalAtomic (AtomicSet i)))
  (SWellFormed (EnvExt x U SGamma))
  (StaticCheck (EnvExt x U SGamma) T (CanonicalAtomic (AtomicSet i)))
  ---------------------------------------------------------------------
  (StaticCheck SGamma (TermPi x S T) (CanonicalAtomic (AtomicSet i)))]



;; #source file ./ott/lang_simple.ott  lines 872 - 876 
 [(is_SGamma_of_Env SGamma)
  (SWellFormed (EnvExt x U SGamma))
  (StaticCheck (EnvExt x U SGamma) t V)
  ----------------------------------------------------------
  (StaticCheck SGamma  (TermLam x t)  (CanonicalPi x U V))]

)
(define-judgment-form L 
 
  #:mode (StaticSetNorm I O I)


;; #source file ./ott/lang_simple.ott  lines 887 - 890 
 [(is_SGamma_of_Env SGamma)
  (StaticNormSynth SGamma S U (CanonicalAtomic (AtomicSet i)))
  ----------------------------
  (StaticSetNorm SGamma U S)]



;; #source file ./ott/lang_simple.ott  lines 891 - 895 
 [(is_SGamma_of_Env SGamma)
  (StaticSetNorm SGamma U S)
  (StaticSetNorm (EnvExt x U SGamma) V T)
  -----------------------------------------------------------
  (StaticSetNorm SGamma (CanonicalPi x U V) (TermPi x S T))]

)
(define-judgment-form L 
 
  #:mode (StaticNormSynth I I O O)


;; #source file ./ott/lang_simple.ott  lines 901 - 905 
 [(is_SGamma_of_Env SGamma)
  (StaticSetNorm SGamma V T)
  (StaticNormCheck SGamma v t V)
  ----------------------------------------------
  (StaticNormSynth SGamma  (TermAnn t T)  v V)]



;; #source file ./ott/lang_simple.ott  lines 906 - 909 
 [(is_SGamma_of_Env SGamma)
   (side-condition (>  i  0)) 
  -----------------------------------------------------------------------------------------------------------------
  (StaticNormSynth SGamma (TermSet i) (CanonicalAtomic (AtomicSet i)) (CanonicalAtomic  (AtomicSet (+  i  1) ) ))]



;; #source file ./ott/lang_simple.ott  lines 911 - 916 
 [(is_SGamma_of_Env SGamma)
  (SWellFormed SGamma)
  (GVarLook x U SGamma)
  (EtaExpand  (AtomicSpine  x  SpineEmpty)  v U)
  ------------------------------------------
  (StaticNormSynth SGamma (TermVar x) v U)]



;; #source file ./ott/lang_simple.ott  lines 921 - 927 
 [(is_s_of_term s)
  (is_SGamma_of_Env SGamma)
  (is_u_of_canonical u)
  (StaticNormSynth SGamma s  (CanonicalLam x u)  (CanonicalPi x U1 U2))
  (StaticNormCheck SGamma v t U)
  (StaticHsub y U1 v u v9)
  (StaticHsub y U1 v U2 V)
  ---------------------------------------------
  (StaticNormSynth SGamma (TermApp s t) v9 V)]

)
(define-judgment-form L 
 
  #:mode (StaticNormCheck I O I I)


;; #source file ./ott/lang_simple.ott  lines 936 - 939 
 [(is_SGamma_of_Env SGamma)
  (StaticNormSynth SGamma t v U)
  --------------------------------
  (StaticNormCheck SGamma v t U)]



;; #source file ./ott/lang_simple.ott  lines 940 - 944 
 [(is_SGamma_of_Env SGamma)
  (StaticNormSynth SGamma t v (CanonicalAtomic (AtomicSet i)))
   (side-condition (and (< 0  i ) (<  i   j ))) 
  --------------------------------------------------------------
  (StaticNormCheck SGamma v t (CanonicalAtomic (AtomicSet j)))]



;; #source file ./ott/lang_simple.ott  lines 946 - 951 
 [(is_SGamma_of_Env SGamma)
  (StaticNormCheck SGamma U S (CanonicalAtomic (AtomicSet i)))
  (SWellFormed (EnvExt x U SGamma))
  (StaticNormCheck (EnvExt x U SGamma) V T (CanonicalAtomic (AtomicSet i)))
  ---------------------------------------------------------------------------------------------
  (StaticNormCheck SGamma (CanonicalPi x U V) (TermPi x S T) (CanonicalAtomic (AtomicSet i)))]



;; #source file ./ott/lang_simple.ott  lines 952 - 956 
 [(is_SGamma_of_Env SGamma)
  (SWellFormed (EnvExt x U SGamma))
  (StaticNormCheck (EnvExt x U SGamma) v t V)
  -----------------------------------------------------------------------------------
  (StaticNormCheck SGamma  (CanonicalLam x v)   (TermLam x t)  (CanonicalPi x U V))]

)
(define-judgment-form L 
 
  #:mode (EtaExpand I O I)


;; #source file ./ott/lang_simple.ott  lines 962 - 964 
 [(is_rr_of_atomic rr)
  ----------------------------------------------------------
  (EtaExpand rr (CanonicalAtomic rr) (CanonicalAtomic RR))]



;; #source file ./ott/lang_simple.ott  lines 966 - 970 
 [(is_e_of_spine e)
  (is_u_of_canonical u)
  (EtaExpand  (AtomicSpine  y  SpineEmpty)  u U)
  (EtaExpand (AtomicSpine x (SpineCons e u)) v V)
  ------------------------------------------------------------------------
  (EtaExpand (AtomicSpine x e)  (CanonicalLam y v)  (CanonicalPi y U V))]
)

;;; definitions 

(define-judgment-form
  L
  #:mode (Domain I O)


;; #source file ./ott/lang_simple.ott  lines 988 - 990 
 [-----------------------------------
  (Domain (CanonicalPi x gU gV) gU)]



;; #source file ./ott/lang_simple.ott  lines 991 - 993 
 [------------------------------------
  (Domain CanonicalDyn CanonicalDyn)]

)
(define-judgment-form L 
 
  #:mode (GradualEnvSub I I I I O)


;; #source file ./ott/lang_simple.ott  lines 999 - 1001 
 [-------------------------------------------
  (GradualEnvSub x gU gu EnvEmpty EnvEmpty)]



;; #source file ./ott/lang_simple.ott  lines 1002 - 1007 
 [(is_Gamma_of_Env Gamma)
  (is_Gamma_of_Env Gamma9)
  (GradualHsub x gU gu gU gU9)
  (GradualEnvSub x gU gu Gamma Gamma9)
   (side-condition (not (equal?  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) )   (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) ))) 
  -------------------------------------------------------------------
  (GradualEnvSub x gU gu (EnvExt y gU Gamma) (EnvExt y gU9 Gamma9))]



;; #source file ./ott/lang_simple.ott  lines 1008 - 1011 
 [(is_Gamma_of_Env Gamma)
  (is_Gamma_of_Env Gamma9)
  (GradualEnvSub x gU gu Gamma Gamma9)
  ----------------------------------------------------
  (GradualEnvSub x gU gu (EnvExt x gU Gamma) Gamma9)]

)
(define-judgment-form L 
 
  #:mode (GradualHsub I I I I O)


;; #source file ./ott/lang_simple.ott  lines 1018 - 1020 
 [---------------------------------------------------------------------------------------
  (GradualHsub x gU gu (CanonicalAtomic (AtomicSet i)) (CanonicalAtomic (AtomicSet i)))]



;; #source file ./ott/lang_simple.ott  lines 1022 - 1024 
 [-------------------------------------------------
  (GradualHsub x gU gu CanonicalDyn CanonicalDyn)]



;; #source file ./ott/lang_simple.ott  lines 1025 - 1030 
 [(GradualHsub x gU gu gU gU9)
  (GradualHsub x gU gu gV gV9)
   (side-condition (not (equal?  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) )   (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) ))) 
  ---------------------------------------------------------------------
  (GradualHsub x gU gu (CanonicalPi y gU gV) (CanonicalPi y gU9 gV9))]



;; #source file ./ott/lang_simple.ott  lines 1032 - 1036 
 [(GradualHsub x gU gu gv gv9)
   (side-condition (not (equal?  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) )   (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) ))) 
  --------------------------------------------------------------------
  (GradualHsub x gU gu  (CanonicalLam y gv)   (CanonicalLam y gv9) )]



;; #source file ./ott/lang_simple.ott  lines 1039 - 1042 
 [ (side-condition (not (equal?  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) )   (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) ))) 
  -------------------------------------------------------------------------------------------------------------------------
  (GradualHsub x gU gu (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ))]



;; #source file ./ott/lang_simple.ott  lines 1043 - 1048 
 [ (side-condition (not (equal?  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) )   (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) ))) 
  (GradualHsub x gU gu (CanonicalAtomic (AtomicSpine y ge)) (CanonicalAtomic (AtomicSpine y ge9)))
  (GradualHsub x gU gu gv gv9)
  ---------------------------------------------------------------------------------------------------------------------------------
  (GradualHsub x gU gu (CanonicalAtomic (AtomicSpine y (SpineCons ge gv))) (CanonicalAtomic (AtomicSpine y (SpineCons ge9 gv9))))]



;; #source file ./ott/lang_simple.ott  lines 1051 - 1054 
 [(GradualHsubR x gU gu (AtomicSpine x ge) gu gV)
  ---------------------------------------------------------------
  (GradualHsub x gU gu (CanonicalAtomic (AtomicSpine x ge)) gu)]

)
(define-judgment-form L 
 
  #:mode (GradualHsubR I I I I O O)


;; #source file ./ott/lang_simple.ott  lines 1074 - 1076 
 [-------------------------------------------------------------
  (GradualHsubR x gU gu  (AtomicSpine  x  SpineEmpty)  gu gU)]



;; #source file ./ott/lang_simple.ott  lines 1077 - 1082 
 [(GradualHsubR x gU gu1  [grr]  gv1 CanonicalDyn)
  -----------------------------------------------------------
  (GradualHsubR x gU gu1  [grr]  CanonicalDyn CanonicalDyn)]



;; #source file ./ott/lang_simple.ott  lines 1084 - 1091 
 [(GradualHsubR x gU gu  [grr]   (CanonicalLam y gu2)  (CanonicalPi y gU1 gU2))
  (GradualHsub x gU gu gv1 gv2)
  (GradualHsub y gU1 gv2 gu2 gv3)
  (GradualHsub y gU1 gv2 gU2 gV)
  ---------------------------------------
  (GradualHsubR x gU gu  [grr]  gv3 gV)]





)
(define-judgment-form L 
 
  #:mode (CodSub I I I O)


;; #source file ./ott/lang_simple.ott  lines 1106 - 1109 
 [(GradualHsub x gU gu gV gV9)
  ------------------------------------------
  (CodSub gU gu (CanonicalPi x gU gV) gV9)]



;; #source file ./ott/lang_simple.ott  lines 1110 - 1112 
 [------------------------------------------
  (CodSub gU gu CanonicalDyn CanonicalDyn)]

)
(define-judgment-form L 
 
  #:mode (BodySub I I I O)


;; #source file ./ott/lang_simple.ott  lines 1118 - 1121 
 [(GradualHsub x gU gu gv gv9)
  -------------------------------------------
  (BodySub gU gu  (CanonicalLam x gv)  gv9)]



;; #source file ./ott/lang_simple.ott  lines 1122 - 1124 
 [-------------------------------------------
  (BodySub gU gu CanonicalDyn CanonicalDyn)]
)

;;; definitions 

(define-judgment-form
  L
  #:mode (GradualSet I I)


;; #source file ./ott/lang_simple.ott  lines 1133 - 1136 
 [(is_Gamma_of_Env Gamma)
  (GradualCSynth Gamma grr CanonicalDyn)
  ------------------------------------------
  (GradualSet Gamma (CanonicalAtomic grr))]



;; #source file ./ott/lang_simple.ott  lines 1137 - 1140 
 [(is_Gamma_of_Env Gamma)
  (GradualCSynth Gamma grr (CanonicalAtomic (AtomicSet i)))
  ------------------------------------------
  (GradualSet Gamma (CanonicalAtomic grr))]



;; #source file ./ott/lang_simple.ott  lines 1143 - 1148 
 [(is_Gamma_of_Env Gamma)
  (GradualSet Gamma gU1)
  (WellFormed (EnvExt x gU1 Gamma))
  (GradualSet (EnvExt x gU1 Gamma) gU2)
  --------------------------------------------
  (GradualSet Gamma (CanonicalPi x gU1 gU2))]



;; #source file ./ott/lang_simple.ott  lines 1150 - 1152 
 [(is_Gamma_of_Env Gamma)
  ---------------------------------
  (GradualSet Gamma CanonicalDyn)]

)
(define-judgment-form L 
 
  #:mode (WellFormed I)


;; #source file ./ott/lang_simple.ott  lines 1158 - 1160 
 [-----------------------
  (WellFormed EnvEmpty)]



;; #source file ./ott/lang_simple.ott  lines 1161 - 1166 
 [(is_Gamma_of_Env Gamma)
  (WellFormed Gamma)
  (GradualSet Gamma gU)
  (GVarFree x Gamma)
  ----------------------------------
  (WellFormed (EnvExt x gU Gamma))]

)
(define-judgment-form L 
 
  #:mode (GradualCSynth I I O)


;; #source file ./ott/lang_simple.ott  lines 1172 - 1175 
 [(is_Gamma_of_Env Gamma)
   (side-condition (>  i  0)) 
  --------------------------------------------------------------------------------
  (GradualCSynth Gamma (AtomicSet i) (CanonicalAtomic  (AtomicSet (+  i  1) ) ))]



;; #source file ./ott/lang_simple.ott  lines 1177 - 1181 
 [(is_Gamma_of_Env Gamma)
  (WellFormed Gamma)
  (GVarLook x gU Gamma)
  ---------------------------------------------------------
  (GradualCSynth Gamma  (AtomicSpine  x  SpineEmpty)  gU)]



;; #source file ./ott/lang_simple.ott  lines 1185 - 1192 
 [(is_Gamma_of_Env Gamma)
  (GradualCSynth Gamma (AtomicSpine x ge) gU)
  (Domain gU gV)
  (GradualCCheck Gamma gu gV)
  (CodSub gV gu gU gV9)
  -------------------------------------------------------------
  (GradualCSynth Gamma (AtomicSpine x (SpineCons ge gu)) gV9)]

)
(define-judgment-form L 
 
  #:mode (GradualCCheck I I I)


;; #source file ./ott/lang_simple.ott  lines 1199 - 1203 
 [(is_Gamma_of_Env Gamma)
  (GradualCSynth Gamma grr gU)
  (Consistent gU gV)
  ------------------------------------------------
  (GradualCCheck Gamma (CanonicalAtomic grr) gV)]



;; #source file ./ott/lang_simple.ott  lines 1204 - 1208 
 [(is_Gamma_of_Env Gamma)
  (GradualCSynth Gamma grr (CanonicalAtomic (AtomicSet i)))
   (side-condition (and (< 0  i ) (<  i   j ))) 
  -----------------------------------------------------------------------------
  (GradualCCheck Gamma (CanonicalAtomic grr) (CanonicalAtomic (AtomicSet j)))]



;; #source file ./ott/lang_simple.ott  lines 1210 - 1214 
 [(is_Gamma_of_Env Gamma)
  (WellFormed (EnvExt x gU Gamma))
  (GradualCCheck (EnvExt x gU Gamma) gu gV)
  -------------------------------------------------------------------
  (GradualCCheck Gamma  (CanonicalLam x gu)  (CanonicalPi x gU gV))]



;; #source file ./ott/lang_simple.ott  lines 1215 - 1219 
 [(is_Gamma_of_Env Gamma)
  (WellFormed (EnvExt x CanonicalDyn Gamma))
  (GradualCCheck (EnvExt x CanonicalDyn Gamma) gu CanonicalDyn)
  ----------------------------------------------------------
  (GradualCCheck Gamma  (CanonicalLam x gu)  CanonicalDyn)]



;; #source file ./ott/lang_simple.ott  lines 1220 - 1226 
 [(is_Gamma_of_Env Gamma)
  (GradualCCheck Gamma gU1 gV)
  (WellFormed (EnvExt x gU1 Gamma))
  (GradualCCheck (EnvExt x gU1 Gamma) gU2 gV)
  (ConsistentSet gV)
  --------------------------------------------------
  (GradualCCheck Gamma (CanonicalPi x gU1 gU2) gV)]



;; #source file ./ott/lang_simple.ott  lines 1228 - 1231 
 [(is_Gamma_of_Env Gamma)
  (GradualSet Gamma gU)
  ---------------------------------------
  (GradualCCheck Gamma CanonicalDyn gU)]

)
(define-judgment-form L 
 
  #:mode (ConsistentSet I)


;; #source file ./ott/lang_simple.ott  lines 1239 - 1241 
 [-------------------------------------------------
  (ConsistentSet (CanonicalAtomic (AtomicSet i)))]



;; #source file ./ott/lang_simple.ott  lines 1242 - 1244 
 [------------------------------
  (ConsistentSet CanonicalDyn)]

)
(define-judgment-form L 
 
  #:mode (Consistent I I)


;; #source file ./ott/lang_simple.ott  lines 1252 - 1254 
 [------------------------------
  (Consistent CanonicalDyn gv)]



;; #source file ./ott/lang_simple.ott  lines 1255 - 1257 
 [------------------------------
  (Consistent gu CanonicalDyn)]



;; #source file ./ott/lang_simple.ott  lines 1258 - 1260 
 [--------------------
  (Consistent gu gu)]



;; #source file ./ott/lang_simple.ott  lines 1261 - 1265 
 [(Consistent gU gU9)
  (Consistent gV gV9)
  ------------------------------------------------------------
  (Consistent (CanonicalPi x gU gV) (CanonicalPi x gU9 gV9))]



;; #source file ./ott/lang_simple.ott  lines 1266 - 1269 
 [(Consistent gu gv)
  ----------------------------------------------------------
  (Consistent  (CanonicalLam x gu)   (CanonicalLam x gv) )]



;; #source file ./ott/lang_simple.ott  lines 1271 - 1275 
 [(Consistent (CanonicalAtomic (AtomicSpine x ge)) (CanonicalAtomic (AtomicSpine x ge9)))
  (Consistent gu gv)
  -----------------------------------------------------------------------------------------------------------------------
  (Consistent (CanonicalAtomic (AtomicSpine x (SpineCons ge gu))) (CanonicalAtomic (AtomicSpine x (SpineCons ge9 gv))))]
)

;;; definitions 

(define-judgment-form
  L
  #:mode (Meet I I O)


;; #source file ./ott/lang_simple.ott  lines 1284 - 1286 
 [---------------------------
  (Meet CanonicalDyn gU gU)]



;; #source file ./ott/lang_simple.ott  lines 1287 - 1289 
 [---------------------------
  (Meet gV CanonicalDyn gV)]



;; #source file ./ott/lang_simple.ott  lines 1290 - 1292 
 [-----------------
  (Meet gu gu gu)]



;; #source file ./ott/lang_simple.ott  lines 1293 - 1297 
 [(Meet gU gU9 gU99)
  (Meet gV gV9 gV99)
  --------------------------------------------------------------------------------
  (Meet (CanonicalPi x gU gV) (CanonicalPi x gU9 gV9) (CanonicalPi x gU99 gV99))]



;; #source file ./ott/lang_simple.ott  lines 1298 - 1301 
 [(is_u_of_canonical u)
  (is_u_of_canonical u9)
  (is_u_of_canonical v)
  (Meet u u9 v)
  ------------------------------------------------------------------
  (Meet (CanonicalLam x u) (CanonicalLam x u9) (CanonicalLam x v))]



;; #source file ./ott/lang_simple.ott  lines 1302 - 1306 
 [(Meet gu gu9 gu99)
  (Meet (CanonicalAtomic (AtomicSpine x ge)) (CanonicalAtomic (AtomicSpine x ge9)) (CanonicalAtomic (AtomicSpine x ge99)))
  --------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  (Meet (CanonicalAtomic (AtomicSpine x (SpineCons ge gu))) (CanonicalAtomic (AtomicSpine x (SpineCons ge9 gu9))) (CanonicalAtomic (AtomicSpine x (SpineCons ge99 gu99))))]

)
(define-judgment-form L 
 
  #:mode (Precision I I)


;; #source file ./ott/lang_simple.ott  lines 1314 - 1317 
 [(Meet gU gV gU)
  -------------------
  (Precision gU gV)]

)
(define-judgment-form L 
 
  #:mode (EvConsistent I I I)


;; #source file ./ott/lang_simple.ott  lines 1324 - 1329 
 [(Meet gV1 gV2 gV3)
  (Precision gU1 gV3)
  (Precision gU2 gV3)
  -----------------------------------------------
  (EvConsistent (EvidencePair gU1 gU2) gV1 gV2)]
)

;;; definitions 

(define-judgment-form
  L
  #:mode (GradualSynth I I O)


;; #source file ./ott/lang_simple.ott  lines 1343 - 1347 
 [(is_gs_of_term gT)
  (is_Gamma_of_Env Gamma)
  (GradualSetNorm Gamma gV gT)
  (GradualCheck Gamma gt gV)
  -------------------------------------------
  (GradualSynth Gamma  (TermAnn gt gT)  gV)]



;; #source file ./ott/lang_simple.ott  lines 1348 - 1351 
 [(is_Gamma_of_Env Gamma)
   (side-condition (>  i  0)) 
  -----------------------------------------------------------------------------
  (GradualSynth Gamma (TermSet i) (CanonicalAtomic  (AtomicSet (+  i  1) ) ))]



;; #source file ./ott/lang_simple.ott  lines 1353 - 1357 
 [(is_Gamma_of_Env Gamma)
  (WellFormed Gamma)
  (GVarLook x gU Gamma)
  -------------------------------------
  (GradualSynth Gamma (TermVar x) gU)]



;; #source file ./ott/lang_simple.ott  lines 1362 - 1368 
 [(is_gs_of_term gs)
  (is_Gamma_of_Env Gamma)
  (is_gs_of_term gt)
  (GradualSynth Gamma gs gV)
  (Domain gV gV1)
  (GradualNormCheck Gamma gv gt gV1)
  (CodSub gV1 gv gV gV2)
  ------------------------------------------
  (GradualSynth Gamma (TermApp gs gt) gV2)]

)
(define-judgment-form L 
 
  #:mode (GradualCheck I I I)


;; #source file ./ott/lang_simple.ott  lines 1377 - 1381 
 [(is_Gamma_of_Env Gamma)
  (GradualSynth Gamma gt gU)
  (Consistent gU gV)
  ----------------------------
  (GradualCheck Gamma gt gV)]



;; #source file ./ott/lang_simple.ott  lines 1382 - 1386 
 [(is_Gamma_of_Env Gamma)
  (GradualSynth Gamma gt (CanonicalAtomic (AtomicSet i)))
   (side-condition (and (< 0  i ) (<  i   j ))) 
  ---------------------------------------------------------
  (GradualCheck Gamma gt (CanonicalAtomic (AtomicSet j)))]



;; #source file ./ott/lang_simple.ott  lines 1387 - 1393 
 [(is_gs_of_term gS)
  (is_Gamma_of_Env Gamma)
  (GradualNormCheck Gamma gU gS gV)
  (WellFormed (EnvExt x gU Gamma))
  (GradualCheck (EnvExt x gU Gamma) gT gV)
  (ConsistentSet gV)
  ------------------------------------------
  (GradualCheck Gamma (TermPi x gS gT) gV)]



;; #source file ./ott/lang_simple.ott  lines 1395 - 1399 
 [(is_Gamma_of_Env Gamma)
  (WellFormed (EnvExt x gU Gamma))
  (GradualCheck (EnvExt x gU Gamma) gt gV)
  -------------------------------------------------------------
  (GradualCheck Gamma  (TermLam x gt)  (CanonicalPi x gU gV))]



;; #source file ./ott/lang_simple.ott  lines 1401 - 1405 
 [(is_Gamma_of_Env Gamma)
  (WellFormed (EnvExt x CanonicalDyn Gamma))
  (GradualCheck (EnvExt x CanonicalDyn Gamma) gt CanonicalDyn)
  ----------------------------------------------------
  (GradualCheck Gamma  (TermLam x gt)  CanonicalDyn)]



;; #source file ./ott/lang_simple.ott  lines 1406 - 1409 
 [(is_Gamma_of_Env Gamma)
  (GradualSet Gamma gU)
  ---------------------------------
  (GradualCheck Gamma TermDyn gU)]

)
(define-judgment-form L 
 
  #:mode (GradualSetNorm I O I)


;; #source file ./ott/lang_simple.ott  lines 1420 - 1423 
 [(is_Gamma_of_Env Gamma)
  (GradualNormSynth Gamma TT gU (CanonicalAtomic (AtomicSet i)))
  ------------------------------
  (GradualSetNorm Gamma gU TT)]



;; #source file ./ott/lang_simple.ott  lines 1425 - 1429 
 [(is_Gamma_of_Env Gamma)
  (GradualSetNorm Gamma gU SS)
  (GradualSetNorm (EnvExt x gU Gamma) gV TT)
  ---------------------------------------------------------------
  (GradualSetNorm Gamma (CanonicalPi x gU gV) (TermPi x SS TT))]



;; #source file ./ott/lang_simple.ott  lines 1430 - 1432 
 [(is_Gamma_of_Env Gamma)
  ---------------------------------------------
  (GradualSetNorm Gamma CanonicalDyn TermDyn)]

)
(define-judgment-form L 
 
  #:mode (GEtaExpand I O I)


;; #source file ./ott/lang_simple.ott  lines 1440 - 1442 
 [--------------------------------------------------------------
  (GEtaExpand grr (CanonicalAtomic grr) (CanonicalAtomic gRR))]



;; #source file ./ott/lang_simple.ott  lines 1444 - 1448 
 [(GEtaExpand  (AtomicSpine  y  SpineEmpty)  gu gU)
  (GEtaExpand (AtomicSpine x (SpineCons ge gu)) gv gV)
  -----------------------------------------------------------------------------
  (GEtaExpand (AtomicSpine x ge)  (CanonicalLam y gv)  (CanonicalPi y gU gV))]

)
(define-judgment-form L 
 
  #:mode (GradualNormSynth I I O O)


;; #source file ./ott/lang_simple.ott  lines 1454 - 1458 
 [(is_Gamma_of_Env Gamma)
  (GradualSetNorm Gamma gV TT)
  (GradualNormCheck Gamma gv tt gV)
  --------------------------------------------------
  (GradualNormSynth Gamma  (TermAnn tt TT)  gv gV)]



;; #source file ./ott/lang_simple.ott  lines 1459 - 1462 
 [(is_Gamma_of_Env Gamma)
   (side-condition (>  i  0)) 
  -----------------------------------------------------------------------------------------------------------------
  (GradualNormSynth Gamma (TermSet i) (CanonicalAtomic (AtomicSet i)) (CanonicalAtomic  (AtomicSet (+  i  1) ) ))]



;; #source file ./ott/lang_simple.ott  lines 1464 - 1469 
 [(is_Gamma_of_Env Gamma)
  (WellFormed Gamma)
  (GVarLook x gU Gamma)
  (GEtaExpand  (AtomicSpine  x  SpineEmpty)  gv gU)
  --------------------------------------------
  (GradualNormSynth Gamma (TermVar x) gv gU)]



;; #source file ./ott/lang_simple.ott  lines 1473 - 1480 
 [(is_Gamma_of_Env Gamma)
  (GradualNormSynth Gamma ss gu gV)
  (Domain gV gV1)
  (GradualNormCheck Gamma gv tt gV1)
  (BodySub gV1 gv gu gv9)
  (CodSub gV1 gv gV gV2)
  --------------------------------------------------
  (GradualNormSynth Gamma (TermApp ss tt) gv9 gV2)]

)
(define-judgment-form L 
 
  #:mode (GradualNormCheck I O I I)


;; #source file ./ott/lang_simple.ott  lines 1489 - 1493 
 [(is_Gamma_of_Env Gamma)
  (GradualNormSynth Gamma tt gv gV)
  (Precision gV gU)
  -----------------------------------
  (GradualNormCheck Gamma gv tt gU)]



;; #source file ./ott/lang_simple.ott  lines 1494 - 1500 
 [(is_Gamma_of_Env Gamma)
  (GradualNormSynth Gamma tt gv gV)
  (Consistent gU gV)
  (Meet gU gV gU9)
   (side-condition (not (equal?  gU9   gV ))) 
  ---------------------------------------------
  (GradualNormCheck Gamma CanonicalDyn tt gU)]



;; #source file ./ott/lang_simple.ott  lines 1501 - 1505 
 [(is_Gamma_of_Env Gamma)
  (GradualNormSynth Gamma tt gv (CanonicalAtomic (AtomicSet i)))
   (side-condition (and (< 0  i ) (<  i   j ))) 
  ----------------------------------------------------------------
  (GradualNormCheck Gamma gv tt (CanonicalAtomic (AtomicSet j)))]



;; #source file ./ott/lang_simple.ott  lines 1507 - 1515 
 [(is_Gamma_of_Env Gamma)
  (GradualNormCheck Gamma gU1 SS gV)
  (WellFormed (EnvExt x gU1 Gamma))
  (GradualNormCheck (EnvExt x gU1 Gamma) gU2 TT gV)
  (ConsistentSet gV)
  ----------------------------------------------------------------------
  (GradualNormCheck Gamma (CanonicalPi x gU1 gU2) (TermPi x SS TT) gV)]



;; #source file ./ott/lang_simple.ott  lines 1516 - 1520 
 [(is_Gamma_of_Env Gamma)
  (WellFormed (EnvExt x gU Gamma))
  (GradualNormCheck (EnvExt x gU Gamma) gv tt gV)
  ---------------------------------------------------------------------------------------
  (GradualNormCheck Gamma  (CanonicalLam x gv)   (TermLam x tt)  (CanonicalPi x gU gV))]



;; #source file ./ott/lang_simple.ott  lines 1521 - 1525 
 [(is_Gamma_of_Env Gamma)
  (WellFormed (EnvExt x CanonicalDyn Gamma))
  (GradualNormCheck (EnvExt x CanonicalDyn Gamma) gv tt CanonicalDyn)
  ------------------------------------------------------------------------------
  (GradualNormCheck Gamma  (CanonicalLam x gv)   (TermLam x tt)  CanonicalDyn)]



;; #source file ./ott/lang_simple.ott  lines 1526 - 1529 
 [(is_Gamma_of_Env Gamma)
  (GradualSet Gamma gU)
  --------------------------------------------------
  (GradualNormCheck Gamma CanonicalDyn TermDyn gU)]



;; #source file ./ott/lang_simple.ott  lines 1531 - 1536 
 [(is_Gamma_of_Env Gamma)
  (GradualNormSynth Gamma ett gv gV)
  (Meet gU gV gV)
  (EvConsistent (EvidencePair gV gV) gU gV)
  ------------------------------------------------
  (GradualNormCheck Gamma gv (TermEp ep ett) gU)]



;; #source file ./ott/lang_simple.ott  lines 1537 - 1543 
 [(is_Gamma_of_Env Gamma)
  (GradualNormSynth Gamma ett gv gV)
  (Meet gU gV gU9)
  (EvConsistent (EvidencePair gU9 gU9) gU gV)
   (side-condition (not (equal?  gU9   gV9 ))) 
  ----------------------------------------------------------
  (GradualNormCheck Gamma CanonicalDyn (TermEp ep ett) gU)]



;; #source file ./ott/lang_simple.ott  lines 1545 - 1547 
 [(is_Gamma_of_Env Gamma)
  ----------------------------------------------------------
  (GradualNormCheck Gamma CanonicalDyn (TermDynAnn gU) gU)]
)

;;; definitions 

(define-judgment-form
  L
  #:mode (EvSynth I I O)


;; #source file ./ott/lang_simple.ott  lines 1558 - 1561 
 [(is_Gamma_of_Env Gamma)
   (side-condition (>  i  0)) 
  ------------------------------------------------------------------------
  (EvSynth Gamma (TermSet i) (CanonicalAtomic  (AtomicSet (+  i  1) ) ))]



;; #source file ./ott/lang_simple.ott  lines 1563 - 1567 
 [(is_Gamma_of_Env Gamma)
  (WellFormed Gamma)
  (GVarLook x gU Gamma)
  --------------------------------
  (EvSynth Gamma (TermVar x) gU)]



;; #source file ./ott/lang_simple.ott  lines 1571 - 1577 
 [(is_es_of_term es)
  (is_Gamma_of_Env Gamma)
  (is_es_of_term et)
  (EvSynth Gamma es gV)
  (Domain gV gU)
  (GradualNormCheck Gamma gv et gU)
  (CodSub gU gv gV gV2)
  -------------------------------------
  (EvSynth Gamma (TermApp es et) gV2)]

)
(define-judgment-form L 
 
  #:mode (EvCheck I I I)


;; #source file ./ott/lang_simple.ott  lines 1584 - 1588 
 [(is_Gamma_of_Env Gamma)
  (EvSynth Gamma et gU)
  (EvConsistent ep gU gV)
  -----------------------------------
  (EvCheck Gamma (TermEp ep et) gV)]



;; #source file ./ott/lang_simple.ott  lines 1589 - 1594 
 [(is_es_of_term eS)
  (is_Gamma_of_Env Gamma)
  (GradualNormCheck Gamma gU eS gV)
  (WellFormed (EnvExt x gU Gamma))
  (EvCheck (EnvExt x gU Gamma) eT gV)
  -------------------------------------
  (EvCheck Gamma (TermPi x eS eT) gV)]



;; #source file ./ott/lang_simple.ott  lines 1597 - 1601 
 [(is_Gamma_of_Env Gamma)
  (WellFormed (EnvExt x gU Gamma))
  (EvCheck (EnvExt x gU Gamma) et gV)
  --------------------------------------------------------
  (EvCheck Gamma  (TermLam x et)  (CanonicalPi x gU gV))]



;; #source file ./ott/lang_simple.ott  lines 1603 - 1607 
 [(is_Gamma_of_Env Gamma)
  (WellFormed (EnvExt x CanonicalDyn Gamma))
  (EvCheck (EnvExt x CanonicalDyn Gamma) et CanonicalDyn)
  -----------------------------------------------
  (EvCheck Gamma  (TermLam x et)  CanonicalDyn)]



;; #source file ./ott/lang_simple.ott  lines 1608 - 1611 
 [(is_Gamma_of_Env Gamma)
  (GradualSet Gamma gU)
  ------------------------------------
  (EvCheck Gamma (TermDynAnn gU) gU)]

)
(define-judgment-form L 
 
  #:mode (SimpleSmallStep I O)


;; #source file ./ott/lang_simple.ott  lines 1627 - 1629 
 [(is_simpleValue_of_term sv)
  ---------------------------------------
  (SimpleSmallStep  (TermAnn sv T)  sv)]



;; #source file ./ott/lang_simple.ott  lines 1630 - 1632 
 [(is_simpleValue_of_term sv)
  ------------------------------------------------------------------------
  (SimpleSmallStep (TermApp  (TermLam x t)  sv)  (error "TODO tsubst") )]



;; #source file ./ott/lang_simple.ott  lines 1634 - 1637 
 [(is_s_of_term s)
  (SimpleSmallStep s t)
  -----------------------------------------------------------
  (SimpleSmallStep  (error "TODO SC")   (error "TODO SC") )]

)
(define-judgment-form L 
 
  #:mode (SmallStep I O)


;; #source file ./ott/lang_simple.ott  lines 1645 - 1648 
 [(ConsistentTrans ep1 ep2 ep3)
  ------------------------------------------------------------
  (SmallStep (TermEp ep1  (TermEp ep2 et) ) (TermEp ep3 et))]



;; #source file ./ott/lang_simple.ott  lines 1651 - 1654 
 [ (side-condition ,(empty? (judgment-holds (ConsistentTrans  ep1   ep2  ep9999) ep9999))) 
  ------------------------------------------------------
  (SmallStep (TermEp ep1  (TermEp ep2 et) ) TermError)]



;; #source file ./ott/lang_simple.ott  lines 1655 - 1657 
 [(is_eu_of_term ev)
  -------------------------------------------------------------------
  (SmallStep (TermApp  (TermLam x et)  ev)  (error "TODO tsubst") )]



;; #source file ./ott/lang_simple.ott  lines 1658 - 1663 
 [(is_eu_of_term ev)
  (Domain gU gV1)
  (GradualNormCheck EnvEmpty gv ev gV1)
  (CodSub gV1 gv gU gV2)
  -----------------------------------------------------------
  (SmallStep (TermApp (TermDynAnn gU) ev) (TermDynAnn gV2))]



;; #source file ./ott/lang_simple.ott  lines 1664 - 1669 
 [(is_ru_of_term rv)
  (EvDom ep1 ep3)
  (ConsistentTrans ep2 ep3 ep4)
  (EvCod rv ep1 ep5)
  ----------------------------------------------------------------------------------------------------------------
  (SmallStep (TermApp  (TermEp ep1  (TermLam x et) )   (TermEp ep2 rv) ) (TermEp ep5   (error "TODO tsubst")  ))]




;; #source file ./ott/lang_simple.ott  lines 1677 - 1680 
 [(is_ru_of_term rv)
  (is_es_of_term es)
  (SmallStep (TermApp  (TermEp ep1 rv)   (TermEp (EvidencePair CanonicalDyn CanonicalDyn) rv) ) es)
  -----------------------------------------------
  (SmallStep (TermApp  (TermEp ep1 rv)  rv) es)]



;; #source file ./ott/lang_simple.ott  lines 1681 - 1685 
 [(is_ru_of_term ru)
  (is_ru_of_term rv)
  (EvDom ep1 ep3)
   (side-condition ,(empty? (judgment-holds (ConsistentTrans  ep2   ep3  ep9999) ep9999))) 
  ---------------------------------------------------------------------
  (SmallStep (TermApp  (TermEp ep1 ru)   (TermEp ep2 rv) ) TermError)]



;; #source file ./ott/lang_simple.ott  lines 1686 - 1689 
 [(is_ru_of_term rv)
  (is_eu_of_term ev)
   (side-condition ,(empty? (judgment-holds (EvDom  ep1  ep9999) ep9999))) 
  ------------------------------------------------------
  (SmallStep (TermApp  (TermEp ep1 rv)  ev) TermError)]



;; #source file ./ott/lang_simple.ott  lines 1695 - 1698 
 [(is_eu_of_term ev)
   (side-condition ,(empty? (judgment-holds (Domain  gU  gV9999) gV9999))) 
  -------------------------------------------------------------------
  (SmallStep (TermApp  (TermEp ep1 (TermDynAnn gU))  ev) TermError)]



;; #source file ./ott/lang_simple.ott  lines 1701 - 1705 
 [(is_es_of_term es)
  (SmallStep es et)
   (side-condition (not (equal?  et  TermError))) 
  -----------------------------------------------------
  (SmallStep  (error "TODO EC")   (error "TODO EC") )]



;; #source file ./ott/lang_simple.ott  lines 1706 - 1709 
 [(is_es_of_term es)
  (SmallStep es TermError)
  -------------------------------------------
  (SmallStep  (error "TODO EC")  TermError)]

)
(define-judgment-form L 
 
  #:mode (ConsistentTrans I I O)


;; #source file ./ott/lang_simple.ott  lines 1715 - 1719 
 [(Meet gU1 gU2 gU3)
  (Meet gV1 gV2 gV3)
  ----------------------------------------------------------------------------------------
  (ConsistentTrans (EvidencePair gU1 gV1) (EvidencePair gU2 gV2) (EvidencePair gU3 gV3))]

)
(define-judgment-form L 
 
  #:mode (EvDom I O)


;; #source file ./ott/lang_simple.ott  lines 1725 - 1729 
 [(Domain gU gU9)
  (Domain gV gV9)
  -----------------------------------------------------
  (EvDom (EvidencePair gU gV) (EvidencePair gU9 gV9))]

)
(define-judgment-form L 
 
  #:mode (EvCod I I O)


;; #source file ./ott/lang_simple.ott  lines 1736 - 1744 
 [(is_eu_of_term ev)
  (Domain gU gU1)
  (Domain gV gV1)
  (GradualNormCheck EnvEmpty gu ev gU1)
  (GradualNormCheck EnvEmpty gv ev gV1)
  (CodSub gU1 gu gU gU2)
  (CodSub gV1 gv gV gV2)
  --------------------------------------------------------
  (EvCod ev (EvidencePair gU gV) (EvidencePair gU2 gV2))]
)


