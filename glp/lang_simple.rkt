;; #source  
;;; generated by Ott 0.28 from: ./ott/lang_simple.ott

#lang racket
(require redex)

;; #source file ./ott/lang_simple.ott  lines 4 - 6 
;; #source file ./ott/lang_simple.ott  lines 8 - 10 
(provide (all-defined-out))

;; #source file ./ott/lang_simple.ott  lines 12 - 80 
;; #source file ./ott/lang_simple.ott  lines 85 - 87 
;; #source file ./ott/lang_simple.ott  lines 90 - 90 
;; #source file ./ott/lang_simple.ott  lines 96 - 104 and file ./ott/lang_simple.ott  lines 109 - 133 and file ./ott/lang_simple.ott  lines 137 - 146 and file ./ott/lang_simple.ott  lines 148 - 153 and file ./ott/lang_simple.ott  lines 155 - 160 and file ./ott/lang_simple.ott  lines 163 - 168 and file ./ott/lang_simple.ott  lines 170 - 172 and file ./ott/lang_simple.ott  lines 177 - 197 and file ./ott/lang_simple.ott  lines 202 - 211 and file ./ott/lang_simple.ott  lines 213 - 218 and file ./ott/lang_simple.ott  lines 220 - 223 and file ./ott/lang_simple.ott  lines 231 - 232 and file ./ott/lang_simple.ott  lines 240 - 251 and file ./ott/lang_simple.ott  lines 255 - 261 and file ./ott/lang_simple.ott  lines 264 - 269 and file ./ott/lang_simple.ott  lines 271 - 279 and file ./ott/lang_simple.ott  lines 283 - 285 and file ./ott/lang_simple.ott  lines 287 - 289 and file ./ott/lang_simple.ott  lines 291 - 293 and file ./ott/lang_simple.ott  lines 296 - 302 and file ./ott/lang_simple.ott  lines 304 - 310 and file ./ott/lang_simple.ott  lines 356 - 359 and file ./ott/lang_simple.ott  lines 361 - 365 and file ./ott/lang_simple.ott  lines 367 - 371 and file ./ott/lang_simple.ott  lines 472 - 477 and file ./ott/lang_simple.ott  lines 480 - 482 and file ./ott/lang_simple.ott  lines 484 - 486 
(define-language L  

(level i j ::= number)

;; #source file ./ott/lang_simple.ott  lines 202 - 211 
  (canonical gu gv gU gV ::= 
    (CanonicalLam var canonical)
    CanonicalDyn
    (CanonicalAtomic atomic)
    (CanonicalPi var canonical canonical))
  ;grammar_pp, 2817: and 
;; #source file ./ott/lang_simple.ott  lines 213 - 218 
  (atomic grr gRR ::= 
    (AtomicSpine var spine)
    (AtomicSet level))
  ;grammar_pp, 2817: and 
;; #source file ./ott/lang_simple.ott  lines 220 - 223 
  (spine ge ::= 
    SpineEmpty
    (SpineCons spine canonical))

;; #source file ./ott/lang_simple.ott  lines 231 - 232 
  (epsilon ep ::= 
    (EvidencePair canonical canonical))

;; #source file ./ott/lang_simple.ott  lines 367 - 371 
  (Env ::= 
    EnvEmpty
    (EnvExt var canonical Env)
    (Envconcat Env Env))

;; #source file ./ott/lang_simple.ott  lines 109 - 133 
  (term ss tt ett SS TT ::= 
    (TermLam var term)
    (TermApp term term)
    var
    (TermSet level)
    (TermPi var term term)
    (TermAnn term term)
    (TermEp epsilon term)
    TermDyn
    (TermDynAnn canonical)
    TermError)

(iinf ::= number)

;; #source file ./ott/lang_simple.ott  lines 296 - 302 
  (simpleContext SC ::= 
    (TermPi x hole T)
    (TermPi x sV hole)
    (TermApp hole t)
    (TermApp sv hole)
    (TermAnn hole T))

;; #source file ./ott/lang_simple.ott  lines 283 - 285 
  (dummyeu dummyev dummyeueU dummyeueV ::= 
    (DummyEvidenceValueEv epsilon term)
    (DummyEvidenceValueRaw term))

;; #source file ./ott/lang_simple.ott  lines 304 - 310 
  (evalContext EC ::= 
    (TermPi x hole eT)
    (TermPi x eV hole)
    (TermApp hole et)
    (TermApp ev hole)
    (TermEp ep hole))

;; #source file ./ott/lang_simple.ott  lines 480 - 482 
  (is js ::= 
    (LevelMultiSetSingleton level)
    (LevelMultiSetSum is is))

;; #source file ./ott/lang_simple.ott  lines 484 - 486 
  (iinfs jinfs ::= 
    (UniverseMultiSetSingleton iinf)
    (UniverseMultiSetSum iinfs iinfs))

;; #source file ./ott/lang_simple.ott  lines 155 - 160 
  (u v U V ::= 
    (CanonicalLam var canonical)
    (CanonicalAtomic atomic)
    (CanonicalPi var canonical canonical))

;; #source file ./ott/lang_simple.ott  lines 264 - 269 
  (simpleValue su sv sU sV ::= 
    (TermPi var term term)
    (TermLam var term)
    var
    (TermApp term term)
    (TermSet level))

;; #source file ./ott/lang_simple.ott  lines 356 - 359 
  (SGamma ::= 
    EnvEmpty
    (EnvExt var canonical Env)
    (Envconcat Env Env))

;; #source file ./ott/lang_simple.ott  lines 287 - 289 
  (evidenceSpine ve ::= 
    var
    (TermApp term term))

;; #source file ./ott/lang_simple.ott  lines 240 - 251 
  (es et eS eT ::= 
    (TermPi var term term)
    (TermLam var term)
    var
    (TermApp term term)
    (TermDynAnn canonical)
    (TermSet level)
    (TermEp epsilon term)
    TermError)

;; #source file ./ott/lang_simple.ott  lines 148 - 153 
  (sa ta Sa Ta ::= 
    (TermLam var term)
    (TermApp term term)
    var
    (TermPi var term term)
    (TermSet level))

;; #source file ./ott/lang_simple.ott  lines 255 - 261 
  (ru rv rU rV ::= 
    (TermPi var term term)
    (TermLam var term)
    var
    (TermApp term term)
    (TermSet level)
    (TermDynAnn canonical))

;; #source file ./ott/lang_simple.ott  lines 291 - 293 
  (simpleSpine se ::= 
    var
    (TermApp term term))

;; #source file ./ott/lang_simple.ott  lines 137 - 146 
  (s t S T ::= 
    (TermLam var term)
    (TermApp term term)
    var
    (TermPi var term term)
    (TermSet level)
    (TermAnn term term))

;; #source file ./ott/lang_simple.ott  lines 361 - 365 
  (Gamma ::= 
    EnvEmpty
    (EnvExt var canonical Env)
    (Envconcat Env Env))

;; #source file ./ott/lang_simple.ott  lines 177 - 197 
  (gs gt gS gT ::= 
    (TermLam var term)
    (TermApp term term)
    var
    (TermSet level)
    (TermPi var term term)
    (TermAnn term term)
    TermDyn)

;; #source file ./ott/lang_simple.ott  lines 271 - 279 
  (eu ev eU eV ::= 
    (TermEp epsilon term)
    (TermPi var term term)
    (TermLam var term)
    var
    (TermApp term term)
    (TermSet level)
    (TermDynAnn canonical))

;; #source file ./ott/lang_simple.ott  lines 170 - 172 
  (e ::= 
    SpineEmpty
    (SpineCons spine canonical))

;; #source file ./ott/lang_simple.ott  lines 163 - 168 
  (rr RR ::= 
    (AtomicSpine var spine)
    (AtomicSet level))
   (var x y z X Y Z ::= variable-not-otherwise-mentioned)

    #:binding-forms

    (TermLam x tt #:refers-to (shadow x))
    (TermPi x SS TT #:refers-to (shadow x))
    (StaticTermLam x t #:refers-to (shadow x))
    (StaticTermPi x S T #:refers-to (shadow x))
    (StaticTermNoAnnLam x ta #:refers-to (shadow x))
    (StaticTermNoAnnPi x Sa Ta #:refers-to (shadow x))
    (StaticCanonicalLam x u #:refers-to (shadow x))

    (GradualTermLam x gt #:refers-to (shadow x))
    (GradualTermPi x gS gT #:refers-to (shadow x))
    (CanonicalLam x gu #:refers-to (shadow x))
    (CanonicalPi x gU gV #:refers-to (shadow x))

    (EvidenceTermLam x et #:refers-to (shadow x))
    (RawValueLam x et #:refers-to (shadow x))
    (SimpleValueLam x ta)
    (EvidenceValueLam x et #:refers-to (shadow x))

)
;; BLOCK level term s sa u rr e gs canonical atomic spine epsilon es ru simpleValue eu dummyeu evidenceSpine simpleSpine simpleContext evalContext SGamma Gamma Env iinf is iinfs
;;;; subrules 
;; #source file ./ott/lang_simple.ott  lines 499 - 499 and file ./ott/lang_simple.ott  lines 500 - 500 and file ./ott/lang_simple.ott  lines 503 - 503 and file ./ott/lang_simple.ott  lines 504 - 504 and file ./ott/lang_simple.ott  lines 505 - 505 and file ./ott/lang_simple.ott  lines 506 - 506 and file ./ott/lang_simple.ott  lines 507 - 507 and file ./ott/lang_simple.ott  lines 509 - 509 and file ./ott/lang_simple.ott  lines 510 - 510 and file ./ott/lang_simple.ott  lines 511 - 511 and file ./ott/lang_simple.ott  lines 512 - 512 and file ./ott/lang_simple.ott  lines 513 - 513 and file ./ott/lang_simple.ott  lines 514 - 514 and file ./ott/lang_simple.ott  lines 515 - 515 and file ./ott/lang_simple.ott  lines 516 - 516 and file ./ott/lang_simple.ott  lines 517 - 517 and file ./ott/lang_simple.ott  lines 518 - 518 and file ./ott/lang_simple.ott  lines 519 - 519 and file ./ott/lang_simple.ott  lines 520 - 520 
;; #source file ./ott/lang_simple.ott  lines 531 - 542 
;; #source file ./ott/lang_simple.ott  lines 544 - 552 

(define-metafunction L 
  succ : i -> i
  [(succ i) ,(+ (term i) 1)])
  
  (define-metafunction L 
  pred : i -> i
  [(pred i) ,(- (term i) 1)])

;;; definitions 

(define-judgment-form
  L
  #:mode (GVarLook I O I)

;; #source file ./ott/lang_simple.ott  lines 561 - 563 
 [
  -------------------------------------
  (GVarLook x gU (EnvExt x gU Gamma))]

;; #source file ./ott/lang_simple.ott  lines 564 - 568 
 [
  (GVarLook x gU Gamma)
   (side-condition (not (equal?  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) )   (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) ))) 
  -------------------------------------
  (GVarLook x gU (EnvExt y gV Gamma))]

)
(define-judgment-form L 
 
  #:mode (GVarFree I I)

;; #source file ./ott/lang_simple.ott  lines 572 - 574 
 [-----------------------
  (GVarFree x EnvEmpty)]

;; #source file ./ott/lang_simple.ott  lines 575 - 579 
 [
   (side-condition (not (equal?  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) )   (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) ))) 
  (GVarFree x Gamma)
  ----------------------------------
  (GVarFree x (EnvExt y gU Gamma))]
)

;;; definitions 

(define-judgment-form
  L
  #:mode (Universe I I O)

;; #source file ./ott/lang_simple.ott  lines 600 - 603 
 [
   (side-condition (>  i  0)) 
  -----------------------------------------------------------------
  (Universe Gamma (CanonicalAtomic (AtomicSet i))   (succ  i )  )]

;; #source file ./ott/lang_simple.ott  lines 604 - 609 
 [
  (GVarLook x gV Gamma)
  (Universe Gamma gV  i )
   (side-condition (>  i  0)) 
  ----------------------------------------------------------------------------------
  (Universe Gamma (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) )   (pred  i )  )]

;; #source file ./ott/lang_simple.ott  lines 610 - 614 
 [
  (Universe Gamma gU  i )
  (Universe (EnvExt x gU Gamma) gV  j )
  ------------------------------------------------------------
  (Universe Gamma (CanonicalPi x gU gV)  (max   i     j  ) )]

;; #source file ./ott/lang_simple.ott  lines 615 - 618 
 [
  (Universe Gamma gu  i )
  --------------------------------------------
  (Universe Gamma  (CanonicalLam x gu)   i )]

;; #source file ./ott/lang_simple.ott  lines 619 - 623 
 [
  (Universe Gamma (CanonicalAtomic (AtomicSpine x ge))  i )
  (Universe Gamma gv  j )
  ------------------------------------------------------------------------------------------
  (Universe Gamma (CanonicalAtomic (AtomicSpine x (SpineCons ge gv)))  (max   i     j  ) )]

;; #source file ./ott/lang_simple.ott  lines 624 - 626 
 [
  ----------------------------------------
  (Universe Gamma CanonicalDyn  +inf.0 )]

)
(define-judgment-form L 
 
  #:mode (SUniverse I I O)

;; #source file ./ott/lang_simple.ott  lines 632 - 635 
 [
   (side-condition (>  i  0)) 
  -----------------------------------------------------------------
  (SUniverse SGamma (CanonicalAtomic (AtomicSet i))  (succ  i ) )]

;; #source file ./ott/lang_simple.ott  lines 636 - 641 
 [
  (GVarLook x V SGamma)
  (SUniverse SGamma V i)
   (side-condition (>  i  0)) 
  ----------------------------------------------------------------------------------
  (SUniverse SGamma (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) )  (pred  i ) )]

;; #source file ./ott/lang_simple.ott  lines 643 - 647 
 [
  (SUniverse SGamma U i)
  (SUniverse (EnvExt x U SGamma) V j)
  --------------------------------------------------------
  (SUniverse SGamma (CanonicalPi x U V)  (max  i   j ) )]

;; #source file ./ott/lang_simple.ott  lines 648 - 650 
 [
  
  ---------------------------------------------
  (SUniverse SGamma  (CanonicalLam x u)   0 )]

;; #source file ./ott/lang_simple.ott  lines 651 - 655 
 [
  
  (SUniverse SGamma (CanonicalAtomic (AtomicSpine x e)) i)
  (SUniverse SGamma v j)
  --------------------------------------------------------------------------------------
  (SUniverse SGamma (CanonicalAtomic (AtomicSpine x (SpineCons e v)))  (max  i   j ) )]
)

;;; definitions 

(define-judgment-form
  L
  #:mode (StaticHsub I I I I O)

;; #source file ./ott/lang_simple.ott  lines 685 - 687 
 [
  ------------------------------------------------------------------------------------
  (StaticHsub x U u (CanonicalAtomic (AtomicSet i)) (CanonicalAtomic (AtomicSet i)))]

;; #source file ./ott/lang_simple.ott  lines 690 - 695 
 [
  (StaticHsub x U u U U9)
  (StaticHsub x U u V V9)
   (side-condition (not (equal?  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) )   (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) ))) 
  --------------------------------------------------------------
  (StaticHsub x U u (CanonicalPi y U V) (CanonicalPi y U9 V9))]

;; #source file ./ott/lang_simple.ott  lines 697 - 701 
 [
  (StaticHsub x U u v v9)
   (side-condition (not (equal?  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) )   (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) ))) 
  ---------------------------------------------------------------
  (StaticHsub x U u  (CanonicalLam y v)   (CanonicalLam y v9) )]

;; #source file ./ott/lang_simple.ott  lines 704 - 707 
 [
   (side-condition (not (equal?  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) )   (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) ))) 
  ----------------------------------------------------------------------------------------------------------------------
  (StaticHsub x U u (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ))]

;; #source file ./ott/lang_simple.ott  lines 708 - 713 
 [
  
   (side-condition (not (equal?  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) )   (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) ))) 
  (StaticHsub x U u (CanonicalAtomic (AtomicSpine y e)) (CanonicalAtomic (AtomicSpine y e9)))
  (StaticHsub x U u v v9)
  --------------------------------------------------------------------------------------------------------------------------
  (StaticHsub x U u (CanonicalAtomic (AtomicSpine y (SpineCons e v))) (CanonicalAtomic (AtomicSpine y (SpineCons e9 v9))))]

;; #source file ./ott/lang_simple.ott  lines 714 - 717 
 [
  
  (StaticHsubR x U u1 (AtomicSpine x (SpineCons e u2)) v2 V9)
  ---------------------------------------------------------------------------
  (StaticHsub x U u1 (CanonicalAtomic (AtomicSpine x (SpineCons e u2))) v2)]

)
(define-judgment-form L 
 
  #:mode (StaticHsubR I I I I O O)

;; #source file ./ott/lang_simple.ott  lines 728 - 730 
 [
  --------------------------------------------------------
  (StaticHsubR x U u  (AtomicSpine  x  SpineEmpty)  u U)]

;; #source file ./ott/lang_simple.ott  lines 731 - 740 
 [
  
  (StaticHsub x U u1 u2 u3)
  (StaticHsubR x U u1 (AtomicSpine x e)  (CanonicalLam y v1)  (CanonicalPi y V1 V2))
  (StaticHsub y V1 u3 v1 v2)
  (StaticHsub y V1 u3 V2 V9)
  ---------------------------------------------------------------
  (StaticHsubR x U u1  (AtomicSpine x (SpineCons e u2))  v2 V9)]
)

;;; definitions 

(define-judgment-form
  L
  #:mode (SWellFormed I)

;; #source file ./ott/lang_simple.ott  lines 750 - 752 
 [------------------------
  (SWellFormed EnvEmpty)]

;; #source file ./ott/lang_simple.ott  lines 753 - 758 
 [
  (SWellFormed SGamma)
  (StaticSet SGamma U)
  (GVarFree x SGamma)
  -----------------------------------
  (SWellFormed (EnvExt x U SGamma))]

)
(define-judgment-form L 
 
  #:mode (StaticSet I I)

;; #source file ./ott/lang_simple.ott  lines 767 - 770 
 [
  
  (StaticCSynth SGamma rr (CanonicalAtomic (AtomicSet i)))
  -----------------------------------------
  (StaticSet SGamma (CanonicalAtomic rr))]

;; #source file ./ott/lang_simple.ott  lines 773 - 778 
 [
  (StaticSet SGamma U)
  (SWellFormed (EnvExt x U SGamma))
  (StaticSet (EnvExt x U SGamma) V)
  ----------------------------------------
  (StaticSet SGamma (CanonicalPi x U V))]

)
(define-judgment-form L 
 
  #:mode (StaticCSynth I I O)

;; #source file ./ott/lang_simple.ott  lines 786 - 789 
 [
   (side-condition (>  i  0)) 
  ---------------------------------------------------------------------------------
  (StaticCSynth SGamma (AtomicSet i) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 791 - 795 
 [
  
  (SWellFormed SGamma)
  (GVarLook x U SGamma)
  --------------------------------------------------------
  (StaticCSynth SGamma  (AtomicSpine  x  SpineEmpty)  U)]

;; #source file ./ott/lang_simple.ott  lines 799 - 805 
 [
  
  (StaticCSynth SGamma (AtomicSpine x e) (CanonicalPi y U1 U2))
  (StaticCCheck SGamma u U1)
  (StaticHsub y U1 u U2 V)
  ---------------------------------------------------------
  (StaticCSynth SGamma (AtomicSpine x (SpineCons e u)) V)]

)
(define-judgment-form L 
 
  #:mode (StaticCCheck I I I)

;; #source file ./ott/lang_simple.ott  lines 813 - 816 
 [
  
  (StaticCSynth SGamma rr (CanonicalAtomic RR))
  -----------------------------------------------------------------
  (StaticCCheck SGamma (CanonicalAtomic rr) (CanonicalAtomic RR))]

;; #source file ./ott/lang_simple.ott  lines 817 - 821 
 [
  
  (StaticCSynth SGamma rr (CanonicalAtomic (AtomicSet i)))
   (side-condition (and (< 0  i ) (<  i   j ))) 
  ----------------------------------------------------------------------------
  (StaticCCheck SGamma (CanonicalAtomic rr) (CanonicalAtomic (AtomicSet j)))]

;; #source file ./ott/lang_simple.ott  lines 823 - 827 
 [
  
  (SWellFormed (EnvExt x U SGamma))
  (StaticCCheck (EnvExt x U SGamma) u V)
  ----------------------------------------------------------------
  (StaticCCheck SGamma  (CanonicalLam x u)  (CanonicalPi x U V))]

;; #source file ./ott/lang_simple.ott  lines 828 - 833 
 [
  (StaticCCheck SGamma U (CanonicalAtomic (AtomicSet i)))
  (SWellFormed (EnvExt x U SGamma))
  (StaticCCheck (EnvExt x U SGamma) V (CanonicalAtomic (AtomicSet i)))
  ---------------------------------------------------------------------------
  (StaticCCheck SGamma (CanonicalPi x U V) (CanonicalAtomic (AtomicSet i)))]
)

;;; definitions 

(define-judgment-form
  L
  #:mode (StaticSynth I I O)

;; #source file ./ott/lang_simple.ott  lines 843 - 847 
 [
  (StaticSetNorm SGamma V T)
  (StaticCheck SGamma t V)
  ----------------------------------------
  (StaticSynth SGamma  (TermAnn t T)  V)]

;; #source file ./ott/lang_simple.ott  lines 848 - 851 
 [
   (side-condition (>  i  0)) 
  ------------------------------------------------------------------------------
  (StaticSynth SGamma (TermSet i) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 853 - 857 
 [
  
  (SWellFormed SGamma)
  (GVarLook x U SGamma)
  ------------------------------------
  (StaticSynth SGamma (TermVar x) U)]

;; #source file ./ott/lang_simple.ott  lines 862 - 868 
 [
  
  (StaticSynth SGamma s (CanonicalPi x U V))
  (StaticNormCheck SGamma v t U)
  (StaticHsub x U v V V9)
  ---------------------------------------
  (StaticSynth SGamma (TermApp s t) V9)]

)
(define-judgment-form L 
 
  #:mode (StaticCheck I I I)

;; #source file ./ott/lang_simple.ott  lines 875 - 878 
 [
  (StaticSynth SGamma t U)
  --------------------------
  (StaticCheck SGamma t U)]

;; #source file ./ott/lang_simple.ott  lines 879 - 883 
 [
  (StaticSynth SGamma t (CanonicalAtomic (AtomicSet i)))
   (side-condition (and (< 0  i ) (<  i   j ))) 
  --------------------------------------------------------
  (StaticCheck SGamma t (CanonicalAtomic (AtomicSet j)))]

;; #source file ./ott/lang_simple.ott  lines 884 - 889 
 [
  (StaticNormCheck SGamma U S (CanonicalAtomic (AtomicSet i)))
  (SWellFormed (EnvExt x U SGamma))
  (StaticCheck (EnvExt x U SGamma) T (CanonicalAtomic (AtomicSet i)))
  ---------------------------------------------------------------------
  (StaticCheck SGamma (TermPi x S T) (CanonicalAtomic (AtomicSet i)))]

;; #source file ./ott/lang_simple.ott  lines 891 - 895 
 [
  (SWellFormed (EnvExt x U SGamma))
  (StaticCheck (EnvExt x U SGamma) t V)
  ----------------------------------------------------------
  (StaticCheck SGamma  (TermLam x t)  (CanonicalPi x U V))]

)
(define-judgment-form L 
 
  #:mode (StaticSetNorm I O I)

;; #source file ./ott/lang_simple.ott  lines 906 - 909 
 [
  (StaticNormSynth SGamma S U (CanonicalAtomic (AtomicSet i)))
  ----------------------------
  (StaticSetNorm SGamma U S)]

;; #source file ./ott/lang_simple.ott  lines 910 - 914 
 [
  (StaticSetNorm SGamma U S)
  (StaticSetNorm (EnvExt x U SGamma) V T)
  -----------------------------------------------------------
  (StaticSetNorm SGamma (CanonicalPi x U V) (TermPi x S T))]

)
(define-judgment-form L 
 
  #:mode (StaticNormSynth I I O O)

;; #source file ./ott/lang_simple.ott  lines 920 - 924 
 [
  (StaticSetNorm SGamma V T)
  (StaticNormCheck SGamma v t V)
  ----------------------------------------------
  (StaticNormSynth SGamma  (TermAnn t T)  v V)]

;; #source file ./ott/lang_simple.ott  lines 925 - 928 
 [
   (side-condition (>  i  0)) 
  ------------------------------------------------------------------------------------------------------------------
  (StaticNormSynth SGamma (TermSet i) (CanonicalAtomic (AtomicSet i)) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 930 - 935 
 [
  (SWellFormed SGamma)
  (GVarLook x U SGamma)
  (EtaExpand  (AtomicSpine  x  SpineEmpty)  v U)
  ------------------------------------------
  (StaticNormSynth SGamma (TermVar x) v U)]

;; #source file ./ott/lang_simple.ott  lines 940 - 946 
 [
  
  (StaticNormSynth SGamma s  (CanonicalLam x u)  (CanonicalPi x U1 U2))
  (StaticNormCheck SGamma v t U1)
  (StaticHsub x U1 v u v9)
  (StaticHsub x U1 v U2 V)
  ---------------------------------------------
  (StaticNormSynth SGamma (TermApp s t) v9 V)]

)
(define-judgment-form L 
 
  #:mode (StaticNormCheck I O I I)

;; #source file ./ott/lang_simple.ott  lines 955 - 958 
 [
  (StaticNormSynth SGamma t v U)
  --------------------------------
  (StaticNormCheck SGamma v t U)]

;; #source file ./ott/lang_simple.ott  lines 959 - 963 
 [
  (StaticNormSynth SGamma t v (CanonicalAtomic (AtomicSet i)))
   (side-condition (and (< 0  i ) (<  i   j ))) 
  --------------------------------------------------------------
  (StaticNormCheck SGamma v t (CanonicalAtomic (AtomicSet j)))]

;; #source file ./ott/lang_simple.ott  lines 965 - 970 
 [
  (StaticNormCheck SGamma U S (CanonicalAtomic (AtomicSet i)))
  (SWellFormed (EnvExt x U SGamma))
  (StaticNormCheck (EnvExt x U SGamma) V T (CanonicalAtomic (AtomicSet i)))
  ---------------------------------------------------------------------------------------------
  (StaticNormCheck SGamma (CanonicalPi x U V) (TermPi x S T) (CanonicalAtomic (AtomicSet i)))]

;; #source file ./ott/lang_simple.ott  lines 971 - 975 
 [
  (SWellFormed (EnvExt x U SGamma))
  (StaticNormCheck (EnvExt x U SGamma) v t V)
  -----------------------------------------------------------------------------------
  (StaticNormCheck SGamma  (CanonicalLam x v)   (TermLam x t)  (CanonicalPi x U V))]

)
(define-judgment-form L 
 
  #:mode (EtaExpand I O I)

;; #source file ./ott/lang_simple.ott  lines 981 - 983 
 [
  ----------------------------------------------------------
  (EtaExpand rr (CanonicalAtomic rr) (CanonicalAtomic RR))]

;; #source file ./ott/lang_simple.ott  lines 985 - 989 
 [
  
  (EtaExpand  (AtomicSpine  y  SpineEmpty)  u U)
  (EtaExpand (AtomicSpine x (SpineCons e u)) v V)
  ------------------------------------------------------------------------
  (EtaExpand (AtomicSpine x e)  (CanonicalLam y v)  (CanonicalPi y U V))]
)

;;; definitions 

(define-judgment-form
  L
  #:mode (Domain I O)

;; #source file ./ott/lang_simple.ott  lines 1007 - 1009 
 [-----------------------------------
  (Domain (CanonicalPi x gU gV) gU)]

;; #source file ./ott/lang_simple.ott  lines 1010 - 1012 
 [------------------------------------
  (Domain CanonicalDyn CanonicalDyn)]

)
(define-judgment-form L 
 
  #:mode (GradualEnvSub I I I I O)

;; #source file ./ott/lang_simple.ott  lines 1018 - 1020 
 [-------------------------------------------
  (GradualEnvSub x gU gu EnvEmpty EnvEmpty)]

;; #source file ./ott/lang_simple.ott  lines 1021 - 1026 
 [
  
  (GradualHsub x gU gu gU gU9)
  (GradualEnvSub x gU gu Gamma Gamma9)
   (side-condition (not (equal?  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) )   (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) ))) 
  -------------------------------------------------------------------
  (GradualEnvSub x gU gu (EnvExt y gU Gamma) (EnvExt y gU9 Gamma9))]

;; #source file ./ott/lang_simple.ott  lines 1027 - 1030 
 [
  
  (GradualEnvSub x gU gu Gamma Gamma9)
  ----------------------------------------------------
  (GradualEnvSub x gU gu (EnvExt x gU Gamma) Gamma9)]

)
(define-judgment-form L 
 
  #:mode (GradualHsub I I I I O)

;; #source file ./ott/lang_simple.ott  lines 1037 - 1039 
 [---------------------------------------------------------------------------------------
  (GradualHsub x gU gu (CanonicalAtomic (AtomicSet i)) (CanonicalAtomic (AtomicSet i)))]

;; #source file ./ott/lang_simple.ott  lines 1041 - 1043 
 [-------------------------------------------------
  (GradualHsub x gU gu CanonicalDyn CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 1044 - 1049 
 [(GradualHsub x gU gu gU gU9)
  (GradualHsub x gU gu gV gV9)
   (side-condition (not (equal?  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) )   (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) ))) 
  ---------------------------------------------------------------------
  (GradualHsub x gU gu (CanonicalPi y gU gV) (CanonicalPi y gU9 gV9))]

;; #source file ./ott/lang_simple.ott  lines 1051 - 1055 
 [(GradualHsub x gU gu gv gv9)
   (side-condition (not (equal?  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) )   (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) ))) 
  --------------------------------------------------------------------
  (GradualHsub x gU gu  (CanonicalLam y gv)   (CanonicalLam y gv9) )]

;; #source file ./ott/lang_simple.ott  lines 1058 - 1061 
 [ (side-condition (not (equal?  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) )   (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) ))) 
  -------------------------------------------------------------------------------------------------------------------------
  (GradualHsub x gU gu (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ))]

;; #source file ./ott/lang_simple.ott  lines 1062 - 1067 
 [ (side-condition (not (equal?  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) )   (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) ))) 
  (GradualHsub x gU gu (CanonicalAtomic (AtomicSpine y ge)) (CanonicalAtomic (AtomicSpine y ge9)))
  (GradualHsub x gU gu gv gv9)
  ---------------------------------------------------------------------------------------------------------------------------------
  (GradualHsub x gU gu (CanonicalAtomic (AtomicSpine y (SpineCons ge gv))) (CanonicalAtomic (AtomicSpine y (SpineCons ge9 gv9))))]

;; #source file ./ott/lang_simple.ott  lines 1070 - 1073 
 [(GradualHsubR x gU gu (AtomicSpine x ge) gu gV)
  ---------------------------------------------------------------
  (GradualHsub x gU gu (CanonicalAtomic (AtomicSpine x ge)) gu)]

)
(define-judgment-form L 
 
  #:mode (GradualHsubR I I I I O O)

;; #source file ./ott/lang_simple.ott  lines 1093 - 1095 
 [-------------------------------------------------------------
  (GradualHsubR x gU gu  (AtomicSpine  x  SpineEmpty)  gu gU)]

;; #source file ./ott/lang_simple.ott  lines 1096 - 1101 
 [(GradualHsubR x gU gu1  (AtomicSpine x ge)  gv1 CanonicalDyn)
  ----------------------------------------------------------------------------------------
  (GradualHsubR x gU gu1  (AtomicSpine x (SpineCons ge gu2))  CanonicalDyn CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 1103 - 1110 
 [(GradualHsubR x gU gu  (AtomicSpine x ge)   (CanonicalLam y gu2)  (CanonicalPi y gU1 gU2))
  (GradualHsub x gU gu gv1 gv2)
  (GradualHsub y gU1 gv2 gu2 gv3)
  (GradualHsub y gU1 gv2 gU2 gV)
  --------------------------------------------------------------------
  (GradualHsubR x gU gu  (AtomicSpine x (SpineCons ge gv1))  gv3 gV)]

;; #source file ./ott/lang_simple.ott  lines 1112 - 1118 
 [(GradualHsubR x gU gu  (AtomicSpine x ge)  CanonicalDyn (CanonicalPi y gU1 gU2))
  (GradualHsub x gU gu gv gv2)
  (GradualHsub y gU1 gv gU2 gV)
  ----------------------------------------------------------------------------
  (GradualHsubR x gU gu  (AtomicSpine x (SpineCons ge gv))  CanonicalDyn gV)]

)
(define-judgment-form L 
 
  #:mode (CodSub I I I O)

;; #source file ./ott/lang_simple.ott  lines 1125 - 1128 
 [(GradualHsub x gU gu gV gV9)
  ------------------------------------------
  (CodSub gU gu (CanonicalPi x gU gV) gV9)]

;; #source file ./ott/lang_simple.ott  lines 1129 - 1131 
 [------------------------------------------
  (CodSub gU gu CanonicalDyn CanonicalDyn)]

)
(define-judgment-form L 
 
  #:mode (BodySub I I I O)

;; #source file ./ott/lang_simple.ott  lines 1137 - 1140 
 [(GradualHsub x gU gu gv gv9)
  -------------------------------------------
  (BodySub gU gu  (CanonicalLam x gv)  gv9)]

;; #source file ./ott/lang_simple.ott  lines 1141 - 1143 
 [-------------------------------------------
  (BodySub gU gu CanonicalDyn CanonicalDyn)]
)

;;; definitions 

(define-judgment-form
  L
  #:mode (GradualSet I I)

;; #source file ./ott/lang_simple.ott  lines 1152 - 1155 
 [
  (GradualCSynth Gamma grr CanonicalDyn)
  ------------------------------------------
  (GradualSet Gamma (CanonicalAtomic grr))]

;; #source file ./ott/lang_simple.ott  lines 1156 - 1159 
 [
  (GradualCSynth Gamma grr (CanonicalAtomic (AtomicSet i)))
  ------------------------------------------
  (GradualSet Gamma (CanonicalAtomic grr))]

;; #source file ./ott/lang_simple.ott  lines 1162 - 1167 
 [
  (GradualSet Gamma gU1)
  (WellFormed (EnvExt x gU1 Gamma))
  (GradualSet (EnvExt x gU1 Gamma) gU2)
  --------------------------------------------
  (GradualSet Gamma (CanonicalPi x gU1 gU2))]

;; #source file ./ott/lang_simple.ott  lines 1169 - 1171 
 [
  ---------------------------------
  (GradualSet Gamma CanonicalDyn)]

)
(define-judgment-form L 
 
  #:mode (WellFormed I)

;; #source file ./ott/lang_simple.ott  lines 1177 - 1179 
 [-----------------------
  (WellFormed EnvEmpty)]

;; #source file ./ott/lang_simple.ott  lines 1180 - 1185 
 [
  (WellFormed Gamma)
  (GradualSet Gamma gU)
  (GVarFree x Gamma)
  ----------------------------------
  (WellFormed (EnvExt x gU Gamma))]

)
(define-judgment-form L 
 
  #:mode (GradualCSynth I I O)

;; #source file ./ott/lang_simple.ott  lines 1191 - 1194 
 [
   (side-condition (>  i  0)) 
  ---------------------------------------------------------------------------------
  (GradualCSynth Gamma (AtomicSet i) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 1196 - 1200 
 [
  (WellFormed Gamma)
  (GVarLook x gU Gamma)
  ---------------------------------------------------------
  (GradualCSynth Gamma  (AtomicSpine  x  SpineEmpty)  gU)]

;; #source file ./ott/lang_simple.ott  lines 1204 - 1211 
 [
  (GradualCSynth Gamma (AtomicSpine x ge) gU)
  (Domain gU gV)
  (GradualCCheck Gamma gu gV)
  (CodSub gV gu gU gV9)
  -------------------------------------------------------------
  (GradualCSynth Gamma (AtomicSpine x (SpineCons ge gu)) gV9)]

)
(define-judgment-form L 
 
  #:mode (GradualCCheck I I I)

;; #source file ./ott/lang_simple.ott  lines 1218 - 1222 
 [
  (GradualCSynth Gamma grr gU)
  (Consistent gU gV)
  ------------------------------------------------
  (GradualCCheck Gamma (CanonicalAtomic grr) gV)]

;; #source file ./ott/lang_simple.ott  lines 1223 - 1227 
 [
  (GradualCSynth Gamma grr (CanonicalAtomic (AtomicSet i)))
   (side-condition (and (< 0  i ) (<  i   j ))) 
  -----------------------------------------------------------------------------
  (GradualCCheck Gamma (CanonicalAtomic grr) (CanonicalAtomic (AtomicSet j)))]

;; #source file ./ott/lang_simple.ott  lines 1229 - 1233 
 [
  (WellFormed (EnvExt x gU Gamma))
  (GradualCCheck (EnvExt x gU Gamma) gu gV)
  -------------------------------------------------------------------
  (GradualCCheck Gamma  (CanonicalLam x gu)  (CanonicalPi x gU gV))]

;; #source file ./ott/lang_simple.ott  lines 1234 - 1238 
 [
  (WellFormed (EnvExt x CanonicalDyn Gamma))
  (GradualCCheck (EnvExt x CanonicalDyn Gamma) gu CanonicalDyn)
  ----------------------------------------------------------
  (GradualCCheck Gamma  (CanonicalLam x gu)  CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 1239 - 1245 
 [
  (GradualCCheck Gamma gU1 gV)
  (WellFormed (EnvExt x gU1 Gamma))
  (GradualCCheck (EnvExt x gU1 Gamma) gU2 gV)
  (ConsistentSet gV)
  --------------------------------------------------
  (GradualCCheck Gamma (CanonicalPi x gU1 gU2) gV)]

;; #source file ./ott/lang_simple.ott  lines 1247 - 1250 
 [
  (GradualSet Gamma gU)
  ---------------------------------------
  (GradualCCheck Gamma CanonicalDyn gU)]

)
(define-judgment-form L 
 
  #:mode (ConsistentSet I)

;; #source file ./ott/lang_simple.ott  lines 1258 - 1260 
 [-------------------------------------------------
  (ConsistentSet (CanonicalAtomic (AtomicSet i)))]

;; #source file ./ott/lang_simple.ott  lines 1261 - 1263 
 [------------------------------
  (ConsistentSet CanonicalDyn)]

)
(define-judgment-form L 
 
  #:mode (Consistent I I)

;; #source file ./ott/lang_simple.ott  lines 1271 - 1273 
 [------------------------------
  (Consistent CanonicalDyn gv)]

;; #source file ./ott/lang_simple.ott  lines 1274 - 1276 
 [------------------------------
  (Consistent gu CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 1277 - 1279 
 [--------------------
  (Consistent gu gu)]

;; #source file ./ott/lang_simple.ott  lines 1280 - 1284 
 [(Consistent gU gU9)
  (Consistent gV gV9)
  ------------------------------------------------------------
  (Consistent (CanonicalPi x gU gV) (CanonicalPi x gU9 gV9))]

;; #source file ./ott/lang_simple.ott  lines 1285 - 1288 
 [(Consistent gu gv)
  ----------------------------------------------------------
  (Consistent  (CanonicalLam x gu)   (CanonicalLam x gv) )]

;; #source file ./ott/lang_simple.ott  lines 1290 - 1294 
 [(Consistent (CanonicalAtomic (AtomicSpine x ge)) (CanonicalAtomic (AtomicSpine x ge9)))
  (Consistent gu gv)
  -----------------------------------------------------------------------------------------------------------------------
  (Consistent (CanonicalAtomic (AtomicSpine x (SpineCons ge gu))) (CanonicalAtomic (AtomicSpine x (SpineCons ge9 gv))))]
)

;;; definitions 

(define-judgment-form
  L
  #:mode (Meet I I O)

;; #source file ./ott/lang_simple.ott  lines 1303 - 1305 
 [---------------------------
  (Meet CanonicalDyn gU gU)]

;; #source file ./ott/lang_simple.ott  lines 1306 - 1308 
 [---------------------------
  (Meet gV CanonicalDyn gV)]

;; #source file ./ott/lang_simple.ott  lines 1309 - 1311 
 [-----------------
  (Meet gu gu gu)]

;; #source file ./ott/lang_simple.ott  lines 1312 - 1316 
 [(Meet gU gU9 gU99)
  (Meet gV gV9 gV99)
  --------------------------------------------------------------------------------
  (Meet (CanonicalPi x gU gV) (CanonicalPi x gU9 gV9) (CanonicalPi x gU99 gV99))]

;; #source file ./ott/lang_simple.ott  lines 1317 - 1320 
 [
  
  (Meet u u9 v)
  ------------------------------------------------------------------
  (Meet (CanonicalLam x u) (CanonicalLam x u9) (CanonicalLam x v))]

;; #source file ./ott/lang_simple.ott  lines 1321 - 1325 
 [(Meet gu gu9 gu99)
  (Meet (CanonicalAtomic (AtomicSpine x ge)) (CanonicalAtomic (AtomicSpine x ge9)) (CanonicalAtomic (AtomicSpine x ge99)))
  --------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  (Meet (CanonicalAtomic (AtomicSpine x (SpineCons ge gu))) (CanonicalAtomic (AtomicSpine x (SpineCons ge9 gu9))) (CanonicalAtomic (AtomicSpine x (SpineCons ge99 gu99))))]

)
(define-judgment-form L 
 
  #:mode (Precision I I)

;; #source file ./ott/lang_simple.ott  lines 1333 - 1336 
 [(Meet gU gV gU)
  -------------------
  (Precision gU gV)]

)
(define-judgment-form L 
 
  #:mode (EvConsistent I I I)

;; #source file ./ott/lang_simple.ott  lines 1343 - 1348 
 [(Meet gV1 gV2 gV3)
  (Precision gU1 gV3)
  (Precision gU2 gV3)
  -----------------------------------------------
  (EvConsistent (EvidencePair gU1 gU2) gV1 gV2)]
)

;;; definitions 

(define-judgment-form
  L
  #:mode (GradualSynth I I O)

;; #source file ./ott/lang_simple.ott  lines 1362 - 1366 
 [
  
  (GradualSetNorm Gamma gV gT)
  (GradualCheck Gamma gt gV)
  -------------------------------------------
  (GradualSynth Gamma  (TermAnn gt gT)  gV)]

;; #source file ./ott/lang_simple.ott  lines 1367 - 1370 
 [
   (side-condition (>  i  0)) 
  ------------------------------------------------------------------------------
  (GradualSynth Gamma (TermSet i) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 1372 - 1376 
 [
  (WellFormed Gamma)
  (GVarLook x gU Gamma)
  -------------------------------------
  (GradualSynth Gamma (TermVar x) gU)]

;; #source file ./ott/lang_simple.ott  lines 1381 - 1387 
 [
  
  (GradualSynth Gamma gs gV)
  (Domain gV gV1)
  (GradualNormCheck Gamma gv gt gV1)
  (CodSub gV1 gv gV gV2)
  ------------------------------------------
  (GradualSynth Gamma (TermApp gs gt) gV2)]

)
(define-judgment-form L 
 
  #:mode (GradualCheck I I I)

;; #source file ./ott/lang_simple.ott  lines 1396 - 1400 
 [
  (GradualSynth Gamma gt gU)
  (Consistent gU gV)
  ----------------------------
  (GradualCheck Gamma gt gV)]

;; #source file ./ott/lang_simple.ott  lines 1401 - 1405 
 [
  (GradualSynth Gamma gt (CanonicalAtomic (AtomicSet i)))
   (side-condition (and (< 0  i ) (<  i   j ))) 
  ---------------------------------------------------------
  (GradualCheck Gamma gt (CanonicalAtomic (AtomicSet j)))]

;; #source file ./ott/lang_simple.ott  lines 1406 - 1412 
 [
  
  (GradualNormCheck Gamma gU gS gV)
  (WellFormed (EnvExt x gU Gamma))
  (GradualCheck (EnvExt x gU Gamma) gT gV)
  (ConsistentSet gV)
  ------------------------------------------
  (GradualCheck Gamma (TermPi x gS gT) gV)]

;; #source file ./ott/lang_simple.ott  lines 1414 - 1418 
 [
  (WellFormed (EnvExt x gU Gamma))
  (GradualCheck (EnvExt x gU Gamma) gt gV)
  -------------------------------------------------------------
  (GradualCheck Gamma  (TermLam x gt)  (CanonicalPi x gU gV))]

;; #source file ./ott/lang_simple.ott  lines 1420 - 1424 
 [
  (WellFormed (EnvExt x CanonicalDyn Gamma))
  (GradualCheck (EnvExt x CanonicalDyn Gamma) gt CanonicalDyn)
  ----------------------------------------------------
  (GradualCheck Gamma  (TermLam x gt)  CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 1425 - 1428 
 [
  (GradualSet Gamma gU)
  ---------------------------------
  (GradualCheck Gamma TermDyn gU)]

)
(define-judgment-form L 
 
  #:mode (GradualSetNorm I O I)

;; #source file ./ott/lang_simple.ott  lines 1439 - 1442 
 [
  (GradualNormSynth Gamma TT gU (CanonicalAtomic (AtomicSet i)))
  ------------------------------
  (GradualSetNorm Gamma gU TT)]

;; #source file ./ott/lang_simple.ott  lines 1444 - 1448 
 [
  (GradualSetNorm Gamma gU SS)
  (GradualSetNorm (EnvExt x gU Gamma) gV TT)
  ---------------------------------------------------------------
  (GradualSetNorm Gamma (CanonicalPi x gU gV) (TermPi x SS TT))]

;; #source file ./ott/lang_simple.ott  lines 1449 - 1451 
 [
  ---------------------------------------------
  (GradualSetNorm Gamma CanonicalDyn TermDyn)]

)
(define-judgment-form L 
 
  #:mode (GEtaExpand I O I)

;; #source file ./ott/lang_simple.ott  lines 1459 - 1461 
 [--------------------------------------------------------------
  (GEtaExpand grr (CanonicalAtomic grr) (CanonicalAtomic gRR))]

;; #source file ./ott/lang_simple.ott  lines 1463 - 1467 
 [(GEtaExpand  (AtomicSpine  y  SpineEmpty)  gu gU)
  (GEtaExpand (AtomicSpine x (SpineCons ge gu)) gv gV)
  -----------------------------------------------------------------------------
  (GEtaExpand (AtomicSpine x ge)  (CanonicalLam y gv)  (CanonicalPi y gU gV))]

)
(define-judgment-form L 
 
  #:mode (GradualNormSynth I I O O)

;; #source file ./ott/lang_simple.ott  lines 1473 - 1477 
 [
  (GradualSetNorm Gamma gV TT)
  (GradualNormCheck Gamma gv tt gV)
  --------------------------------------------------
  (GradualNormSynth Gamma  (TermAnn tt TT)  gv gV)]

;; #source file ./ott/lang_simple.ott  lines 1478 - 1481 
 [
   (side-condition (>  i  0)) 
  ------------------------------------------------------------------------------------------------------------------
  (GradualNormSynth Gamma (TermSet i) (CanonicalAtomic (AtomicSet i)) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 1483 - 1488 
 [
  (WellFormed Gamma)
  (GVarLook x gU Gamma)
  (GEtaExpand  (AtomicSpine  x  SpineEmpty)  gv gU)
  --------------------------------------------
  (GradualNormSynth Gamma (TermVar x) gv gU)]

;; #source file ./ott/lang_simple.ott  lines 1492 - 1499 
 [
  (GradualNormSynth Gamma ss gu gV)
  (Domain gV gV1)
  (GradualNormCheck Gamma gv tt gV1)
  (BodySub gV1 gv gu gv9)
  (CodSub gV1 gv gV gV2)
  --------------------------------------------------
  (GradualNormSynth Gamma (TermApp ss tt) gv9 gV2)]

)
(define-judgment-form L 
 
  #:mode (GradualNormCheck I O I I)

;; #source file ./ott/lang_simple.ott  lines 1508 - 1512 
 [
  (GradualNormSynth Gamma tt gv gV)
  (Precision gV gU)
  -----------------------------------
  (GradualNormCheck Gamma gv tt gU)]

;; #source file ./ott/lang_simple.ott  lines 1513 - 1519 
 [
  (GradualNormSynth Gamma tt gv gV)
  (Consistent gU gV)
  (Meet gU gV gU9)
   (side-condition (not (equal?  gU9   gV ))) 
  ---------------------------------------------
  (GradualNormCheck Gamma CanonicalDyn tt gU)]

;; #source file ./ott/lang_simple.ott  lines 1520 - 1524 
 [
  (GradualNormSynth Gamma tt gv (CanonicalAtomic (AtomicSet i)))
   (side-condition (and (< 0  i ) (<  i   j ))) 
  ----------------------------------------------------------------
  (GradualNormCheck Gamma gv tt (CanonicalAtomic (AtomicSet j)))]

;; #source file ./ott/lang_simple.ott  lines 1526 - 1534 
 [
  (GradualNormCheck Gamma gU1 SS gV)
  (WellFormed (EnvExt x gU1 Gamma))
  (GradualNormCheck (EnvExt x gU1 Gamma) gU2 TT gV)
  (ConsistentSet gV)
  ----------------------------------------------------------------------
  (GradualNormCheck Gamma (CanonicalPi x gU1 gU2) (TermPi x SS TT) gV)]

;; #source file ./ott/lang_simple.ott  lines 1535 - 1539 
 [
  (WellFormed (EnvExt x gU Gamma))
  (GradualNormCheck (EnvExt x gU Gamma) gv tt gV)
  ---------------------------------------------------------------------------------------
  (GradualNormCheck Gamma  (CanonicalLam x gv)   (TermLam x tt)  (CanonicalPi x gU gV))]

;; #source file ./ott/lang_simple.ott  lines 1540 - 1544 
 [
  (WellFormed (EnvExt x CanonicalDyn Gamma))
  (GradualNormCheck (EnvExt x CanonicalDyn Gamma) gv tt CanonicalDyn)
  ------------------------------------------------------------------------------
  (GradualNormCheck Gamma  (CanonicalLam x gv)   (TermLam x tt)  CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 1545 - 1548 
 [
  (GradualSet Gamma gU)
  --------------------------------------------------
  (GradualNormCheck Gamma CanonicalDyn TermDyn gU)]

;; #source file ./ott/lang_simple.ott  lines 1550 - 1555 
 [
  (GradualNormSynth Gamma ett gv gV)
  (Meet gU gV gV)
  (EvConsistent (EvidencePair gV gV) gU gV)
  ------------------------------------------------
  (GradualNormCheck Gamma gv (TermEp ep ett) gU)]

;; #source file ./ott/lang_simple.ott  lines 1556 - 1562 
 [
  (GradualNormSynth Gamma ett gv gV)
  (Meet gU gV gU9)
  (EvConsistent (EvidencePair gU9 gU9) gU gV)
   (side-condition (not (equal?  gU9   gV9 ))) 
  ----------------------------------------------------------
  (GradualNormCheck Gamma CanonicalDyn (TermEp ep ett) gU)]

;; #source file ./ott/lang_simple.ott  lines 1564 - 1566 
 [
  ----------------------------------------------------------
  (GradualNormCheck Gamma CanonicalDyn (TermDynAnn gU) gU)]

)
(define-judgment-form L 
 
  #:mode (GradualElabSynth I I O O)

;; #source file ./ott/lang_simple.ott  lines 1573 - 1577 
 [
  
  (GradualSetNorm Gamma gV gT)
  (GradualElabCheck Gamma et gt gV)
  --------------------------------------------------
  (GradualElabSynth Gamma  (TermAnn gt gT)  et gV)]

;; #source file ./ott/lang_simple.ott  lines 1578 - 1581 
 [
   (side-condition (>  i  0)) 
  ----------------------------------------------------------------------------------------------
  (GradualElabSynth Gamma (TermSet i) (TermSet i) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 1583 - 1587 
 [
  (WellFormed Gamma)
  (GVarLook x gU Gamma)
  -----------------------------------------------------
  (GradualElabSynth Gamma (TermVar x) (TermVar x) gU)]

;; #source file ./ott/lang_simple.ott  lines 1591 - 1598 
 [
  
  (GradualElabSynth Gamma gs es gV)
  (Domain gV gV1)
  (GradualElabCheck Gamma et gt gV1)
  (GradualNormCheck Gamma gv gt gV1)
  (CodSub gV1 gv gV gV2)
  -------------------------------------------------
  (GradualElabSynth Gamma (TermApp gs gt) et gV2)]

)
(define-judgment-form L 
 
  #:mode (GradualElabCheck I O I I)

;; #source file ./ott/lang_simple.ott  lines 1607 - 1611 
 [
  (GradualElabSynth Gamma gt et gV)
  (Meet gU gV gV9)
  -------------------------------------------------------------------
  (GradualElabCheck Gamma (TermEp (EvidencePair gV9 gV9) et) gt gU)]

;; #source file ./ott/lang_simple.ott  lines 1613 - 1617 
 [
  (GradualElabSynth Gamma gt et (CanonicalAtomic (AtomicSet i)))
   (side-condition (and (< 0  i ) (<  i   j ))) 
  ----------------------------------------------------------------
  (GradualElabCheck Gamma et gt (CanonicalAtomic (AtomicSet j)))]

;; #source file ./ott/lang_simple.ott  lines 1619 - 1628 
 [
  
  (ConsistentSet gV)
  (GradualElabCheck Gamma eS gS gV)
  (GradualNormCheck Gamma gU gS gV)
  (WellFormed (EnvExt x gU1 Gamma))
  (GradualElabCheck (EnvExt x gU Gamma) eT gT gV)
  ---------------------------------------------------------------
  (GradualElabCheck Gamma (TermPi x eS eT) (TermPi x gS gT) gV)]

;; #source file ./ott/lang_simple.ott  lines 1629 - 1633 
 [
  (WellFormed (EnvExt x gU Gamma))
  (GradualElabCheck (EnvExt x gU Gamma) et gt gV)
  ----------------------------------------------------------------------------------
  (GradualElabCheck Gamma  (TermLam x et)   (TermLam x gt)  (CanonicalPi x gU gV))]

;; #source file ./ott/lang_simple.ott  lines 1634 - 1638 
 [
  (WellFormed (EnvExt x CanonicalDyn Gamma))
  (GradualElabCheck (EnvExt x CanonicalDyn Gamma) et gt CanonicalDyn)
  -------------------------------------------------------------------------
  (GradualElabCheck Gamma  (TermLam x et)   (TermLam x gt)  CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 1639 - 1642 
 [
  (GradualSet Gamma gU)
  -----------------------------------------------------
  (GradualElabCheck Gamma (TermDynAnn gU) TermDyn gU)]
)

;;; definitions 

(define-judgment-form
  L
  #:mode (EvSynth I I O)

;; #source file ./ott/lang_simple.ott  lines 1655 - 1658 
 [
   (side-condition (>  i  0)) 
  -------------------------------------------------------------------------
  (EvSynth Gamma (TermSet i) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 1660 - 1664 
 [
  (WellFormed Gamma)
  (GVarLook x gU Gamma)
  --------------------------------
  (EvSynth Gamma (TermVar x) gU)]

;; #source file ./ott/lang_simple.ott  lines 1668 - 1674 
 [
  
  (EvSynth Gamma es gV)
  (Domain gV gU)
  (GradualNormCheck Gamma gv et gU)
  (CodSub gU gv gV gV2)
  -------------------------------------
  (EvSynth Gamma (TermApp es et) gV2)]

)
(define-judgment-form L 
 
  #:mode (EvCheck I I I)

;; #source file ./ott/lang_simple.ott  lines 1681 - 1685 
 [
  (EvSynth Gamma et gU)
  (EvConsistent ep gU gV)
  -----------------------------------
  (EvCheck Gamma (TermEp ep et) gV)]

;; #source file ./ott/lang_simple.ott  lines 1686 - 1691 
 [
  
  (GradualNormCheck Gamma gU eS gV)
  (WellFormed (EnvExt x gU Gamma))
  (EvCheck (EnvExt x gU Gamma) eT gV)
  -------------------------------------
  (EvCheck Gamma (TermPi x eS eT) gV)]

;; #source file ./ott/lang_simple.ott  lines 1694 - 1698 
 [
  (WellFormed (EnvExt x gU Gamma))
  (EvCheck (EnvExt x gU Gamma) et gV)
  --------------------------------------------------------
  (EvCheck Gamma  (TermLam x et)  (CanonicalPi x gU gV))]

;; #source file ./ott/lang_simple.ott  lines 1700 - 1704 
 [
  (WellFormed (EnvExt x CanonicalDyn Gamma))
  (EvCheck (EnvExt x CanonicalDyn Gamma) et CanonicalDyn)
  -----------------------------------------------
  (EvCheck Gamma  (TermLam x et)  CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 1705 - 1708 
 [
  (GradualSet Gamma gU)
  ------------------------------------
  (EvCheck Gamma (TermDynAnn gU) gU)]

)
(define-judgment-form L 
 
  #:mode (SimpleSmallStep I O)

;; #source file ./ott/lang_simple.ott  lines 1724 - 1726 
 [
  ---------------------------------------
  (SimpleSmallStep  (TermAnn sv T)  sv)]

;; #source file ./ott/lang_simple.ott  lines 1727 - 1729 
 [
  ----------------------------------------------------------------------------
  (SimpleSmallStep (TermApp  (TermLam x t)  sv)  (substitute  t   x   sv ) )]

;; #source file ./ott/lang_simple.ott  lines 1731 - 1734 
 [
  (SimpleSmallStep s t)
  -------------------------------------------------------------
  (SimpleSmallStep  (in-hole  SC   s )   (in-hole  SC   t ) )]

)
(define-judgment-form L 
 
  #:mode (SmallStep I O)

;; #source file ./ott/lang_simple.ott  lines 1742 - 1745 
 [(ConsistentTrans ep1 ep2 ep3)
  ------------------------------------------------------------
  (SmallStep (TermEp ep1  (TermEp ep2 et) ) (TermEp ep3 et))]

;; #source file ./ott/lang_simple.ott  lines 1748 - 1751 
 [ (side-condition ,(empty? (judgment-holds (ConsistentTrans  ep1   ep2  ep9999) ep9999))) 
  ------------------------------------------------------
  (SmallStep (TermEp ep1  (TermEp ep2 et) ) TermError)]

;; #source file ./ott/lang_simple.ott  lines 1752 - 1754 
 [
  ------------------------------------------------------------------------
  (SmallStep (TermApp  (TermLam x et)  ev)  (substitute  et   x   ev ) )]

;; #source file ./ott/lang_simple.ott  lines 1755 - 1760 
 [
  (Domain gU gV1)
  (GradualNormCheck EnvEmpty gv ev gV1)
  (CodSub gV1 gv gU gV2)
  -----------------------------------------------------------
  (SmallStep (TermApp (TermDynAnn gU) ev) (TermDynAnn gV2))]

;; #source file ./ott/lang_simple.ott  lines 1761 - 1766 
 [
  (EvDom ep1 ep3)
  (ConsistentTrans ep2 ep3 ep4)
  (EvCod rv ep1 ep5)
  ----------------------------------------------------------------------------------------------------------------------------------
  (SmallStep (TermApp  (TermEp ep1  (TermLam x et) )   (TermEp ep2 rv) ) (TermEp ep5   (substitute  et   x   (TermEp ep4 rv) )  ))]

;; #source file ./ott/lang_simple.ott  lines 1767 - 1779 
 [
  (Domain gV1 gV19)
  (Domain gV2 gV29)
  (Domain gV3 gV39)
  (ConsistentTrans ep1 (EvidencePair gV91 gV92) ep2)
  (GradualNormCheck EnvEmpty gv1 (TermEp ep1 rv) gV19)
  (GradualNormCheck EnvEmpty gV2 (TermEp ep1 rv) gV29)
  (GradualNormCheck EnvEmpty gV3 (TermEp ep1 rv) gV39)
  (CodSub gV19 gvn gV1 gV199)
  (CodSub gV29 gvn gV2 gV299)
  (CodSub gV39 gvn gV3 gV399)
  ---------------------------------------------------------------------------------------------------------------------------------------------------
  (SmallStep (TermApp  (TermEp (EvidencePair gV1 gV2) (TermDynAnn gV3))   (TermEp ep1 rv) ) (TermEp (EvidencePair gV991 gV992) (TermDynAnn gV399)))]

;; #source file ./ott/lang_simple.ott  lines 1780 - 1783 
 [
  
  (SmallStep (TermApp  (TermEp ep1 rv)   (TermEp (EvidencePair CanonicalDyn CanonicalDyn) rv) ) es)
  -----------------------------------------------
  (SmallStep (TermApp  (TermEp ep1 rv)  rv) es)]

;; #source file ./ott/lang_simple.ott  lines 1784 - 1788 
 [
  
  (EvDom ep1 ep3)
   (side-condition ,(empty? (judgment-holds (ConsistentTrans  ep2   ep3  ep9999) ep9999))) 
  ---------------------------------------------------------------------
  (SmallStep (TermApp  (TermEp ep1 ru)   (TermEp ep2 rv) ) TermError)]

;; #source file ./ott/lang_simple.ott  lines 1789 - 1792 
 [
  
   (side-condition ,(empty? (judgment-holds (EvDom  ep1  ep9999) ep9999))) 
  ------------------------------------------------------
  (SmallStep (TermApp  (TermEp ep1 rv)  ev) TermError)]

;; #source file ./ott/lang_simple.ott  lines 1798 - 1801 
 [
   (side-condition ,(empty? (judgment-holds (Domain  gU  gV9999) gV9999))) 
  -------------------------------------------------------------------
  (SmallStep (TermApp  (TermEp ep1 (TermDynAnn gU))  ev) TermError)]

;; #source file ./ott/lang_simple.ott  lines 1804 - 1808 
 [
  (SmallStep es et)
   (side-condition (not (equal?  et  TermError))) 
  ---------------------------------------------------------
  (SmallStep  (in-hole  EC   es )   (in-hole  EC   et ) )]

;; #source file ./ott/lang_simple.ott  lines 1809 - 1812 
 [
  (SmallStep es TermError)
  ---------------------------------------------
  (SmallStep  (in-hole  EC   es )  TermError)]

)
(define-judgment-form L 
 
  #:mode (ConsistentTrans I I O)

;; #source file ./ott/lang_simple.ott  lines 1818 - 1822 
 [(Meet gU1 gU2 gU3)
  (Meet gV1 gV2 gV3)
  ----------------------------------------------------------------------------------------
  (ConsistentTrans (EvidencePair gU1 gV1) (EvidencePair gU2 gV2) (EvidencePair gU3 gV3))]

)
(define-judgment-form L 
 
  #:mode (EvDom I O)

;; #source file ./ott/lang_simple.ott  lines 1828 - 1832 
 [(Domain gU gU9)
  (Domain gV gV9)
  -----------------------------------------------------
  (EvDom (EvidencePair gU gV) (EvidencePair gU9 gV9))]

)
(define-judgment-form L 
 
  #:mode (EvCod I I O)

;; #source file ./ott/lang_simple.ott  lines 1839 - 1847 
 [
  (Domain gU gU1)
  (Domain gV gV1)
  (GradualNormCheck EnvEmpty gu ev gU1)
  (GradualNormCheck EnvEmpty gv ev gV1)
  (CodSub gU1 gu gU gU2)
  (CodSub gV1 gv gV gV2)
  --------------------------------------------------------
  (EvCod ev (EvidencePair gU gV) (EvidencePair gU2 gV2))]
)
;; #source file ./ott/lang_simple.ott  lines 1862 - 1906 
(define red
  (reduction-relation
   L
   (--> es et
        (judgment-holds
         (SmallStep es et)
         )
      )
   )
  )

(define (progress-holds? e)
  (if (types? e)
      (or (v? e)
          (reduces? e))
      #t))

(define (preservation-holds? e)
  (let
      ([reductions
        (apply-reduction-relation
               red
               (term (,e)))])
(if (types? e)
    (andmap types? reductions)
    #t
    )))

(define (types? es)
  (not (null? (append 
  (judgment-holds (EvCheck EnvEmpty ,es gU)
                              gU)
(judgment-holds (EvSynth EnvEmpty ,es gU)
                            gU)
                              ))))
 
(define v? (redex-match L ev))
 
(define (reduces? e)
  (not (null? (apply-reduction-relation
               red
               (term (,e))))))

