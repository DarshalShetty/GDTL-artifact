;; #source  
;;; generated by Ott 0.28 from: ./ott/lang_simple.ott

#lang racket
(require redex/reduction-semantics)

;; #source file ./ott/lang_simple.ott  lines 4 - 6 
;; #source file ./ott/lang_simple.ott  lines 8 - 13 
(provide (all-defined-out))

(define currently-defined-vars 
  (make-hasheq))

;; #source file ./ott/lang_simple.ott  lines 15 - 86 
;; #source file ./ott/lang_simple.ott  lines 91 - 93 
;; #source file ./ott/lang_simple.ott  lines 96 - 96 
;; #source file ./ott/lang_simple.ott  lines 102 - 110 and file ./ott/lang_simple.ott  lines 115 - 141 and file ./ott/lang_simple.ott  lines 146 - 155 and file ./ott/lang_simple.ott  lines 164 - 169 and file ./ott/lang_simple.ott  lines 172 - 177 and file ./ott/lang_simple.ott  lines 179 - 181 and file ./ott/lang_simple.ott  lines 186 - 209 and file ./ott/lang_simple.ott  lines 214 - 227 and file ./ott/lang_simple.ott  lines 230 - 235 and file ./ott/lang_simple.ott  lines 237 - 240 and file ./ott/lang_simple.ott  lines 248 - 250 and file ./ott/lang_simple.ott  lines 258 - 269 and file ./ott/lang_simple.ott  lines 273 - 279 and file ./ott/lang_simple.ott  lines 282 - 287 and file ./ott/lang_simple.ott  lines 289 - 297 and file ./ott/lang_simple.ott  lines 301 - 303 and file ./ott/lang_simple.ott  lines 314 - 320 and file ./ott/lang_simple.ott  lines 322 - 328 and file ./ott/lang_simple.ott  lines 374 - 377 and file ./ott/lang_simple.ott  lines 379 - 383 and file ./ott/lang_simple.ott  lines 385 - 389 and file ./ott/lang_simple.ott  lines 509 - 514 and file ./ott/lang_simple.ott  lines 517 - 519 and file ./ott/lang_simple.ott  lines 521 - 523 and file ./ott/lang_simple.ott  lines 525 - 526 
(define-language L  

(level i j ::= natural)

;; #source file ./ott/lang_simple.ott  lines 214 - 227 
  (canonical gu gv gU gV ::= 
    (CanonicalLam var gu)
    CanonicalDyn
    (CanonicalAtomic grr)
    (CanonicalPi var gU gV))
  ;grammar_pp, 2817: and 
;; #source file ./ott/lang_simple.ott  lines 230 - 235 
  (atomic grr gRR ::= 
    (AtomicSpine var ge)
    (AtomicSet i))
  ;grammar_pp, 2817: and 
;; #source file ./ott/lang_simple.ott  lines 237 - 240 
  (spine ge ::= 
    SpineEmpty
    (SpineCons ge gu))

;; #source file ./ott/lang_simple.ott  lines 385 - 389 
  (Env ::= 
    EnvEmpty
    (EnvExt var gU Env)
    (Envconcat Env_11 Env_22))

;; #source file ./ott/lang_simple.ott  lines 248 - 250 
  (epsilon ep ::= 
    (EvidenceEv Gamma gV))

;; #source file ./ott/lang_simple.ott  lines 115 - 141 
  (term tt ett TT ::= 
    (TermLam var tt)
    (TermApp tt_11 tt_22)
    var
    (TermSet i)
    (TermPi var TT_11 TT_22)
    (TermAnn tt TT)
    (TermEp ep tt)
    TermDyn
    TermError)

(iinf ::= number)

;; #source file ./ott/lang_simple.ott  lines 525 - 526 
  (ent ::= 
    (ENTTriple es gu gU))

;; #source file ./ott/lang_simple.ott  lines 517 - 519 
  (is js ::= 
    (LevelMultiSetSingleton i)
    (LevelMultiSetSum is js))

;; #source file ./ott/lang_simple.ott  lines 521 - 523 
  (iinfs jinfs ::= 
    (UniverseMultiSetSingleton iinf)
    (UniverseMultiSetSum iinfs jinfs))

;; #source file ./ott/lang_simple.ott  lines 314 - 320 
  (simpleContext SC ::= 
    (TermPi x hole T)
    (TermPi x sV hole)
    (TermApp hole t)
    (TermApp sv hole)
    (TermAnn hole T))

;; #source file ./ott/lang_simple.ott  lines 301 - 303 
  (dummyeu dummyev dummyeueU dummyeueV ::= 
    (DummyEvidenceValueEv ep rv)
    (DummyEvidenceValueRaw rv))

;; #source file ./ott/lang_simple.ott  lines 322 - 328 
  (evalContext EC ::= 
    (TermPi x hole eT)
    (TermApp hole et)
    (TermApp ev hole)
    (TermEp ep hole))

;; #source file ./ott/lang_simple.ott  lines 379 - 383 
  (Gamma ::= 
    EnvEmpty
    (EnvExt var gU Gamma)
    (Envconcat Gamma_11 Gamma_22))

;; #source file ./ott/lang_simple.ott  lines 146 - 155 
  (t T ::= 
    (TermLam var t)
    (TermApp t_11 t_22)
    var
    (TermPi var T_11 T_22)
    (TermSet i)
    (TermAnn t T))

;; #source file ./ott/lang_simple.ott  lines 179 - 181 
  (e ::= 
    SpineEmpty
    (SpineCons e u))

;; #source file ./ott/lang_simple.ott  lines 374 - 377 
  (SGamma ::= 
    EnvEmpty
    (EnvExt var U SGamma)
    (Envconcat SGamma_11 SGamma_22))

;; #source file ./ott/lang_simple.ott  lines 273 - 279 
  (ru rv rU rV ::= 
    (TermPi var eU eV)
    (TermLam var et)
    (TermSet i)
    TermDyn)

;; #source file ./ott/lang_simple.ott  lines 172 - 177 
  (rr RR ::= 
    (AtomicSpine var e)
    (AtomicSet i))

;; #source file ./ott/lang_simple.ott  lines 186 - 209 
  (gs gt gS gT ::= 
    (TermLam var gt)
    (TermApp gs gt)
    var
    (TermSet i)
    (TermPi var gS gT)
    (TermAnn gt gT)
    TermDyn)

;; #source file ./ott/lang_simple.ott  lines 164 - 169 
  (u U ::= 
    (CanonicalLam var u)
    (CanonicalAtomic rr)
    (CanonicalPi var U_11 U_22))

;; #source file ./ott/lang_simple.ott  lines 258 - 269 
  (es et eS eT ::= 
    (TermPi var eS eT)
    (TermLam var et)
    var
    (TermApp es et)
    TermDyn
    (TermSet i)
    (TermEp ep es)
    TermError)

;; #source file ./ott/lang_simple.ott  lines 289 - 297 
  (eu ev eU eV ::= 
    (TermEp ep rv)
    (TermPi var eU eT)
    (TermLam var et)
    (TermSet i)
    TermDyn)

;; #source file ./ott/lang_simple.ott  lines 282 - 287 
  (simpleValue su sv sU sV ::= 
    (TermPi var sU sV)
    (TermLam var t)
    (TermSet i))
   (var x y z X Y Z ::= variable-not-otherwise-mentioned)

    #:binding-forms

    (TermLam x tt #:refers-to (shadow x))
    (TermPi x TT_11 TT_22 #:refers-to (shadow x))
    (StaticTermLam x t #:refers-to (shadow x))
    (StaticTermPi x T_11 T_22)
    (SCanonicalLam x u #:refers-to (shadow x))

    (GradualTermLam x gt #:refers-to (shadow x))
    (GradualTermPi x gS gT #:refers-to (shadow x))
    (CanonicalLam x gu #:refers-to (shadow x))
    (CanonicalPi x gU gV #:refers-to (shadow x))

    (EvidenceTermPi x eS eT #:refers-to (shadow x))
    (EvidenceTermLam x et #:refers-to (shadow x))
    (RawValueLam x et #:refers-to (shadow x))
    (SimpleValuePi x sU sV #:refers-to (shadow x))
    (SimpleValueLam x t #:refers-to (shadow x))
    (EvidenceValuePi x eU eT #:refers-to (shadow x))
    (EvidenceValueLam x et #:refers-to (shadow x))

)

;;;; subrules 
;; #source file ./ott/lang_simple.ott  lines 540 - 540 and file ./ott/lang_simple.ott  lines 541 - 541 and file ./ott/lang_simple.ott  lines 544 - 544 and file ./ott/lang_simple.ott  lines 545 - 545 and file ./ott/lang_simple.ott  lines 546 - 546 and file ./ott/lang_simple.ott  lines 547 - 547 and file ./ott/lang_simple.ott  lines 548 - 548 and file ./ott/lang_simple.ott  lines 550 - 550 and file ./ott/lang_simple.ott  lines 551 - 551 and file ./ott/lang_simple.ott  lines 556 - 556 and file ./ott/lang_simple.ott  lines 557 - 557 and file ./ott/lang_simple.ott  lines 558 - 558 and file ./ott/lang_simple.ott  lines 561 - 561 
;; #source file ./ott/lang_simple.ott  lines 572 - 583 
;; #source file ./ott/lang_simple.ott  lines 585 - 670 

(define-metafunction L 
  succ : i -> i
  [(succ i) ,(+ (term i) 1)])
  
  (define-metafunction L 
  pred : i -> i
  [(pred i) ,(- (term i) 1)])

(define-metafunction L 
  esubst : et var et -> et 
  [(esubst x_old x_old et_new) et_new ]
  [(esubst x_old y et_new) y ]
  [(esubst (TermPi y eS eT) x_old et_new) 
    (TermPi z (esubst eS x_old et_new) (esubst (substitute eT x z) x_old et_new ))
    (where   z  ,(gensym)) ] 
  [(esubst (TermLam y es) x_old et_new) 
    (TermLam z (esubst (substitute es x z) x_old et_new ))
    (where   z  ,(gensym)) ]
  [(esubst (TermApp es et)) (TermApp (esubst es x_old et_new) (esubst et x_old et_new))]
  [(esubst (TermEp (EvidenceEv Gamma gU_1 gU_2) es) x_old et_new) (TermEp (EvidenceEv Gamma_1 gU_3 gU_4) (esubst es x_old et_new))
    (judgment-holds (GVarLook x_old gV Gamma))
    (judgment-holds (GNormCheck Gamma gu_esnorm es gV))
    (judgment-holds (GradualEnvSub Gamma x_old gV gu_esnorm Gamma_1))
    (judgment-holds (GHsub  x_old gV gu_esnorm gU_1 gU_3))
    (judgment-holds (GHsub  x_old gV gu_esnorm gU_2 gU_4))]
  ;; TODO get rid of types on ? or add Gamma
  [(esubst es x_old et_new) es] 
)

(define-metafunction L 
 is-check-only : term -> boolean
 [(is-check-only TermDyn) #t]
 [(is-check-only (TermPi x SS TT)) #t]
 [(is-check-only (TermLam x tt)) #t]
 [(is-check-only tt) #f] 
)

(define-metafunction L 
 is-check-pair : term gU -> boolean
 [(is-check-pair TermDyn gU) #t]
 [(is-check-pair (TermPi x SS TT) (CanonicalAtomic (AtomicDyn))) #t]
 [(is-check-pair (TermPi x SS TT) (CanonicalAtomic (AtomicSet i))) #t]
 [(is-check-pair (TermLam x tt) (CanonicalAtomic (AtomicDyn))) #t]
 [(is-check-pair (TermLam x tt) (CanonicalPi y gU gV)) #t]
 [(is-check-pair tt gU) #f] 
)

(define-metafunction L 
 is-set-pair : gU gV -> boolean
 [(is-set-pair (CanonicalAtomic (AtomicSet i)) (CanonicalAtomic (AtomicSet j))) #t (side-condition (< (term i) (term j)))]
 [(is-set-pair gU gV) #f] 
)

(define (pt tm)
  (with-handlers ([exn:fail:redex?
                   (lambda (exn) (format "~a" tm))])
    (pretty-term tm)
    ))

(define pretty-term
    (term-match/single L
    [x (symbol->string (term x))]
    [(TermLam x tt) (string-append "(λ " (pt (term x)) " . " (pt (term tt)) ")")]
    [(TermPi x SS TT) (string-append "(( " (pt (term x)) " : " (pt (term SS)) ") -> " (pt (term TT)) ")")]
    [(TermSet i) (string-append "Set" (number->string (term i)))]
    [(TermApp ss tt) (string-append "(" (pt (term ss)) " " (pt (term tt)) ")")]
    [TermDyn "?"]
    [TermError "⊥"]
    [(TermAnn ss tt) (string-append (pt (term ss)) " :: " (pt (term tt)))]
    [(TermDynAnn gU) (string-append "?" (pt (term gU)))]
    [(TermEp (EvidenceEv Gamma gU gV) tt) (string-append "〈" (pt (term gU)) "〉" (pt (term tt)))]
    [(CanonicalAtomic grr) (pt (term grr))]
    [(CanonicalLam x gu) (string-append "(λ " (pt (term x)) " . " (pt (term gu)) ")")]
    [(CanonicalPi x gU gV) (string-append "(( " (pt (term x)) " : " (pt (term gU)) ") -> " (pt (term gV)) ")")]
    [(AtomicSet i) (string-append "Set" (number->string (term i)))]
    [CanonicalDyn "?"]
    [(AtomicSpine x ge) (string-append "(" (pt (term x)) " " (pt (term ge)) ")")]
    [SpineEmpty ""]
    [(SpineCons ge gu) (string-append (pt (term ge)) " " (pt (term gu)))]
    
    ))

(define (printEvType ep)
 (term-let ([(EvidenceEv Gamma gU gV) ep]) (pt (term gU))))

;;; definitions 

(define-judgment-form
  L
  #:mode (GVarLook I O I)
  #:contract (GVarLook x gU Gamma)

;; #source file ./ott/lang_simple.ott  lines 679 - 681 
 [
  ------------------------------------- "GVarLookHead"
  (GVarLook x gU (EnvExt x gU Gamma))]

;; #source file ./ott/lang_simple.ott  lines 682 - 686 
 [
   (side-condition ,(not (alpha-equivalent? L (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  (GVarLook x gU Gamma)
  ------------------------------------- "GVarLookTail"
  (GVarLook x gU (EnvExt y gV Gamma))]

)
(define-judgment-form L 
 
  #:mode (GVarFree I I)
  #:contract (GVarFree x Gamma)

;; #source file ./ott/lang_simple.ott  lines 690 - 692 
 [----------------------- "GFreeLookNil"
  (GVarFree x EnvEmpty)]

;; #source file ./ott/lang_simple.ott  lines 693 - 697 
 [
   (side-condition ,(not (alpha-equivalent? L (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  (GVarFree x Gamma)
  ---------------------------------- "GFreeLookCons"
  (GVarFree x (EnvExt y gU Gamma))]
)

;;; definitions 

(define-judgment-form
  L
  #:mode (Universe I I O)
  #:contract (Universe Gamma gu iinf)

;; #source file ./ott/lang_simple.ott  lines 718 - 721 
 [
   (side-condition ,(> (term  i ) 0)) 
  ----------------------------------------------------------------- "UniverseSet"
  (Universe Gamma (CanonicalAtomic (AtomicSet i))   (succ  i )  )]

;; #source file ./ott/lang_simple.ott  lines 722 - 727 
 [
  (GVarLook x gV Gamma)
  (Universe Gamma gV  i )
   (side-condition ,(> (term  i ) 0)) 
  ---------------------------------------------------------------------------------- "UniverseVar"
  (Universe Gamma (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) )   (pred  i )  )]

;; #source file ./ott/lang_simple.ott  lines 728 - 732 
 [
  (Universe Gamma gU  i )
  (Universe (EnvExt x gU Gamma) gV  j )
  ------------------------------------------------------------ "UniversePi"
  (Universe Gamma (CanonicalPi x gU gV)  (max   i     j  ) )]

;; #source file ./ott/lang_simple.ott  lines 733 - 736 
 [
  (Universe Gamma gu  i )
  -------------------------------------------- "UniverseLam"
  (Universe Gamma  (CanonicalLam x gu)   i )]

;; #source file ./ott/lang_simple.ott  lines 737 - 741 
 [
  (Universe Gamma (CanonicalAtomic (AtomicSpine x ge))  i )
  (Universe Gamma gv  j )
  ------------------------------------------------------------------------------------------ "UniverseSpine"
  (Universe Gamma (CanonicalAtomic (AtomicSpine x (SpineCons ge gv)))  (max   i     j  ) )]

;; #source file ./ott/lang_simple.ott  lines 742 - 744 
 [
  ---------------------------------------- "UniverseDyn"
  (Universe Gamma CanonicalDyn  +inf.0 )]

)
(define-judgment-form L 
 
  #:mode (SUniverse I I O)
  #:contract (SUniverse SGamma u i)

;; #source file ./ott/lang_simple.ott  lines 750 - 753 
 [
   (side-condition ,(> (term  i ) 0)) 
  ----------------------------------------------------------------- "SUniverseSet"
  (SUniverse SGamma (CanonicalAtomic (AtomicSet i))  (succ  i ) )]

;; #source file ./ott/lang_simple.ott  lines 754 - 759 
 [
  (GVarLook x U SGamma)
  (SUniverse SGamma U i)
   (side-condition ,(> (term  i ) 0)) 
  ---------------------------------------------------------------------------------- "SUniverseVar"
  (SUniverse SGamma (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) )  (pred  i ) )]

;; #source file ./ott/lang_simple.ott  lines 761 - 765 
 [
  (SUniverse SGamma U_11 i)
  (SUniverse (EnvExt x U_11 SGamma) U_22 j)
  -------------------------------------------------------------- "SUniversePi"
  (SUniverse SGamma (CanonicalPi x U_11 U_22)  (max  i   j ) )]

;; #source file ./ott/lang_simple.ott  lines 766 - 768 
 [
  
  --------------------------------------------- "SUniverseLam"
  (SUniverse SGamma  (CanonicalLam x u)   0 )]

;; #source file ./ott/lang_simple.ott  lines 769 - 773 
 [
  
  (SUniverse SGamma (CanonicalAtomic (AtomicSpine x e)) i)
  (SUniverse SGamma u j)
  -------------------------------------------------------------------------------------- "SUniverseSpine"
  (SUniverse SGamma (CanonicalAtomic (AtomicSpine x (SpineCons e u)))  (max  i   j ) )]
)
;; #source file ./ott/lang_simple.ott  lines 775 - 777 
#|

;;; definitions 

(define-judgment-form
  L
  #:mode (LevelOrder I I I)
  #:contract (LevelOrder Gamma iinf jinf)

)
(define-judgment-form L 
 
  #:mode (TypeOrder I I I)
  #:contract (TypeOrder Gamma gU gV)

)
;; #source file ./ott/lang_simple.ott  lines 795 - 797 
|#

;;; definitions 

(define-judgment-form
  L
  #:mode (SHsub I I I I O)
  #:contract (SHsub x U u_11 u_22 u_33)

;; #source file ./ott/lang_simple.ott  lines 816 - 821 
 [
  (SHsub x U u U_11 U_11^)
  (SHsub x U u U_22 U_22^)
   (side-condition ,(not (alpha-equivalent? L (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  --------------------------------------------------------------------- "SHsubPi"
  (SHsub x U u (CanonicalPi y U_11 U_22) (CanonicalPi y U_11^ U_22^))]

;; #source file ./ott/lang_simple.ott  lines 823 - 826 
 [
   (side-condition ,(not (alpha-equivalent? L (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  ----------------------------------------------------------------------------------------------------------------- "SHsubDiffNil"
  (SHsub x U u (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ))]

;; #source file ./ott/lang_simple.ott  lines 827 - 832 
 [
  
   (side-condition ,(not (alpha-equivalent? L (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  (SHsub x U u (CanonicalAtomic (AtomicSpine y e)) (CanonicalAtomic (AtomicSpine y e_^)))
  (SHsub x U u u_22 u_33)
  --------------------------------------------------------------------------------------------------------------------------- "SHsubDiffCons"
  (SHsub x U u (CanonicalAtomic (AtomicSpine y (SpineCons e u_22))) (CanonicalAtomic (AtomicSpine y (SpineCons e_^ u_33))))]

;; #source file ./ott/lang_simple.ott  lines 835 - 837 
 [
  ------------------------------------------------------------------------------- "SHsubSet"
  (SHsub x U u (CanonicalAtomic (AtomicSet i)) (CanonicalAtomic (AtomicSet i)))]

;; #source file ./ott/lang_simple.ott  lines 839 - 843 
 [
  
  (SHsub x U u u_22 u_33)
   (side-condition ,(not (alpha-equivalent? L (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  --------------------------------------------------------------- "SHsubLam"
  (SHsub x U u  (CanonicalLam y u_22)   (CanonicalLam y u_33) )]

;; #source file ./ott/lang_simple.ott  lines 848 - 851 
 [
  
  (SHsubR x U u_11 (AtomicSpine x (SpineCons e u_22)) u_33 U_^)
  ---------------------------------------------------------------------------- "SHsubSpine"
  (SHsub x U u_11 (CanonicalAtomic (AtomicSpine x (SpineCons e u_22))) u_33)]

)
(define-judgment-form L 
 
  #:mode (SHsubR I I I I O O)
  #:contract (SHsubR x U u rr u_^ U_^)

;; #source file ./ott/lang_simple.ott  lines 862 - 864 
 [
  --------------------------------------------------- "SHsubRHead"
  (SHsubR x U u  (AtomicSpine  x  SpineEmpty)  u U)]

;; #source file ./ott/lang_simple.ott  lines 865 - 872 
 [
  
   (SHsubR x U u_11 (AtomicSpine x e)  (CanonicalLam y u_11^)  (CanonicalPi y U_11^ U_22^))   (SHsub x U u_11 u_22 u_33) 
   (SHsub y U_11^ u_33 u_11^ u_22^)   (SHsub y U_11^ u_33 U_22^ U_33^) 
  -------------------------------------------------------------------- "SHsubRSpine"
  (SHsubR x U u_11  (AtomicSpine x (SpineCons e u_22))  u_22^ U_33^)]
)

;;; definitions 

(define-judgment-form
  L
  #:mode (SWF I)
  #:contract (SWF SGamma)

;; #source file ./ott/lang_simple.ott  lines 882 - 884 
 [---------------- "SWFEmpty"
  (SWF EnvEmpty)]

;; #source file ./ott/lang_simple.ott  lines 885 - 888 
 [
    (SWF SGamma)   (StaticSet SGamma U)    (GVarFree x SGamma) 
  --------------------------- "SWFExt"
  (SWF (EnvExt x U SGamma))]

)
(define-judgment-form L 
 
  #:mode (StaticSet I I)
  #:contract (StaticSet SGamma U)

;; #source file ./ott/lang_simple.ott  lines 897 - 900 
 [
  
  (SCSynth SGamma rr (CanonicalAtomic (AtomicSet i)))
  ----------------------------------------- "StaticSetSet"
  (StaticSet SGamma (CanonicalAtomic rr))]

;; #source file ./ott/lang_simple.ott  lines 903 - 908 
 [
  (StaticSet SGamma U_11)
  (SWF (EnvExt x U_11 SGamma))
  (StaticSet (EnvExt x U_11 SGamma) U_22)
  ---------------------------------------------- "StaticSetPi"
  (StaticSet SGamma (CanonicalPi x U_11 U_22))]

)
(define-judgment-form L 
 
  #:mode (SCSynth I I O)
  #:contract (SCSynth SGamma rr U)

;; #source file ./ott/lang_simple.ott  lines 916 - 919 
 [
   (side-condition ,(> (term  i ) 0)) 
  ---------------------------------------------------------------------------- "SCSynthSet"
  (SCSynth SGamma (AtomicSet i) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 921 - 925 
 [
  
  (SWF SGamma)
  (GVarLook x U SGamma)
  --------------------------------------------------- "SCSynthVar"
  (SCSynth SGamma  (AtomicSpine  x  SpineEmpty)  U)]

;; #source file ./ott/lang_simple.ott  lines 929 - 933 
 [
  
  (SCSynth SGamma (AtomicSpine x e) (CanonicalPi y U_11 U_22))
   (SCCheck SGamma u U_11)   (SHsub y U_11 u U_22 U_33) 
  ------------------------------------------------------- "SCSynthApp"
  (SCSynth SGamma (AtomicSpine x (SpineCons e u)) U_33)]

)
(define-judgment-form L 
 
  #:mode (SCCheck I I I)
  #:contract (SCCheck SGamma u U)

;; #source file ./ott/lang_simple.ott  lines 941 - 944 
 [
  
  (SCSynth SGamma rr (CanonicalAtomic RR))
  ------------------------------------------------------------ "SCCheckSynth"
  (SCCheck SGamma (CanonicalAtomic rr) (CanonicalAtomic RR))]

;; #source file ./ott/lang_simple.ott  lines 945 - 949 
 [
  
  (SCSynth SGamma rr (CanonicalAtomic (AtomicSet i)))
   (side-condition ,(and (< 0 (term  i )) (< (term  i ) (term  j )))) 
  ----------------------------------------------------------------------- "SCCheckLevel"
  (SCCheck SGamma (CanonicalAtomic rr) (CanonicalAtomic (AtomicSet j)))]

;; #source file ./ott/lang_simple.ott  lines 951 - 954 
 [
  
   (SWF (EnvExt x U_11 SGamma))   (SCCheck (EnvExt x U_11 SGamma) u U_22) 
  ----------------------------------------------------------------- "SCCheckLam"
  (SCCheck SGamma  (CanonicalLam x u)  (CanonicalPi x U_11 U_22))]

;; #source file ./ott/lang_simple.ott  lines 955 - 959 
 [
  (SCCheck SGamma U_11 (CanonicalAtomic (AtomicSet i)))
   (SWF (EnvExt x U_11 SGamma))   (SCCheck (EnvExt x U_11 SGamma) U_22 (CanonicalAtomic (AtomicSet i))) 
  ---------------------------------------------------------------------------- "SCCheckPi"
  (SCCheck SGamma (CanonicalPi x U_11 U_22) (CanonicalAtomic (AtomicSet i)))]
)

;;; definitions 

(define-judgment-form
  L
  #:mode (SSynth I I O)
  #:contract (SSynth SGamma t U)

;; #source file ./ott/lang_simple.ott  lines 969 - 973 
 [
  
  (StaticSetNorm SGamma U T)
  (SCheck SGamma t U)
  ----------------------------------- "SSynthAnn"
  (SSynth SGamma  (TermAnn t T)  U)]

;; #source file ./ott/lang_simple.ott  lines 974 - 977 
 [
   (side-condition ,(> (term  i ) 0)) 
  ------------------------------------------------------------------------- "SSynthSet"
  (SSynth SGamma (TermSet i) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 979 - 983 
 [
  
  (SWF SGamma)
  (GVarLook x U SGamma)
  ------------------------------- "SSynthVar"
  (SSynth SGamma x U)]

;; #source file ./ott/lang_simple.ott  lines 988 - 992 
 [
  
  (SSynth SGamma t_11 (CanonicalPi x U_11 U_22))
   (SNormCheck SGamma u t_22 U_11)   (SHsub x U_11 u U_22 U_33) 
  ------------------------------------------ "SSynthApp"
  (SSynth SGamma (TermApp t_11 t_22) U_33)]

)
(define-judgment-form L 
 
  #:mode (SCheck I I I)
  #:contract (SCheck SGamma t U)

;; #source file ./ott/lang_simple.ott  lines 999 - 1002 
 [
  
  (SSynth SGamma t U)
  --------------------- "SCheckSynth"
  (SCheck SGamma t U)]

;; #source file ./ott/lang_simple.ott  lines 1003 - 1007 
 [
  
  (SSynth SGamma t (CanonicalAtomic (AtomicSet i)))
   (side-condition ,(and (< 0 (term  i )) (< (term  i ) (term  j )))) 
  --------------------------------------------------- "SCheckLevel"
  (SCheck SGamma t (CanonicalAtomic (AtomicSet j)))]

;; #source file ./ott/lang_simple.ott  lines 1008 - 1011 
 [
    (SNormCheck SGamma U T_11 (CanonicalAtomic (AtomicSet i)))   (SWF (EnvExt x U SGamma))    (SCheck (EnvExt x U SGamma) T_22 (CanonicalAtomic (AtomicSet i))) 
  ---------------------------------------------------------------------- "SCheckPi"
  (SCheck SGamma (TermPi x T_11 T_22) (CanonicalAtomic (AtomicSet i)))]

;; #source file ./ott/lang_simple.ott  lines 1013 - 1016 
 [
  
   (SWF (EnvExt x U_11 SGamma))   (SCheck (EnvExt x U_11 SGamma) t U_22) 
  ----------------------------------------------------------- "SCheckLam"
  (SCheck SGamma  (TermLam x t)  (CanonicalPi x U_11 U_22))]

)
(define-judgment-form L 
 
  #:mode (StaticSetNorm I O I)
  #:contract (StaticSetNorm SGamma U T)

;; #source file ./ott/lang_simple.ott  lines 1027 - 1030 
 [
  (SNormSynth SGamma T U (CanonicalAtomic (AtomicSet i)))
  ---------------------------- "StaticSetNormSynth"
  (StaticSetNorm SGamma U T)]

;; #source file ./ott/lang_simple.ott  lines 1031 - 1035 
 [
  (StaticSetNorm SGamma U_11 T_11)
  (StaticSetNorm (EnvExt x U_11 SGamma) U_22 T_22)
  ----------------------------------------------------------------------- "StaticSetNormPi"
  (StaticSetNorm SGamma (CanonicalPi x U_11 U_22) (TermPi x T_11 T_22))]

)
(define-judgment-form L 
 
  #:mode (SNormSynth I I O O)
  #:contract (SNormSynth SGamma t u U)

;; #source file ./ott/lang_simple.ott  lines 1041 - 1045 
 [
  
  (StaticSetNorm SGamma U T)
  (SNormCheck SGamma u t U)
  ----------------------------------------- "SNormSynthAnn"
  (SNormSynth SGamma  (TermAnn t T)  u U)]

;; #source file ./ott/lang_simple.ott  lines 1046 - 1049 
 [
   (side-condition ,(> (term  i ) 0)) 
  ------------------------------------------------------------------------------------------------------------- "SNormSynthSet"
  (SNormSynth SGamma (TermSet i) (CanonicalAtomic (AtomicSet i)) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 1051 - 1056 
 [
  
  (SWF SGamma)
  (GVarLook x U SGamma)
  (EtaExpand  (AtomicSpine  x  SpineEmpty)  u U)
  ------------------------------------- "SNormSynthVar"
  (SNormSynth SGamma x u U)]

;; #source file ./ott/lang_simple.ott  lines 1061 - 1066 
 [
  
  (SNormSynth SGamma t_11  (CanonicalLam x u_11)  (CanonicalPi x U_11 U_22))
  (SNormCheck SGamma u_22 t_22 U_11)
   (SHsub x U_11 u_22 u_11 u_33)   (SHsub x U_11 u_22 U_22 U_33) 
  --------------------------------------------------- "SNormSynthApp"
  (SNormSynth SGamma (TermApp t_11 t_22) u_33 U_33)]

)
(define-judgment-form L 
 
  #:mode (SNormCheck I O I I)
  #:contract (SNormCheck SGamma u t U)

;; #source file ./ott/lang_simple.ott  lines 1075 - 1078 
 [
  
  (SNormSynth SGamma t u U)
  --------------------------- "SNormCheckSynth"
  (SNormCheck SGamma u t U)]

;; #source file ./ott/lang_simple.ott  lines 1079 - 1083 
 [
  
  (SNormSynth SGamma t u (CanonicalAtomic (AtomicSet i)))
   (side-condition ,(and (< 0 (term  i )) (< (term  i ) (term  j )))) 
  --------------------------------------------------------- "SNormCheckLevel"
  (SNormCheck SGamma u t (CanonicalAtomic (AtomicSet j)))]

;; #source file ./ott/lang_simple.ott  lines 1085 - 1090 
 [
  (SNormCheck SGamma U_11 T_11 (CanonicalAtomic (AtomicSet i)))
  (SWF (EnvExt x U_11 SGamma))
  (SNormCheck (EnvExt x U_11 SGamma) U_22 T_22 (CanonicalAtomic (AtomicSet i)))
  ---------------------------------------------------------------------------------------------------- "SNormCheckPi"
  (SNormCheck SGamma (CanonicalPi x U_11 U_22) (TermPi x T_11 T_22) (CanonicalAtomic (AtomicSet i)))]

;; #source file ./ott/lang_simple.ott  lines 1091 - 1095 
 [
  
  (SWF (EnvExt x U_11 SGamma))
  (SNormCheck (EnvExt x U_11 SGamma) u t U_22)
  ------------------------------------------------------------------------------------ "SNormCheckLam"
  (SNormCheck SGamma  (CanonicalLam x u)   (TermLam x t)  (CanonicalPi x U_11 U_22))]

)
(define-judgment-form L 
 
  #:mode (EtaExpand I O I)
  #:contract (EtaExpand rr u U)

;; #source file ./ott/lang_simple.ott  lines 1100 - 1102 
 [
  ---------------------------------------------------------- "EtaExpandAtomic"
  (EtaExpand rr (CanonicalAtomic rr) (CanonicalAtomic RR))]

;; #source file ./ott/lang_simple.ott  lines 1104 - 1107 
 [
  
   (EtaExpand  (AtomicSpine  y  SpineEmpty)  u U_11)   (EtaExpand (AtomicSpine x (SpineCons e u)) u U_22) 
  ------------------------------------------------------------------------------ "EtaExpandPi"
  (EtaExpand (AtomicSpine x e)  (CanonicalLam y u)  (CanonicalPi y U_11 U_22))]
)

;;; definitions 

(define-judgment-form
  L
  #:mode (Domain I O)
  #:contract (Domain gU gV)

;; #source file ./ott/lang_simple.ott  lines 1125 - 1127 
 [----------------------------------- "DomainPi"
  (Domain (CanonicalPi x gU gV) gU)]

;; #source file ./ott/lang_simple.ott  lines 1128 - 1130 
 [------------------------------------ "DomainDyn"
  (Domain CanonicalDyn CanonicalDyn)]

)
(define-judgment-form L 
 
  #:mode (CoDomain I O)
  #:contract (CoDomain gU gV)

;; #source file ./ott/lang_simple.ott  lines 1136 - 1138 
 [------------------------------------- "CoDomainPi"
  (CoDomain (CanonicalPi x gU gV) gV)]

;; #source file ./ott/lang_simple.ott  lines 1139 - 1141 
 [-------------------------------------- "CoDomainDyn"
  (CoDomain CanonicalDyn CanonicalDyn)]

)
(define-judgment-form L 
 
  #:mode (GradualEnvSub I I I I O)
  #:contract (GradualEnvSub x gU gu Gamma Gamma_^)

;; #source file ./ott/lang_simple.ott  lines 1148 - 1150 
 [------------------------------------------- "GradualEnvSubEmpty"
  (GradualEnvSub x gU gu EnvEmpty EnvEmpty)]

;; #source file ./ott/lang_simple.ott  lines 1151 - 1156 
 [
  
   (side-condition ,(not (alpha-equivalent? L (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  (GHsub x gU gu gU gU_^)
  (GradualEnvSub x gU gu Gamma Gamma_^)
  --------------------------------------------------------------------- "GradualEnvSubVarDiff"
  (GradualEnvSub x gU gu (EnvExt y gU Gamma) (EnvExt y gU_^ Gamma_^))]

;; #source file ./ott/lang_simple.ott  lines 1157 - 1160 
 [
  
  (GradualEnvSub x gU gu Gamma Gamma_^)
  ----------------------------------------------------- "GradualEnvSubVarSame"
  (GradualEnvSub x gU gu (EnvExt x gU Gamma) Gamma_^)]

)
(define-judgment-form L 
 
  #:mode (GHsub I I I I O)
  #:contract (GHsub x gU gu gu_^ gv)

;; #source file ./ott/lang_simple.ott  lines 1167 - 1169 
 [--------------------------------------------------------------------------------- "GHsubSet"
  (GHsub x gU gu (CanonicalAtomic (AtomicSet i)) (CanonicalAtomic (AtomicSet i)))]

;; #source file ./ott/lang_simple.ott  lines 1171 - 1173 
 [------------------------------------------- "GHsubDyn"
  (GHsub x gU gu CanonicalDyn CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 1174 - 1179 
 [ (side-condition ,(not (alpha-equivalent? L (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  (GHsub x gU gu gV_11 gV_11^)
  (GHsub x gU gu gV_22 gV_22^)
  --------------------------------------------------------------------------- "GHsubPi"
  (GHsub x gU gu (CanonicalPi y gV_11 gV_22) (CanonicalPi y gV_11^ gV_22^))]

;; #source file ./ott/lang_simple.ott  lines 1180 - 1184 
 [ (where   y  ,(gensym)) 
  (GHsub x gU gu (CanonicalPi y gU  (substitute  gV   x   y ) ) gV_^)
  -------------------------------------------- "GHsubPiRdxAlpha"
  (GHsub x gU gu (CanonicalPi x gU gV) gV_^)]

;; #source file ./ott/lang_simple.ott  lines 1186 - 1190 
 [ (side-condition ,(not (alpha-equivalent? L (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  (GHsub x gU gu gv gv_^)
  --------------------------------------------------------------- "GHsubLam"
  (GHsub x gU gu  (CanonicalLam y gv)   (CanonicalLam y gv_^) )]

;; #source file ./ott/lang_simple.ott  lines 1191 - 1195 
 [ (where   y  ,(gensym)) 
  (GHsub x gU gu  (CanonicalLam y  (substitute  gv   x   y ) )  gv_^)
  -------------------------------------------- "GHsubLamRdxAlpha"
  (GHsub x gU gu  (CanonicalLam x gv)  gv_^)]

;; #source file ./ott/lang_simple.ott  lines 1196 - 1199 
 [ (side-condition ,(not (alpha-equivalent? L (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  ------------------------------------------------------------------------------------------------------------------- "GHsubDiffNil"
  (GHsub x gU gu (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ))]

;; #source file ./ott/lang_simple.ott  lines 1200 - 1205 
 [ (side-condition ,(not (alpha-equivalent? L (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  (GHsub x gU gu (CanonicalAtomic (AtomicSpine y ge)) (CanonicalAtomic (AtomicSpine y ge_^)))
  (GHsub x gU gu gv gv_^)
  ----------------------------------------------------------------------------------------------------------------------------- "GHsubDiffCons"
  (GHsub x gU gu (CanonicalAtomic (AtomicSpine y (SpineCons ge gv))) (CanonicalAtomic (AtomicSpine y (SpineCons ge_^ gv_^))))]

;; #source file ./ott/lang_simple.ott  lines 1208 - 1211 
 [(GHsubR x gU gu ge gv gV)
  --------------------------------------------------------- "GHsubSpine"
  (GHsub x gU gu (CanonicalAtomic (AtomicSpine x ge)) gv)]

)
(define-judgment-form L 
 
  #:mode (GHsubR I I I I O O)
  #:contract (GHsubR x gU gu ge gv gV)

;; #source file ./ott/lang_simple.ott  lines 1231 - 1233 
 [----------------------------------- "GHsubRHead"
  (GHsubR x gU gu SpineEmpty gu gU)]

;; #source file ./ott/lang_simple.ott  lines 1236 - 1240 
 [ (GHsubR x gU gu ge CanonicalDyn (CanonicalPi y gU_11 gU_22))   (GHsub y gU_11 gv gU_22 gV) 
  ---------------------------------------------------- "GHsubRDynSpine"
  (GHsubR x gU gu (SpineCons ge gv) CanonicalDyn gV)]

;; #source file ./ott/lang_simple.ott  lines 1241 - 1246 

;; #source file ./ott/lang_simple.ott  lines 1247 - 1252 
 [(GHsubR x gU gu_11 ge gv_11 CanonicalDyn)
  -------------------------------------------------------------------- "GHsubRDynType"
  (GHsubR x gU gu_11 (SpineCons ge gu_22) CanonicalDyn CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 1255 - 1261 
 [(GHsubR x gU gu ge  (CanonicalLam y_11 gu_22)  (CanonicalPi y_22 gU_11 gU_22))
   (GHsub x gU gu gv_11 gv_22)   (GHsub y_11 gU_11 gv_22 gu_22 gv_33) 
   (GHsub y_22 gU_11 gv_22 gU_22 gV)   (GEtaExpandC gv_33 gv_44 gV) 
  ------------------------------------------------ "GHsubRLamSpineRdxAlpha"
  (GHsubR x gU gu (SpineCons ge gv_11) gv_44 gV)]

)
(define-judgment-form L 
 
  #:mode (CodSub I I O)
  #:contract (CodSub gu gu_^ gv)

;; #source file ./ott/lang_simple.ott  lines 1272 - 1275 
 [(GHsub x gU gu gV gV_^)
  ---------------------------------------- "CodSubPi"
  (CodSub gu (CanonicalPi x gU gV) gV_^)]

;; #source file ./ott/lang_simple.ott  lines 1276 - 1278 
 [--------------------------------------- "CodSubDyn"
  (CodSub gu CanonicalDyn CanonicalDyn)]

)
(define-judgment-form L 
 
  #:mode (BodySub I I I O)
  #:contract (BodySub gU gu gu_^ gv)

;; #source file ./ott/lang_simple.ott  lines 1304 - 1307 
 [(GHsub x gU gu gv gv_^)
  -------------------------------------------- "BodySubPi"
  (BodySub gU gu  (CanonicalLam x gv)  gv_^)]

;; #source file ./ott/lang_simple.ott  lines 1308 - 1310 
 [------------------------------------------- "BodySubDyn"
  (BodySub gU gu CanonicalDyn CanonicalDyn)]
)

;;; definitions 

(define-judgment-form
  L
  #:mode (GradualSet I I)
  #:contract (GradualSet Gamma gU)

;; #source file ./ott/lang_simple.ott  lines 1319 - 1322 
 [
  (GCSynth Gamma grr CanonicalDyn)
  ------------------------------------------ "GradualSetDynTy"
  (GradualSet Gamma (CanonicalAtomic grr))]

;; #source file ./ott/lang_simple.ott  lines 1323 - 1326 
 [
  (GCSynth Gamma grr (CanonicalAtomic (AtomicSet i)))
  ------------------------------------------ "GradualSetSet"
  (GradualSet Gamma (CanonicalAtomic grr))]

;; #source file ./ott/lang_simple.ott  lines 1329 - 1334 
 [
  (GradualSet Gamma gU_11)
    
  (GradualSet (EnvExt x gU_11 Gamma) gU_22)
  ------------------------------------------------ "GradualSetPi"
  (GradualSet Gamma (CanonicalPi x gU_11 gU_22))]

;; #source file ./ott/lang_simple.ott  lines 1336 - 1338 
 [
  --------------------------------- "GradualSetDynVal"
  (GradualSet Gamma CanonicalDyn)]

)
(define-judgment-form L 
 
  #:mode (WF I)
  #:contract (WF Gamma)

;; #source file ./ott/lang_simple.ott  lines 1344 - 1346 
 [--------------- "WFEmpty"
  (WF EnvEmpty)]

;; #source file ./ott/lang_simple.ott  lines 1347 - 1351 
 [
   (WF Gamma)   (GradualSet Gamma gU) 
  (GVarFree x Gamma)
  -------------------------- "WFExt"
  (WF (EnvExt x gU Gamma))]

)
(define-judgment-form L 
 
  #:mode (GCSynth I I O)
  #:contract (GCSynth Gamma grr gU)

;; #source file ./ott/lang_simple.ott  lines 1357 - 1360 
 [
   (side-condition ,(> (term  i ) 0)) 
  --------------------------------------------------------------------------- "GCSynthSet"
  (GCSynth Gamma (AtomicSet i) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 1362 - 1366 
 [
    
  (GVarLook x gU Gamma)
  --------------------------------------------------- "GCSynthVar"
  (GCSynth Gamma  (AtomicSpine  x  SpineEmpty)  gU)]

;; #source file ./ott/lang_simple.ott  lines 1370 - 1377 
 [
  (GCSynth Gamma (AtomicSpine x ge) gU)
  (Domain gU gV)
  (GCCheck Gamma gu gV)
  (CodSub gu gU gV_^)
  -------------------------------------------------------- "GCSynthApp"
  (GCSynth Gamma (AtomicSpine x (SpineCons ge gu)) gV_^)]

)
(define-judgment-form L 
 
  #:mode (GCCheck I I I)
  #:contract (GCCheck Gamma gu gU)

;; #source file ./ott/lang_simple.ott  lines 1384 - 1388 
 [
  (GCSynth Gamma grr gU)
  (Consistent gU gV)
  ------------------------------------------ "GCCheckSynth"
  (GCCheck Gamma (CanonicalAtomic grr) gV)]

;; #source file ./ott/lang_simple.ott  lines 1389 - 1393 
 [
  (GCSynth Gamma grr (CanonicalAtomic (AtomicSet i)))
   (side-condition ,(and (< 0 (term  i )) (< (term  i ) (term  j )))) 
  ----------------------------------------------------------------------- "GCCheckLevel"
  (GCCheck Gamma (CanonicalAtomic grr) (CanonicalAtomic (AtomicSet j)))]

;; #source file ./ott/lang_simple.ott  lines 1395 - 1399 

;; #source file ./ott/lang_simple.ott  lines 1401 - 1406 
 [
   (where   z  ,(gensym)) 
    
  (GCCheck (EnvExt z gU Gamma)  (substitute  gu   x   z )   (substitute  gV   y   z ) )
  ------------------------------------------------------------- "GCCheckLamPiRdxAlpha"
  (GCCheck Gamma  (CanonicalLam x gu)  (CanonicalPi y gU gV))]

;; #source file ./ott/lang_simple.ott  lines 1407 - 1411 
 [
    
  (GCCheck (EnvExt x CanonicalDyn Gamma) gu CanonicalDyn)
  ---------------------------------------------------- "GCCheckLamDyn"
  (GCCheck Gamma  (CanonicalLam x gu)  CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 1412 - 1418 
 [
  (ConsistentSet gV)
  (GCCheck Gamma gU_11 gV)
    
  (GCCheck (EnvExt x gU_11 Gamma) gU_22 gV)
  ------------------------------------------------ "GCCheckPi"
  (GCCheck Gamma (CanonicalPi x gU_11 gU_22) gV)]

;; #source file ./ott/lang_simple.ott  lines 1420 - 1423 
 [
  (GradualSet Gamma gU)
  --------------------------------- "GCCheckDyn"
  (GCCheck Gamma CanonicalDyn gU)]

)
(define-judgment-form L 
 
  #:mode (ConsistentSet I)
  #:contract (ConsistentSet gU)

;; #source file ./ott/lang_simple.ott  lines 1431 - 1433 
 [------------------------------------------------- "ConsistentSetSet"
  (ConsistentSet (CanonicalAtomic (AtomicSet i)))]

;; #source file ./ott/lang_simple.ott  lines 1434 - 1436 
 [------------------------------ "ConsistentSetDyn"
  (ConsistentSet CanonicalDyn)]

)
(define-judgment-form L 
 
  #:mode (Consistent I I)
  #:contract (Consistent gU gV)

;; #source file ./ott/lang_simple.ott  lines 1446 - 1448 
 [-------------------- "ConsistentEq"
  (Consistent gu gu)]

;; #source file ./ott/lang_simple.ott  lines 1449 - 1453 

;; #source file ./ott/lang_simple.ott  lines 1455 - 1460 
 [ (where   z  ,(gensym)) 
  (Consistent gU gU_^)
  (Consistent  (substitute  gV   x   z )   (substitute  gV_^   y   z ) )
  -------------------------------------------------------------- "ConsistentPiRdxAlpha"
  (Consistent (CanonicalPi x gU gV) (CanonicalPi y gU_^ gV_^))]

;; #source file ./ott/lang_simple.ott  lines 1461 - 1464 

;; #source file ./ott/lang_simple.ott  lines 1466 - 1470 
 [ (where   z  ,(gensym)) 
  (Consistent  (substitute  gu   x   z )   (substitute  gv   y   z ) )
  ---------------------------------------------------------- "ConsistentLamRdxAlpha"
  (Consistent  (CanonicalLam x gu)   (CanonicalLam y gv) )]

;; #source file ./ott/lang_simple.ott  lines 1471 - 1475 
 [(Consistent (CanonicalAtomic (AtomicSpine x ge)) (CanonicalAtomic (AtomicSpine x ge_^)))
  (Consistent gu gv)
  ------------------------------------------------------------------------------------------------------------------------ "ConsistentApp"
  (Consistent (CanonicalAtomic (AtomicSpine x (SpineCons ge gu))) (CanonicalAtomic (AtomicSpine x (SpineCons ge_^ gv))))]

;; #source file ./ott/lang_simple.ott  lines 1476 - 1478 
 [------------------------------ "ConsistentDynL"
  (Consistent CanonicalDyn gv)]

;; #source file ./ott/lang_simple.ott  lines 1479 - 1481 
 [------------------------------ "ConsistentDynR"
  (Consistent gu CanonicalDyn)]
)

;;; definitions 

(define-judgment-form
  L
  #:mode (Meet I I O)
  #:contract (Meet gU gV gU_^)

;; #source file ./ott/lang_simple.ott  lines 1492 - 1496 

;; #source file ./ott/lang_simple.ott  lines 1498 - 1503 
 [ (where   z  ,(gensym)) 
  (Meet gU gU_^ gU_^^)
  (Meet  (substitute  gV   x   z )   (substitute  gV_^   y   z )  gV_^^)
  ------------------------------------------------------------------------------------ "MeetPiRdxAlpha"
  (Meet (CanonicalPi x gU gV) (CanonicalPi y gU_^ gV_^) (CanonicalPi z gU_^^ gV_^^))]

;; #source file ./ott/lang_simple.ott  lines 1504 - 1507 

;; #source file ./ott/lang_simple.ott  lines 1509 - 1513 
 [ (where   z  ,(gensym)) 
  (Meet  (substitute  gu   x   z )   (substitute  gu_^   y   z )  gv)
  ---------------------------------------------------------------------- "MeetLamRdxAlpha"
  (Meet (CanonicalLam x gu) (CanonicalLam y gu_^) (CanonicalLam z gv))]

;; #source file ./ott/lang_simple.ott  lines 1514 - 1518 
 [(Meet gu gu_^ gu_^^)
  (Meet (CanonicalAtomic (AtomicSpine x ge)) (CanonicalAtomic (AtomicSpine x ge_^)) (CanonicalAtomic (AtomicSpine x ge_^^)))
  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ "MeetApp"
  (Meet (CanonicalAtomic (AtomicSpine x (SpineCons ge gu))) (CanonicalAtomic (AtomicSpine x (SpineCons ge_^ gu_^))) (CanonicalAtomic (AtomicSpine x (SpineCons ge_^^ gu_^^))))]

;; #source file ./ott/lang_simple.ott  lines 1519 - 1521 
 [--------------------------- "MeetDynL"
  (Meet CanonicalDyn gU gU)]

;; #source file ./ott/lang_simple.ott  lines 1522 - 1525 
 [ (side-condition ,(not (alpha-equivalent? L (term  gV ) (term  CanonicalDyn )))) 
  --------------------------- "MeetDynR"
  (Meet gV CanonicalDyn gV)]

;; #source file ./ott/lang_simple.ott  lines 1526 - 1530 
 [ (side-condition ,(not (alpha-equivalent? L (term  gU ) (term  CanonicalDyn )))) 
   (side-condition ,(not (alpha-equivalent? L (term  gV ) (term  CanonicalDyn )))) 
  ----------------- "MeetRefl"
  (Meet gu gu gu)]

)
(define-judgment-form L 
 
  #:mode (MorePrecise I I)
  #:contract (MorePrecise gU gV)

;; #source file ./ott/lang_simple.ott  lines 1538 - 1541 
 [(Meet gU gV gU)
  --------------------- "MorePreciseDef"
  (MorePrecise gU gV)]

)
(define-judgment-form L 
 
  #:mode (EvConsistent I I I)
  #:contract (EvConsistent ep gU gV)

;; #source file ./ott/lang_simple.ott  lines 1548 - 1552 
 [
  (Meet gV_11 gV_22 gV_33)
  (MorePrecise gU gV_33)
  -------------------------------------------------- "EvConsistentDef"
  (EvConsistent (EvidenceEv Gamma gU) gV_11 gV_22)]
)

;;; definitions 

(define-judgment-form
  L
  #:mode (GSynth I I O)
  #:contract (GSynth Gamma gt gU)

;; #source file ./ott/lang_simple.ott  lines 1566 - 1570 
 [
  
  (GradualSetNorm Gamma gV gT)
  (GCheck Gamma gt gV)
  ------------------------------------- "GSynthAnn"
  (GSynth Gamma  (TermAnn gt gT)  gV)]

;; #source file ./ott/lang_simple.ott  lines 1571 - 1574 
 [
   (side-condition ,(> (term  i ) 0)) 
  ------------------------------------------------------------------------ "GSynthSet"
  (GSynth Gamma (TermSet i) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 1576 - 1580 
 [
  (GVarLook x gU Gamma)
    
  ------------------------------- "GSynthVar"
  (GSynth Gamma x gU)]

;; #source file ./ott/lang_simple.ott  lines 1585 - 1589 
 [
  
   (GSynth Gamma gs gV)   (GNormCheck Gamma gv gt  (error "TODO") ) 
  (CodSub gv gV gV_22)
  -------------------------------------- "GSynthApp"
  (GSynth Gamma (TermApp gs gt) gV_22)]

)
(define-judgment-form L 
 
  #:mode (GCheck I I I)
  #:contract (GCheck Gamma gt gU)

;; #source file ./ott/lang_simple.ott  lines 1604 - 1609 
 [
  (GSynth Gamma gt gU)
  (Consistent gU gV)
  ---------------------- "GCheckSynth"
  (GCheck Gamma gt gV)]

;; #source file ./ott/lang_simple.ott  lines 1610 - 1615 
 [
  (GSynth Gamma gt (CanonicalAtomic (AtomicSet i)))
   (side-condition ,(and (< 0 (term  i )) (< (term  i ) (term  j )))) 
  --------------------------------------------------- "GCheckLevel"
  (GCheck Gamma gt (CanonicalAtomic (AtomicSet j)))]

;; #source file ./ott/lang_simple.ott  lines 1624 - 1628 
 [
  
   (GNormCheck Gamma gU gS gV)   (ConsistentSet gV) 
        (GCheck (EnvExt x gU Gamma) gT gV) 
  ------------------------------------ "GCheckPi"
  (GCheck Gamma (TermPi x gS gT) gV)]

;; #source file ./ott/lang_simple.ott  lines 1630 - 1634 

;; #source file ./ott/lang_simple.ott  lines 1636 - 1641 
 [
   (where   z  ,(gensym)) 
    
  (GCheck (EnvExt z gU Gamma)  (substitute  gt   x   z )   (substitute  gV   y   z ) )
  ------------------------------------------------------- "GCheckLamPiRdxAlpha"
  (GCheck Gamma  (TermLam x gt)  (CanonicalPi y gU gV))]

;; #source file ./ott/lang_simple.ott  lines 1643 - 1647 
 [
    
  (GCheck (EnvExt x CanonicalDyn Gamma) gt CanonicalDyn)
  ---------------------------------------------- "GCheckLamDyn"
  (GCheck Gamma  (TermLam x gt)  CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 1648 - 1651 
 [
  (GradualSet Gamma gU)
  --------------------------- "GCheckDyn"
  (GCheck Gamma TermDyn gU)]

)
(define-judgment-form L 
 
  #:mode (GradualSetNorm I O I)
  #:contract (GradualSetNorm Gamma gU TT)

;; #source file ./ott/lang_simple.ott  lines 1666 - 1669 
 [
  (GNormSynth Gamma TT gU (CanonicalAtomic (AtomicSet i)))
  ------------------------------ "GradualSetNormSynth"
  (GradualSetNorm Gamma gU TT)]

;; #source file ./ott/lang_simple.ott  lines 1671 - 1675 
 [
  (GradualSetNorm Gamma gU (TermVar SS))
  (GradualSetNorm (EnvExt x gU Gamma) gV TT)
  ------------------------------------------------------------------------- "GradualSetNormPi"
  (GradualSetNorm Gamma (CanonicalPi x gU gV) (TermPi x (TermVar SS) TT))]

;; #source file ./ott/lang_simple.ott  lines 1677 - 1679 
 [
  --------------------------------------------- "GradualSetNormDyn"
  (GradualSetNorm Gamma CanonicalDyn TermDyn)]

)
(define-judgment-form L 
 
  #:mode (GEtaLong I I)
  #:contract (GEtaLong gv gV)

;; #source file ./ott/lang_simple.ott  lines 1685 - 1687 
 [-------------------------------------------------------- "GEtaLongAtomic"
  (GEtaLong (CanonicalAtomic grr) (CanonicalAtomic gRR))]

;; #source file ./ott/lang_simple.ott  lines 1688 - 1690 
 [----------------------------------------------- "GEtaLongAtomicDyn"
  (GEtaLong (CanonicalAtomic grr) CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 1692 - 1695 

;; #source file ./ott/lang_simple.ott  lines 1696 - 1700 
 [ (where   z  ,(gensym)) 
  (GEtaLong  (substitute  gu   x   z )   (substitute  gV   y   z ) )
  -------------------------------------------------------- "GEtaLongLamRdxAlpha"
  (GEtaLong  (CanonicalLam x gu)  (CanonicalPi y gU gV))]

;; #source file ./ott/lang_simple.ott  lines 1701 - 1703 
 [---------------------------- "GEtaLongDyn"
  (GEtaLong CanonicalDyn gU)]

;; #source file ./ott/lang_simple.ott  lines 1704 - 1706 
 [--------------------------------------- "GEtaLongPi"
  (GEtaLong (CanonicalPi x gU gV) gV_^)]

)
(define-judgment-form L 
 
  #:mode (GEtaExpand I O I)
  #:contract (GEtaExpand grr gv gV)

;; #source file ./ott/lang_simple.ott  lines 1712 - 1714 
 [-------------------------------------------------------------- "GEtaExpandAtomic"
  (GEtaExpand grr (CanonicalAtomic grr) (CanonicalAtomic gRR))]

;; #source file ./ott/lang_simple.ott  lines 1715 - 1717 
 [----------------------------------------------------- "GEtaExpandDyn"
  (GEtaExpand grr (CanonicalAtomic grr) CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 1719 - 1723 
 [(GEtaExpand  (AtomicSpine  y  SpineEmpty)  gu gU)
  (GEtaExpand (AtomicSpine x (SpineCons ge gu)) gv gV)
  ----------------------------------------------------------------------------- "GEtaExpandPi"
  (GEtaExpand (AtomicSpine x ge)  (CanonicalLam y gv)  (CanonicalPi y gU gV))]

)
(define-judgment-form L 
 
  #:mode (GEtaExpandC I O I)
  #:contract (GEtaExpandC gu gv gV)

;; #source file ./ott/lang_simple.ott  lines 1730 - 1733 
 [(GEtaExpand grr gv gV)
  ------------------------------------------- "GEtaExpandCAtomic"
  (GEtaExpandC (CanonicalAtomic grr) gv gV)]

;; #source file ./ott/lang_simple.ott  lines 1734 - 1737 

;; #source file ./ott/lang_simple.ott  lines 1738 - 1742 
 [ (where   z  ,(gensym)) 
  (GEtaExpandC  (substitute  gu   x   z )  gv  (substitute  gV   x   z ) )
  --------------------------------------------------------------------------------- "GEtaExpandCLamRdxAlpha"
  (GEtaExpandC  (CanonicalLam x gu)   (CanonicalLam z gv)  (CanonicalPi y gU gV))]

;; #source file ./ott/lang_simple.ott  lines 1743 - 1747 
 [(GEtaExpandC gU gU_^ gV_^^)
  (GEtaExpandC gV gV_^ gV_^^)
  --------------------------------------------------------------------- "GEtaExpandCPi"
  (GEtaExpandC (CanonicalPi x gU gV) (CanonicalPi x gU_^ gV_^) gV_^^)]

;; #source file ./ott/lang_simple.ott  lines 1749 - 1751 
 [-------------------------------------------- "GEtaExpandCDyn"
  (GEtaExpandC CanonicalDyn CanonicalDyn gV)]

;; #source file ./ott/lang_simple.ott  lines 1752 - 1754 
 [---------------------------------- "GEtaExpandCDynType"
  (GEtaExpandC gu gu CanonicalDyn)]

)
(define-judgment-form L 
 
  #:mode (GNormSynth I I O O)
  #:contract (GNormSynth Gamma tt gv gU)

;; #source file ./ott/lang_simple.ott  lines 1775 - 1779 
 [
  (GradualSetNorm Gamma gV TT)
  (GNormCheck Gamma gv tt gV)
  -------------------------------------------- "GNormSynthAnn"
  (GNormSynth Gamma  (TermAnn tt TT)  gv gV)]

;; #source file ./ott/lang_simple.ott  lines 1780 - 1783 
 [
   (side-condition ,(> (term  i ) 0)) 
  ------------------------------------------------------------------------------------------------------------ "GNormSynthSet"
  (GNormSynth Gamma (TermSet i) (CanonicalAtomic (AtomicSet i)) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 1785 - 1791 
 [
   (side-condition ,(not (hash-has-key? currently-defined-vars (term  x )) )) 
    
  (GVarLook x gU Gamma)
  (GEtaExpand  (AtomicSpine  x  SpineEmpty)  gv gU)
  -------------------------------------- "GNormSynthVar"
  (GNormSynth Gamma x gv gU)]

;; #source file ./ott/lang_simple.ott  lines 1792 - 1795 
 [
  
   (where (ENTTriple  es   gu   gU ) ,(and (hash-has-key? currently-defined-vars (term  x ) ) (hash-ref currently-defined-vars (term  x )) )) 
  -------------------------------------- "GNormSynthVarLook"
  (GNormSynth Gamma x gu gU)]

;; #source file ./ott/lang_simple.ott  lines 1799 - 1803 
 [
     (GNormSynth Gamma (TermVar ss) gu gV)   (GEtaExpandC gu gu_^  (error "SIMPLEPI") )    (Domain gV gV_11)    (GNormCheck Gamma gv tt gV_11) 
    (BodySub gV_11 gv gu_^ gv_^)   (CodSub gv gV gV_22)    (GEtaExpandC gv_^ gv_^^ gV_22) 
  ---------------------------------------------------------- "GNormSynthApp"
  (GNormSynth Gamma (TermApp (TermVar ss) tt) gv_^^ gV_22)]

)
(define-judgment-form L 
 
  #:mode (GNormCheck I O I I)
  #:contract (GNormCheck Gamma gv tt gU)

;; #source file ./ott/lang_simple.ott  lines 1811 - 1815 
 [
  (GNormSynth Gamma tt gu gV)
  (GNormSynthCheck Gamma gu_^ tt gu gV gU)
  ------------------------------- "GNormCheckSynthOpt"
  (GNormCheck Gamma gu_^ tt gU)]

;; #source file ./ott/lang_simple.ott  lines 1816 - 1822 

;; #source file ./ott/lang_simple.ott  lines 1824 - 1830 

;; #source file ./ott/lang_simple.ott  lines 1831 - 1836 

;; #source file ./ott/lang_simple.ott  lines 1838 - 1846 
 [
  (ConsistentSet gV)
  (GNormCheck Gamma gU_11 (TermVar SS) gV)
    
  (GNormCheck (EnvExt x gU_11 Gamma) gU_22 TT gV)
  ------------------------------------------------------------------------------ "GNormCheckPi"
  (GNormCheck Gamma (CanonicalPi x gU_11 gU_22) (TermPi x (TermVar SS) TT) gV)]

;; #source file ./ott/lang_simple.ott  lines 1847 - 1851 

;; #source file ./ott/lang_simple.ott  lines 1852 - 1857 
 [
   (where   z  ,(gensym)) 
    
  (GNormCheck (EnvExt z gU Gamma) gv  (substitute  tt   x   z )   (substitute  gV   y   z ) )
  --------------------------------------------------------------------------------- "GNormCheckLamPiRdxAlpha"
  (GNormCheck Gamma  (CanonicalLam z gv)   (TermLam x tt)  (CanonicalPi y gU gV))]

;; #source file ./ott/lang_simple.ott  lines 1858 - 1862 
 [
    
  (GNormCheck (EnvExt x CanonicalDyn Gamma) gv tt CanonicalDyn)
  ------------------------------------------------------------------------ "GNormCheckLamDyn"
  (GNormCheck Gamma  (CanonicalLam x gv)   (TermLam x tt)  CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 1863 - 1866 
 [
  (GradualSet Gamma gU)
  -------------------------------------------- "GNormCheckDyn"
  (GNormCheck Gamma CanonicalDyn TermDyn gU)]

;; #source file ./ott/lang_simple.ott  lines 1868 - 1873 
 [
  (GNormSynth Gamma ett gv gV)
  (Meet gU gV gV)
  ------------------------------------------ "GNormCheckEvUp"
  (GNormCheck Gamma gv (TermEp ep ett) gU)]

;; #source file ./ott/lang_simple.ott  lines 1874 - 1880 
 [
  (GNormSynth Gamma ett gv gV)
  (Meet gU gV gU_^)
   (side-condition ,(not (alpha-equivalent? L (term  gU_^ ) (term  gV )))) 
  ---------------------------------------------------- "GNormCheckEvDown"
  (GNormCheck Gamma CanonicalDyn (TermEp ep ett) gU)]

;; #source file ./ott/lang_simple.ott  lines 1882 - 1884 
 [
  -------------------------------------------- "GNormCheckDynAnn"
  (GNormCheck Gamma CanonicalDyn TermDyn gU)]

)
(define-judgment-form L 
 
  #:mode (GNormSynthCheck I O I I I I)
  #:contract (GNormSynthCheck Gamma gu tt gv gV gU)

;; #source file ./ott/lang_simple.ott  lines 1890 - 1893 
 [
   (side-condition ,(and (< 0 (term  i )) (< (term  i ) (term  j )))) 
  -------------------------------------------------------------------------------------------------- "GNormSynthCheckLevel"
  (GNormSynthCheck Gamma gu tt gu (CanonicalAtomic (AtomicSet i)) (CanonicalAtomic (AtomicSet j)))]

;; #source file ./ott/lang_simple.ott  lines 1894 - 1898 
 [
  (Meet gU gV gV_^)
   (where  gu  ,(if (alpha-equivalent? (term  gV ) (term  gV_^ )) (term  gv ) (term  CanonicalDyn ))) 
  ---------------------------------------- "GNormSynthCheckConsistent"
  (GNormSynthCheck Gamma gu tt gv gV gU)]

)
(define-judgment-form L 
 
  #:mode (GElabSynthCheck I O I I I I)
  #:contract (GElabSynthCheck Gamma es tt et gV gU)

;; #source file ./ott/lang_simple.ott  lines 1904 - 1907 
 [
  
   (side-condition ,(and (< 0 (term  i )) (< (term  i ) (term  j )))) 
  -------------------------------------------------------------------------------------------------- "GElabSynthCheckLevel"
  (GElabSynthCheck Gamma es tt es (CanonicalAtomic (AtomicSet i)) (CanonicalAtomic (AtomicSet j)))]

;; #source file ./ott/lang_simple.ott  lines 1911 - 1915 
 [
  
  (Meet gU gV gV_^)
  ------------------------------------------------------------------------- "GElabSynthCheckConsistent"
  (GElabSynthCheck Gamma (TermEp (EvidenceEv Gamma gV_^) es) tt es gV gU)]

)
(define-judgment-form L 
 
  #:mode (GradualNESynthCheck I O O I I I I I)
  #:contract (GradualNESynthCheck Gamma gu es gs gv et gV gU)

;; #source file ./ott/lang_simple.ott  lines 1921 - 1924 
 [
  
   (side-condition ,(and (< 0 (term  i )) (< (term  i ) (term  j )))) 
  ------------------------------------------------------------------------------------------------------------ "GradualNESynthCheckLevel"
  (GradualNESynthCheck Gamma gv es gs gv es (CanonicalAtomic (AtomicSet i)) (CanonicalAtomic (AtomicSet j)))]

;; #source file ./ott/lang_simple.ott  lines 1930 - 1934 
 [
  
  (Meet gU gV gV_^)
   (where  gu  ,(if (alpha-equivalent? (term  gV ) (term  gV_^ )) (term  gv ) (term  CanonicalDyn ))) 
  ----------------------------------------------------------------------------------- "GradualNESynthCheckConsistent"
  (GradualNESynthCheck Gamma gu (TermEp (EvidenceEv Gamma gV_^) es) gs gv es gV gU)]

)
(define-judgment-form L 
 
  #:mode (GElabSynth I I O O)
  #:contract (GElabSynth Gamma gt et gU)

;; #source file ./ott/lang_simple.ott  lines 1940 - 1944 
 [
  
  (GradualSetNorm Gamma gV gT)
  (GElabCheck Gamma et gt gV)
  -------------------------------------------- "GElabSynthAnn"
  (GElabSynth Gamma  (TermAnn gt gT)  et gV)]

;; #source file ./ott/lang_simple.ott  lines 1945 - 1948 
 [
   (side-condition ,(> (term  i ) 0)) 
  ---------------------------------------------------------------------------------------- "GElabSynthSet"
  (GElabSynth Gamma (TermSet i) (TermSet i) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 1950 - 1955 
 [
   (side-condition ,(not (hash-has-key? currently-defined-vars (term  x )) )) 
    
  (GVarLook x gU Gamma)
  ----------------------------------------------- "GElabSynthVar"
  (GElabSynth Gamma x x gU)]

;; #source file ./ott/lang_simple.ott  lines 1956 - 1959 
 [
  
   (where (ENTTriple  es   gu   gU ) ,(and (hash-has-key? currently-defined-vars (term  x ) ) (hash-ref currently-defined-vars (term  x )) )) 
  -------------------------------------- "GElabSynthVarLook"
  (GElabSynth Gamma x es gU)]

;; #source file ./ott/lang_simple.ott  lines 1963 - 1969 
 [
  
  (GElabSynth Gamma gs es gV)
  (Domain gV gV_11)
  (GradualNECheck Gamma gv et gt gV_11)
  (CodSub gv gV gV_22)
  ---------------------------------------------------------- "GElabSynthApp"
  (GElabSynth Gamma (TermApp gs gt) (TermApp es et) gV_22)]

)
(define-judgment-form L 
 
  #:mode (GElabCheck I O I I)
  #:contract (GElabCheck Gamma et gt gU)

;; #source file ./ott/lang_simple.ott  lines 1987 - 1991 
 [
  
  (GElabSynth Gamma gt et gV)
  (GElabSynthCheck Gamma es gt et gV gU)
  ----------------------------- "GElabCheckSynthOpt"
  (GElabCheck Gamma es gt gU)]

;; #source file ./ott/lang_simple.ott  lines 1992 - 1998 

;; #source file ./ott/lang_simple.ott  lines 1999 - 2004 

;; #source file ./ott/lang_simple.ott  lines 2014 - 2022 
 [
  (ConsistentSet gV)
  (GradualNECheck Gamma gU eS gS gV)
    
  (GElabCheck (EnvExt x gU Gamma) eT gT gV)
  --------------------------------------------------------- "GElabCheckPi"
  (GElabCheck Gamma (TermPi x eS eT) (TermPi x gS gT) gV)]

;; #source file ./ott/lang_simple.ott  lines 2023 - 2027 

;; #source file ./ott/lang_simple.ott  lines 2028 - 2033 
 [
   (where   z  ,(gensym)) 
    
  (GElabCheck (EnvExt z gU Gamma) et  (substitute  gt   x   z )   (substitute  gV   y   z ) )
  ---------------------------------------------------------------------------- "GElabCheckLamPiRdxAlpha"
  (GElabCheck Gamma  (TermLam z et)   (TermLam x gt)  (CanonicalPi y gU gV))]

;; #source file ./ott/lang_simple.ott  lines 2034 - 2038 
 [
    
  (GElabCheck (EnvExt x CanonicalDyn Gamma) et gt CanonicalDyn)
  ------------------------------------------------------------------- "GElabCheckLamDyn"
  (GElabCheck Gamma  (TermLam x et)   (TermLam x gt)  CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 2039 - 2042 
 [
  (GradualSet Gamma gU)
  ---------------------------------------------------------------------- "GElabCheckDyn"
  (GElabCheck Gamma (TermEp (EvidenceEv Gamma gU) TermDyn) TermDyn gU)]

)
(define-judgment-form L 
 
  #:mode (GradualNESynth I I O O O)
  #:contract (GradualNESynth Gamma gt et gu gU)

;; #source file ./ott/lang_simple.ott  lines 2056 - 2060 
 [
  
  (GradualSetNorm Gamma gV gT)
  (GradualNECheck Gamma gu et gt gV)
  --------------------------------------------------- "GradualNESynthAnn"
  (GradualNESynth Gamma  (TermAnn gt gT)  et gu gV)]

;; #source file ./ott/lang_simple.ott  lines 2061 - 2064 
 [
   (side-condition ,(> (term  i ) 0)) 
  ---------------------------------------------------------------------------------------------------------------------------- "GradualNESynthSet"
  (GradualNESynth Gamma (TermSet i) (TermSet i) (CanonicalAtomic (AtomicSet i)) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 2066 - 2072 
 [
   (side-condition ,(not (hash-has-key? currently-defined-vars (term  x )) )) 
    
  (GVarLook x gU Gamma)
  (GEtaExpand  (AtomicSpine  x  SpineEmpty)  gv gU)
  ------------------------------------------------------ "GradualNESynthVar"
  (GradualNESynth Gamma x x gv gU)]

;; #source file ./ott/lang_simple.ott  lines 2073 - 2076 
 [
  
   (where (ENTTriple  es   gu   gU ) ,(and (hash-has-key? currently-defined-vars (term  x ) ) (hash-ref currently-defined-vars (term  x )) )) 
  --------------------------------------------- "GradualNESynthVarLook"
  (GradualNESynth Gamma x es gu gU)]

;; #source file ./ott/lang_simple.ott  lines 2080 - 2089 
 [
  
  (GradualNESynth Gamma gs es gu gV)
  (GEtaExpandC gu gu_^  (error "SIMPLEPI") )
  (Domain gV gV_11)
  (GradualNECheck Gamma gv et gt gV_11)
  (BodySub gV_11 gv gu_^ gv_^)
  (CodSub gv gV gV_22)
  (GEtaExpandC gv_^ gv_^^ gV_22)
  -------------------------------------------------------------------- "GradualNESynthApp"
  (GradualNESynth Gamma (TermApp gs gt) (TermApp es et) gv_^^ gV_22)]

)
(define-judgment-form L 
 
  #:mode (GradualNECheck I O O I I)
  #:contract (GradualNECheck Gamma gu et gt gU)

;; #source file ./ott/lang_simple.ott  lines 2108 - 2112 
 [
  (GradualNESynth Gamma gt et gu gV)
  (GradualNESynthCheck Gamma gu_^ et_^ gt gu et gV gU)
  ---------------------------------------- "GradualNECheckSynthOpt"
  (GradualNECheck Gamma gu_^ et_^ gt gU)]

;; #source file ./ott/lang_simple.ott  lines 2113 - 2120 

;; #source file ./ott/lang_simple.ott  lines 2121 - 2126 

;; #source file ./ott/lang_simple.ott  lines 2136 - 2144 
 [
  (ConsistentSet gV)
  (GradualNECheck Gamma gU_11 eS gS gV)
    
  (GradualNECheck (EnvExt x gU_11 Gamma) gU_22 eT gT gV)
  ----------------------------------------------------------------------------------------- "GradualNECheckPi"
  (GradualNECheck Gamma (CanonicalPi x gU_11 gU_22) (TermPi x eS eT) (TermPi x gS gT) gV)]

;; #source file ./ott/lang_simple.ott  lines 2145 - 2149 

;; #source file ./ott/lang_simple.ott  lines 2150 - 2155 
 [
   (where   z  ,(gensym)) 
    
  (GradualNECheck (EnvExt z gU Gamma) gu et  (substitute  gt   x   z )   (substitute  gV   y   z ) )
  ------------------------------------------------------------------------------------------------------ "GradualNECheckLamPiRdxAlpha"
  (GradualNECheck Gamma  (CanonicalLam z gu)   (TermLam z et)   (TermLam x gt)  (CanonicalPi y gU gV))]

;; #source file ./ott/lang_simple.ott  lines 2156 - 2160 
 [
    
  (GradualNECheck (EnvExt x CanonicalDyn Gamma) gu et gt CanonicalDyn)
  --------------------------------------------------------------------------------------------- "GradualNECheckLamDyn"
  (GradualNECheck Gamma  (CanonicalLam x gu)   (TermLam x et)   (TermLam x gt)  CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 2161 - 2164 
 [
  (GradualSet Gamma gU)
  --------------------------------------------------------------------------------------- "GradualNECheckDyn"
  (GradualNECheck Gamma CanonicalDyn (TermEp (EvidenceEv Gamma gU) TermDyn) TermDyn gU)]
)
;; #source file ./ott/lang_simple.ott  lines 2172 - 2172 
#| 

;;; definitions 

(define-judgment-form
  L
  #:mode (EvType I I I)
  #:contract (EvType Gamma et gU)

;; #source file ./ott/lang_simple.ott  lines 2185 - 2189 
 [
    
  (GVarLook x gU Gamma)
  ------------------------------- "EvTypeVar"
  (EvType Gamma x gU)]

;; #source file ./ott/lang_simple.ott  lines 2193 - 2198 
 [
  
  (EvType Gamma es gV)
  (EvType Gamma et  (error "TODO") )
  (EvCod et gV gV_22)
  -------------------------------------- "EvTypeApp"
  (EvType Gamma (TermApp es et) gV_22)]

;; #source file ./ott/lang_simple.ott  lines 2204 - 2210 
 [
  
  (ConsistentSet gV)
  (GNormCheck Gamma gU eS gV)
    
  (EvType (EnvExt x gU Gamma) eT gV)
  ------------------------------------ "EvTypePi"
  (EvType Gamma (TermPi x eS eT) gV)]

;; #source file ./ott/lang_simple.ott  lines 2211 - 2214 
 [
   (side-condition ,(> (term  i ) 0)) 
  ------------------------------------------------------------------------ "EvTypeSet"
  (EvType Gamma (TermSet i) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 2216 - 2220 
 [
  (EvType Gamma et gU)
  (EvConsistent ep gU gV)
  ---------------------------------- "EvTypeEv"
  (EvType Gamma (TermEp ep et) gV)]

;; #source file ./ott/lang_simple.ott  lines 2221 - 2225 
 [
  (EvType Gamma et (CanonicalAtomic (AtomicSet i)))
   (side-condition ,(and (< 0 (term  i )) (< (term  i ) (term  j )))) 
  --------------------------------------------------- "EvTypeLevel"
  (EvType Gamma et (CanonicalAtomic (AtomicSet j)))]

;; #source file ./ott/lang_simple.ott  lines 2230 - 2234 
 [
    
  (EvType (EnvExt x gU Gamma) et gV)
  ------------------------------------------------------- "EvTypeLamPi"
  (EvType Gamma  (TermLam x et)  (CanonicalPi x gU gV))]

;; #source file ./ott/lang_simple.ott  lines 2236 - 2240 
 [
    
  (EvType (EnvExt x CanonicalDyn Gamma) et CanonicalDyn)
  ---------------------------------------------- "EvTypeLamDyn"
  (EvType Gamma  (TermLam x et)  CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 2241 - 2245 
 [
  (GradualSet Gamma gU)
  (EvConsistent ep gU gU)
  --------------------------------------- "EvTypeDyn"
  (EvType Gamma (TermEp ep TermDyn) gU)]
)
;; #source file ./ott/lang_simple.ott  lines 2248 - 2248 
|# 

;;; definitions 

(define-judgment-form
  L
  #:mode (SimpleStep I O)
  #:contract (SimpleStep t_11 t_22)

;; #source file ./ott/lang_simple.ott  lines 2262 - 2264 
 [
  ---------------------------------- "SimpleStepAnn"
  (SimpleStep  (TermAnn sv T)  sv)]

;; #source file ./ott/lang_simple.ott  lines 2265 - 2267 
 [
  
  ------------------------------------------------------------------- "SimpleStepApp"
  (SimpleStep (TermApp  (TermLam x t)  sv)  (esubst  t   x   sv ) )]

;; #source file ./ott/lang_simple.ott  lines 2269 - 2272 
 [
  
  (SimpleStep t_11 t_22)
  -------------------------------------------------------------- "SimpleStepContext"
  (SimpleStep  (in-hole  SC   t_11 )   (in-hole  SC   t_22 ) )]

)
(define-judgment-form L 
 
  #:mode (Step I O)
  #:contract (Step es et)

;; #source file ./ott/lang_simple.ott  lines 2280 - 2283 
 [
  (Meet gU_11 gU_22 gU_33)
  ------------------------------------------------------------------------------------------------------------------------------------------- "StepAscr"
  (Step (TermEp  (EvidenceEv EnvEmpty  gU_11 )   (TermEp  (EvidenceEv EnvEmpty  gU_22 )  rv) ) (TermEp  (EvidenceEv EnvEmpty  gU_33 )  rv))]

;; #source file ./ott/lang_simple.ott  lines 2286 - 2290 
 [
   (side-condition ,(empty? (judgment-holds (Meet  gU_11   gU_22  ep_9999) ep_9999))) 
   (side-condition ,(error 'RuntimeError "Can't cast:\n    ~a\nto\n   ~a\nin term ~a" (printEvType (term  ep_11 )) (printEvType (term  ep_22 )) (pt (term  rv )) )) 
  --------------------------------------------------------------------------------------------------------- "StepAscrFail"
  (Step (TermEp  (EvidenceEv EnvEmpty  gU_11 )   (TermEp  (EvidenceEv EnvEmpty  gU_22 )  rv) ) TermError)]

;; #source file ./ott/lang_simple.ott  lines 2294 - 2296 
 [
  --------------------------------------------------------------- "StepApp"
  (Step (TermApp  (TermLam x et)  ev)  (esubst  et   x   ev ) )]

;; #source file ./ott/lang_simple.ott  lines 2303 - 2306 
 [
    (Domain gU_11 gU_33)   (Meet gU_22 gU_33 gU_44)    (EvCod rv gU_11 gU_55) 
  ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- "StepAppEv"
  (Step (TermApp  (TermEp  (EvidenceEv EnvEmpty  gU_11 )   (TermLam x et) )   (TermEp  (EvidenceEv EnvEmpty  gU_22 )  rv) ) (TermEp  (EvidenceEv EnvEmpty  gU_55 )    (esubst  et   x   (TermEp  (EvidenceEv EnvEmpty  gU_44 )  rv) )  ))]

;; #source file ./ott/lang_simple.ott  lines 2309 - 2312 
 [
  (EvCod ev gU_11 gU_22)
  ------------------------------------------------------------------------------------------------------------------------- "StepAppDyn"
  (Step (TermApp  (TermEp  (EvidenceEv EnvEmpty  gU_11 )  TermDyn)  ev) (TermEp  (EvidenceEv EnvEmpty  gU_22 )  TermDyn))]

;; #source file ./ott/lang_simple.ott  lines 2313 - 2317 
 [
  
   (Domain gU_11 gU_22)   (EvCod rv gU_11 gU_33) 
  (Step (TermApp  (TermEp  (EvidenceEv EnvEmpty  gU_11 )   (TermLam x et) )   (TermEp  (EvidenceEv EnvEmpty  CanonicalDyn )  rv) ) es)
  ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- "StepAppEvRaw"
  (Step (TermApp  (TermEp  (EvidenceEv EnvEmpty  gU_11 )   (TermLam x et) )  rv) (TermEp  (EvidenceEv EnvEmpty  gU_33 )    (esubst  et   x   (TermEp  (EvidenceEv EnvEmpty  gU_22 )  rv) )  ))]

;; #source file ./ott/lang_simple.ott  lines 2319 - 2323 
 [
  
   (side-condition ,(empty? (judgment-holds (Meet    (error "TODO")     gU_22  ep_9999) ep_9999))) 
   (side-condition ,(error 'RuntimeError "Can't cast:\n    ~a\nto\n   ~a\nin term ~a" (printEvType (term  ep_33 )) (printEvType (term  ep_22 )) (pt (term   (TermApp ru rv)  )) )) 
  ------------------------------------------------------------------------------------------------------------------------ "StepAppFailTrans"
  (Step (TermApp  (TermEp  (EvidenceEv EnvEmpty  gU_11 )  ru)   (TermEp  (EvidenceEv EnvEmpty  gU_22 )  rv) ) TermError)]

;; #source file ./ott/lang_simple.ott  lines 2329 - 2333 
 [
  
   (side-condition ,(empty? (judgment-holds (Domain  gU  gV_9999) gV_9999))) 
   (side-condition ,(error 'RuntimeError "Can't cast:\n    ~a\nto\n   ~a\nin term ~a" (printEvType (term  ep_11 )) (printEvType (term   (EvidenceEv EnvEmpty  (CanonicalPi x CanonicalDyn CanonicalDyn) )  )) (pt (term   (TermApp rv ev)  )) )) 
  -------------------------------------------------------------------------- "StepAppFailDom"
  (Step (TermApp  (TermEp  (EvidenceEv EnvEmpty  gU )  rv)  ev) TermError)]

;; #source file ./ott/lang_simple.ott  lines 2346 - 2350 
 [
  (Step es et)
   (side-condition ,(not (or (alpha-equivalent? L (term  es ) (term TermError)) (alpha-equivalent? L (term  et ) (term TermError)) ))) 
  ---------------------------------------------------- "StepContext"
  (Step  (in-hole  EC   es )   (in-hole  EC   et ) )]

;; #source file ./ott/lang_simple.ott  lines 2351 - 2354 
 [
  (Step es TermError)
  ---------------------------------------- "StepContextErr"
  (Step  (in-hole  EC   es )  TermError)]

)
(define-judgment-form L 
 
  #:mode (EvCod I I O)
  #:contract (EvCod et gU_11 gU_22)

;; #source file ./ott/lang_simple.ott  lines 2395 - 2399 
 [
  (GNormCheck EnvEmpty gu et  (error "TODO") )
  (CodSub gu gU gU_22)
  --------------------- "EvCodSub"
  (EvCod et gU gU_22)]
)
;; #source file ./ott/lang_simple.ott  lines 2415 - 2429 
(define-judgment-form
  L
  #:mode (ElabNormType I I O)
  [ (GradualNESynth Gamma gs es gu gU)
  ---------------------------------
  (ElabNormType Gamma gs (ENTTriple es gu gU))]

)

