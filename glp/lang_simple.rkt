;; #source  
;;; generated by Ott 0.28 from: ./ott/lang_simple.ott

#lang racket
(require redex/reduction-semantics)

;; #source file ./ott/lang_simple.ott  lines 4 - 6 
;; #source file ./ott/lang_simple.ott  lines 8 - 10 
(provide (all-defined-out))

;; #source file ./ott/lang_simple.ott  lines 12 - 80 
;; #source file ./ott/lang_simple.ott  lines 85 - 87 
;; #source file ./ott/lang_simple.ott  lines 90 - 90 
;; #source file ./ott/lang_simple.ott  lines 96 - 104 and file ./ott/lang_simple.ott  lines 109 - 134 and file ./ott/lang_simple.ott  lines 139 - 148 and file ./ott/lang_simple.ott  lines 150 - 155 and file ./ott/lang_simple.ott  lines 157 - 162 and file ./ott/lang_simple.ott  lines 165 - 170 and file ./ott/lang_simple.ott  lines 172 - 174 and file ./ott/lang_simple.ott  lines 179 - 200 and file ./ott/lang_simple.ott  lines 205 - 215 and file ./ott/lang_simple.ott  lines 217 - 222 and file ./ott/lang_simple.ott  lines 224 - 227 and file ./ott/lang_simple.ott  lines 235 - 237 and file ./ott/lang_simple.ott  lines 245 - 256 and file ./ott/lang_simple.ott  lines 260 - 266 and file ./ott/lang_simple.ott  lines 269 - 274 and file ./ott/lang_simple.ott  lines 276 - 284 and file ./ott/lang_simple.ott  lines 288 - 290 and file ./ott/lang_simple.ott  lines 301 - 307 and file ./ott/lang_simple.ott  lines 309 - 315 and file ./ott/lang_simple.ott  lines 361 - 364 and file ./ott/lang_simple.ott  lines 366 - 370 and file ./ott/lang_simple.ott  lines 372 - 376 and file ./ott/lang_simple.ott  lines 490 - 495 and file ./ott/lang_simple.ott  lines 498 - 500 and file ./ott/lang_simple.ott  lines 502 - 504 and file ./ott/lang_simple.ott  lines 506 - 507 
(define-language L  

(level i j ::= natural)

;; #source file ./ott/lang_simple.ott  lines 205 - 215 
  (canonical gu gv gU gV ::= 
    (CanonicalLam var gu)
    CanonicalDyn
    (CanonicalAtomic grr)
    (CanonicalPi var gU gV))
  ;grammar_pp, 2817: and 
;; #source file ./ott/lang_simple.ott  lines 217 - 222 
  (atomic grr gRR ::= 
    (AtomicSpine var ge)
    (AtomicSet i))
  ;grammar_pp, 2817: and 
;; #source file ./ott/lang_simple.ott  lines 224 - 227 
  (spine ge ::= 
    SpineEmpty
    (SpineCons ge gu))

;; #source file ./ott/lang_simple.ott  lines 372 - 376 
  (Env ::= 
    EnvEmpty
    (EnvExt var gU Env)
    (Envconcat Env_11 Env_22))

;; #source file ./ott/lang_simple.ott  lines 235 - 237 
  (epsilon ep ::= 
    (EvidenceEv Gamma gU gV))

;; #source file ./ott/lang_simple.ott  lines 109 - 134 
  (term ss tt ett SS TT ::= 
    (TermLam var tt)
    (TermApp ss tt)
    var
    (TermSet i)
    (TermPi var SS TT)
    (TermAnn tt TT)
    (TermEp ep ss)
    TermDyn
    (TermDynAnn Gamma gU)
    TermError)

(iinf ::= number)

;; #source file ./ott/lang_simple.ott  lines 506 - 507 
  (esgU ::= 
    (ElabTypePair es gU))

;; #source file ./ott/lang_simple.ott  lines 301 - 307 
  (simpleContext SC ::= 
    (TermPi x hole T)
    (TermPi x sV hole)
    (TermApp hole t)
    (TermApp sv hole)
    (TermAnn hole T))

;; #source file ./ott/lang_simple.ott  lines 502 - 504 
  (iinfs jinfs ::= 
    (UniverseMultiSetSingleton iinf)
    (UniverseMultiSetSum iinfs jinfs))

;; #source file ./ott/lang_simple.ott  lines 498 - 500 
  (is js ::= 
    (LevelMultiSetSingleton i)
    (LevelMultiSetSum is js))

;; #source file ./ott/lang_simple.ott  lines 288 - 290 
  (dummyeu dummyev dummyeueU dummyeueV ::= 
    (DummyEvidenceValueEv ep rv)
    (DummyEvidenceValueRaw rv))

;; #source file ./ott/lang_simple.ott  lines 309 - 315 
  (evalContext EC ::= 
    (TermPi x hole eT)
    (TermApp hole et)
    (TermApp ev hole)
    (TermEp ep hole))

;; #source file ./ott/lang_simple.ott  lines 179 - 200 
  (gs gt gS gT ::= 
    (TermLam var gt)
    (TermApp gs gt)
    var
    (TermSet i)
    (TermPi var gS gT)
    (TermAnn gt gT)
    TermDyn)

;; #source file ./ott/lang_simple.ott  lines 276 - 284 
  (eu ev eU eV ::= 
    (TermEp ep rv)
    (TermPi var eU eT)
    (TermLam var et)
    (TermSet i)
    (TermDynAnn Gamma gU))

;; #source file ./ott/lang_simple.ott  lines 366 - 370 
  (Gamma ::= 
    EnvEmpty
    (EnvExt var gU Gamma)
    (Envconcat Gamma_11 Gamma_22))

;; #source file ./ott/lang_simple.ott  lines 260 - 266 
  (ru rv rU rV ::= 
    (TermPi var eU eV)
    (TermLam var et)
    (TermSet i)
    (TermDynAnn Gamma gU))

;; #source file ./ott/lang_simple.ott  lines 165 - 170 
  (rr RR ::= 
    (AtomicSpine var e)
    (AtomicSet i))

;; #source file ./ott/lang_simple.ott  lines 172 - 174 
  (e ::= 
    SpineEmpty
    (SpineCons e u))

;; #source file ./ott/lang_simple.ott  lines 269 - 274 
  (simpleValue su sv sU sV ::= 
    (TermPi var sU sV)
    (TermLam var ta)
    (TermSet i))

;; #source file ./ott/lang_simple.ott  lines 361 - 364 
  (SGamma ::= 
    EnvEmpty
    (EnvExt var U SGamma)
    (Envconcat SGamma_11 SGamma_22))

;; #source file ./ott/lang_simple.ott  lines 157 - 162 
  (u v U V ::= 
    (CanonicalLam var u)
    (CanonicalAtomic rr)
    (CanonicalPi var U V))

;; #source file ./ott/lang_simple.ott  lines 245 - 256 
  (es et eS eT ::= 
    (TermPi var eS eT)
    (TermLam var et)
    var
    (TermApp es et)
    (TermDynAnn Gamma gU)
    (TermSet i)
    (TermEp ep es)
    TermError)

;; #source file ./ott/lang_simple.ott  lines 150 - 155 
  (sa ta Sa Ta ::= 
    (TermLam var ta)
    (TermApp sa ta)
    var
    (TermPi var Sa Ta)
    (TermSet i))

;; #source file ./ott/lang_simple.ott  lines 139 - 148 
  (s t S T ::= 
    (TermLam var t)
    (TermApp s t)
    var
    (TermPi var S T)
    (TermSet i)
    (TermAnn t T))
   (var x y z X Y Z ::= variable-not-otherwise-mentioned)

    #:binding-forms

    (TermLam x tt #:refers-to (shadow x))
    (TermPi x SS TT #:refers-to (shadow x))
    (StaticTermLam x t #:refers-to (shadow x))
    (StaticTermPi x S T #:refers-to (shadow x))
    (StaticTermNoAnnLam x ta #:refers-to (shadow x))
    (StaticTermNoAnnPi x Sa Ta #:refers-to (shadow x))
    (StaticCanonicalLam x u #:refers-to (shadow x))

    (GradualTermLam x gt #:refers-to (shadow x))
    (GradualTermPi x gS gT #:refers-to (shadow x))
    (CanonicalLam x gu #:refers-to (shadow x))
    (CanonicalPi x gU gV #:refers-to (shadow x))

    (EvidenceTermPi x eS eT #:refers-to (shadow x))
    (EvidenceTermLam x et #:refers-to (shadow x))
    (RawValueLam x et #:refers-to (shadow x))
    (SimpleValuePi x sU sV #:refers-to (shadow x))
    (SimpleValueLam x ta)
    (EvidenceValuePi x eU eT #:refers-to (shadow x))
    (EvidenceValueLam x et #:refers-to (shadow x))

)

;;;; subrules 
;; #source file ./ott/lang_simple.ott  lines 520 - 520 and file ./ott/lang_simple.ott  lines 521 - 521 and file ./ott/lang_simple.ott  lines 524 - 524 and file ./ott/lang_simple.ott  lines 525 - 525 and file ./ott/lang_simple.ott  lines 526 - 526 and file ./ott/lang_simple.ott  lines 527 - 527 and file ./ott/lang_simple.ott  lines 528 - 528 and file ./ott/lang_simple.ott  lines 530 - 530 and file ./ott/lang_simple.ott  lines 531 - 531 and file ./ott/lang_simple.ott  lines 532 - 532 and file ./ott/lang_simple.ott  lines 533 - 533 and file ./ott/lang_simple.ott  lines 534 - 534 and file ./ott/lang_simple.ott  lines 536 - 536 and file ./ott/lang_simple.ott  lines 537 - 537 and file ./ott/lang_simple.ott  lines 538 - 538 and file ./ott/lang_simple.ott  lines 541 - 541 
;; #source file ./ott/lang_simple.ott  lines 552 - 563 
;; #source file ./ott/lang_simple.ott  lines 565 - 650 

(define-metafunction L 
  succ : i -> i
  [(succ i) ,(+ (term i) 1)])
  
  (define-metafunction L 
  pred : i -> i
  [(pred i) ,(- (term i) 1)])

(define-metafunction L 
  esubst : et var et -> et 
  [(esubst x_old x_old et_new) et_new ]
  [(esubst x_old y et_new) y ]
  [(esubst (TermPi y eS eT) x_old et_new) 
    (TermPi z (esubst eS x_old et_new) (esubst (substitute eT x z) x_old et_new ))
    (where   z  ,(gensym)) ] 
  [(esubst (TermLam y es) x_old et_new) 
    (TermLam z (esubst (substitute es x z) x_old et_new ))
    (where   z  ,(gensym)) ]
  [(esubst (TermApp es et)) (TermApp (esubst es x_old et_new) (esubst et x_old et_new))]
  [(esubst (TermEp (EvidenceEv Gamma gU_1 gU_2) es) x_old et_new) (TermEp (EvidenceEv Gamma_1 gU_3 gU_4) (esubst es x_old et_new))
    (judgment-holds (GVarLook x_old gV Gamma))
    (judgment-holds (GradualNormCheck Gamma gu_esnorm es gV))
    (judgment-holds (GradualEnvSub Gamma x_old gV gu_esnorm Gamma_1))
    (judgment-holds (GradualHsub  x_old gV gu_esnorm gU_1 gU_3))
    (judgment-holds (GradualHsub  x_old gV gu_esnorm gU_2 gU_4))]
  ;; TODO get rid of types on ? or add Gamma
  [(esubst es x_old et_new) es] 
)

(define-metafunction L 
 is-check-only : term -> boolean
 [(is-check-only TermDyn) #t]
 [(is-check-only (TermPi x SS TT)) #t]
 [(is-check-only (TermLam x tt)) #t]
 [(is-check-only tt) #f] 
)

(define-metafunction L 
 is-check-pair : term gU -> boolean
 [(is-check-pair TermDyn gU) #t]
 [(is-check-pair (TermPi x SS TT) (CanonicalAtomic (AtomicDyn))) #t]
 [(is-check-pair (TermPi x SS TT) (CanonicalAtomic (AtomicSet i))) #t]
 [(is-check-pair (TermLam x tt) (CanonicalAtomic (AtomicDyn))) #t]
 [(is-check-pair (TermLam x tt) (CanonicalPi y gU gV)) #t]
 [(is-check-pair tt gU) #f] 
)

(define-metafunction L 
 is-set-pair : gU gV -> boolean
 [(is-set-pair (CanonicalAtomic (AtomicSet i)) (CanonicalAtomic (AtomicSet j))) #t (side-condition (< (term i) (term j)))]
 [(is-set-pair gU gV) #f] 
)

(define (pt tm)
  (with-handlers ([exn:fail:redex?
                   (lambda (exn) (format "~a" tm))])
    (pretty-term tm)
    ))

(define pretty-term
    (term-match/single L
    [x (symbol->string (term x))]
    [(TermLam x tt) (string-append "(λ " (pt (term x)) " . " (pt (term tt)) ")")]
    [(TermPi x SS TT) (string-append "(( " (pt (term x)) " : " (pt (term SS)) ") -> " (pt (term TT)) ")")]
    [(TermSet i) (string-append "Set" (number->string (term i)))]
    [(TermApp ss tt) (string-append "(" (pt (term ss)) " " (pt (term tt)) ")")]
    [TermDyn "?"]
    [TermError "⊥"]
    [(TermAnn ss tt) (string-append (pt (term ss)) " :: " (pt (term tt)))]
    [(TermDynAnn gU) (string-append "?" (pt (term gU)))]
    [(TermEp (EvidencePair gU gV) tt) (string-append "〈" (pt (term gU)) ", " (pt (term gV)) "〉" (pt (term tt)))]
    [(CanonicalAtomic grr) (pt (term grr))]
    [(CanonicalLam x gu) (string-append "(λ " (pt (term x)) " . " (pt (term gu)) ")")]
    [(CanonicalPi x gU gV) (string-append "(( " (pt (term x)) " : " (pt (term gU)) ") -> " (pt (term gV)) ")")]
    [(AtomicSet i) (string-append "Set" (number->string (term i)))]
    [CanonicalDyn "?"]
    [(AtomicSpine x ge) (string-append "(" (pt (term x)) " " (pt (term ge)) ")")]
    [SpineEmpty ""]
    [(SpineCons ge gu) (string-append (pt (term ge)) " " (pt (term gu)))]
    
    ))

(define (printEvType ep)
 (term-let ([(EvidenceEv Gamma gU gV) ep]) (pt (term gU))))

;;; definitions 

(define-judgment-form
  L
  #:mode (GVarLook I O I)
  #:contract (GVarLook x gU Gamma)

;; #source file ./ott/lang_simple.ott  lines 659 - 661 
 [
  ------------------------------------- "GVarLookHead"
  (GVarLook x gU (EnvExt x gU Gamma))]

;; #source file ./ott/lang_simple.ott  lines 662 - 666 
 [
  (GVarLook x gU Gamma)
   (side-condition ,(not (alpha-equivalent? (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  ------------------------------------- "GVarLookTail"
  (GVarLook x gU (EnvExt y gV Gamma))]

)
(define-judgment-form L 
 
  #:mode (GVarFree I I)
  #:contract (GVarFree x Gamma)

;; #source file ./ott/lang_simple.ott  lines 670 - 672 
 [----------------------- "GFreeLookNil"
  (GVarFree x EnvEmpty)]

;; #source file ./ott/lang_simple.ott  lines 673 - 677 
 [
   (side-condition ,(not (alpha-equivalent? (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  (GVarFree x Gamma)
  ---------------------------------- "GFreeLookCons"
  (GVarFree x (EnvExt y gU Gamma))]
)

;;; definitions 

(define-judgment-form
  L
  #:mode (Universe I I O)
  #:contract (Universe Gamma gu iinf)

;; #source file ./ott/lang_simple.ott  lines 698 - 701 
 [
   (side-condition ,(> (term  i ) 0)) 
  ----------------------------------------------------------------- "UniverseSet"
  (Universe Gamma (CanonicalAtomic (AtomicSet i))   (succ  i )  )]

;; #source file ./ott/lang_simple.ott  lines 702 - 707 
 [
  (GVarLook x gV Gamma)
  (Universe Gamma gV  i )
   (side-condition ,(> (term  i ) 0)) 
  ---------------------------------------------------------------------------------- "UniverseVar"
  (Universe Gamma (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) )   (pred  i )  )]

;; #source file ./ott/lang_simple.ott  lines 708 - 712 
 [
  (Universe Gamma gU  i )
  (Universe (EnvExt x gU Gamma) gV  j )
  ------------------------------------------------------------ "UniversePi"
  (Universe Gamma (CanonicalPi x gU gV)  (max   i     j  ) )]

;; #source file ./ott/lang_simple.ott  lines 713 - 716 
 [
  (Universe Gamma gu  i )
  -------------------------------------------- "UniverseLam"
  (Universe Gamma  (CanonicalLam x gu)   i )]

;; #source file ./ott/lang_simple.ott  lines 717 - 721 
 [
  (Universe Gamma (CanonicalAtomic (AtomicSpine x ge))  i )
  (Universe Gamma gv  j )
  ------------------------------------------------------------------------------------------ "UniverseSpine"
  (Universe Gamma (CanonicalAtomic (AtomicSpine x (SpineCons ge gv)))  (max   i     j  ) )]

;; #source file ./ott/lang_simple.ott  lines 722 - 724 
 [
  ---------------------------------------- "UniverseDyn"
  (Universe Gamma CanonicalDyn  +inf.0 )]

)
(define-judgment-form L 
 
  #:mode (SUniverse I I O)
  #:contract (SUniverse SGamma u i)

;; #source file ./ott/lang_simple.ott  lines 730 - 733 
 [
   (side-condition ,(> (term  i ) 0)) 
  ----------------------------------------------------------------- "SUniverseSet"
  (SUniverse SGamma (CanonicalAtomic (AtomicSet i))  (succ  i ) )]

;; #source file ./ott/lang_simple.ott  lines 734 - 739 
 [
  (GVarLook x V SGamma)
  (SUniverse SGamma V i)
   (side-condition ,(> (term  i ) 0)) 
  ---------------------------------------------------------------------------------- "SUniverseVar"
  (SUniverse SGamma (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) )  (pred  i ) )]

;; #source file ./ott/lang_simple.ott  lines 741 - 745 
 [
  (SUniverse SGamma U i)
  (SUniverse (EnvExt x U SGamma) V j)
  -------------------------------------------------------- "SUniversePi"
  (SUniverse SGamma (CanonicalPi x U V)  (max  i   j ) )]

;; #source file ./ott/lang_simple.ott  lines 746 - 748 
 [
  
  --------------------------------------------- "SUniverseLam"
  (SUniverse SGamma  (CanonicalLam x u)   0 )]

;; #source file ./ott/lang_simple.ott  lines 749 - 753 
 [
  
  (SUniverse SGamma (CanonicalAtomic (AtomicSpine x e)) i)
  (SUniverse SGamma v j)
  -------------------------------------------------------------------------------------- "SUniverseSpine"
  (SUniverse SGamma (CanonicalAtomic (AtomicSpine x (SpineCons e v)))  (max  i   j ) )]
)
;; #source file ./ott/lang_simple.ott  lines 755 - 757 
#|

;;; definitions 

(define-judgment-form
  L
  #:mode (LevelOrder I I I)
  #:contract (LevelOrder Gamma iinf jinf)

)
(define-judgment-form L 
 
  #:mode (TypeOrder I I I)
  #:contract (TypeOrder Gamma gU gV)

)
;; #source file ./ott/lang_simple.ott  lines 775 - 777 
|#

;;; definitions 

(define-judgment-form
  L
  #:mode (StaticHsub I I I I O)
  #:contract (StaticHsub x U u u_^ v)

;; #source file ./ott/lang_simple.ott  lines 793 - 795 
 [
  ------------------------------------------------------------------------------------ "StaticHsubSet"
  (StaticHsub x U u (CanonicalAtomic (AtomicSet i)) (CanonicalAtomic (AtomicSet i)))]

;; #source file ./ott/lang_simple.ott  lines 798 - 803 
 [
  (StaticHsub x U u U U_^)
  (StaticHsub x U u V V_^)
   (side-condition ,(not (alpha-equivalent? (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  ---------------------------------------------------------------- "StaticHsubPi"
  (StaticHsub x U u (CanonicalPi y U V) (CanonicalPi y U_^ V_^))]

;; #source file ./ott/lang_simple.ott  lines 805 - 809 
 [
  (StaticHsub x U u v v_^)
   (side-condition ,(not (alpha-equivalent? (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  ---------------------------------------------------------------- "StaticHsubLam"
  (StaticHsub x U u  (CanonicalLam y v)   (CanonicalLam y v_^) )]

;; #source file ./ott/lang_simple.ott  lines 812 - 815 
 [
   (side-condition ,(not (alpha-equivalent? (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  ---------------------------------------------------------------------------------------------------------------------- "StaticHsubDiffNil"
  (StaticHsub x U u (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ))]

;; #source file ./ott/lang_simple.ott  lines 816 - 821 
 [
  
   (side-condition ,(not (alpha-equivalent? (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  (StaticHsub x U u (CanonicalAtomic (AtomicSpine y e)) (CanonicalAtomic (AtomicSpine y e_^)))
  (StaticHsub x U u v v_^)
  ---------------------------------------------------------------------------------------------------------------------------- "StaticHsubDiffCons"
  (StaticHsub x U u (CanonicalAtomic (AtomicSpine y (SpineCons e v))) (CanonicalAtomic (AtomicSpine y (SpineCons e_^ v_^))))]

;; #source file ./ott/lang_simple.ott  lines 822 - 825 
 [
  
  (StaticHsubR x U u_11 (AtomicSpine x (SpineCons e u_22)) v_22 V_^)
  --------------------------------------------------------------------------------- "StaticHsubSpine"
  (StaticHsub x U u_11 (CanonicalAtomic (AtomicSpine x (SpineCons e u_22))) v_22)]

)
(define-judgment-form L 
 
  #:mode (StaticHsubR I I I I O O)
  #:contract (StaticHsubR x U u rr v V)

;; #source file ./ott/lang_simple.ott  lines 836 - 838 
 [
  -------------------------------------------------------- "StaticHsubRHead"
  (StaticHsubR x U u  (AtomicSpine  x  SpineEmpty)  u U)]

;; #source file ./ott/lang_simple.ott  lines 839 - 848 
 [
  
  (StaticHsub x U u_11 u_22 u_33)
  (StaticHsubR x U u_11 (AtomicSpine x e)  (CanonicalLam y v_11)  (CanonicalPi y V_11 V_22))
  (StaticHsub y V_11 u_33 v_11 v_22)
  (StaticHsub y V_11 u_33 V_22 V_^)
  ---------------------------------------------------------------------- "StaticHsubRSpine"
  (StaticHsubR x U u_11  (AtomicSpine x (SpineCons e u_22))  v_22 V_^)]
)

;;; definitions 

(define-judgment-form
  L
  #:mode (SWellFormed I)
  #:contract (SWellFormed SGamma)

;; #source file ./ott/lang_simple.ott  lines 858 - 860 
 [------------------------ "SWellFormedEmpty"
  (SWellFormed EnvEmpty)]

;; #source file ./ott/lang_simple.ott  lines 861 - 866 
 [
  (SWellFormed SGamma)
  (StaticSet SGamma U)
  (GVarFree x SGamma)
  ----------------------------------- "SWellFormedExt"
  (SWellFormed (EnvExt x U SGamma))]

)
(define-judgment-form L 
 
  #:mode (StaticSet I I)
  #:contract (StaticSet SGamma U)

;; #source file ./ott/lang_simple.ott  lines 875 - 878 
 [
  
  (StaticCSynth SGamma rr (CanonicalAtomic (AtomicSet i)))
  ----------------------------------------- "StaticSetSet"
  (StaticSet SGamma (CanonicalAtomic rr))]

;; #source file ./ott/lang_simple.ott  lines 881 - 886 
 [
  (StaticSet SGamma U)
  (SWellFormed (EnvExt x U SGamma))
  (StaticSet (EnvExt x U SGamma) V)
  ---------------------------------------- "StaticSetPi"
  (StaticSet SGamma (CanonicalPi x U V))]

)
(define-judgment-form L 
 
  #:mode (StaticCSynth I I O)
  #:contract (StaticCSynth SGamma rr U)

;; #source file ./ott/lang_simple.ott  lines 894 - 897 
 [
   (side-condition ,(> (term  i ) 0)) 
  --------------------------------------------------------------------------------- "StaticCSynthSet"
  (StaticCSynth SGamma (AtomicSet i) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 899 - 903 
 [
  
  (SWellFormed SGamma)
  (GVarLook x U SGamma)
  -------------------------------------------------------- "StaticCSynthVar"
  (StaticCSynth SGamma  (AtomicSpine  x  SpineEmpty)  U)]

;; #source file ./ott/lang_simple.ott  lines 907 - 913 
 [
  
  (StaticCSynth SGamma (AtomicSpine x e) (CanonicalPi y U_11 U_22))
  (StaticCCheck SGamma u U_11)
  (StaticHsub y U_11 u U_22 V)
  --------------------------------------------------------- "StaticCSynthApp"
  (StaticCSynth SGamma (AtomicSpine x (SpineCons e u)) V)]

)
(define-judgment-form L 
 
  #:mode (StaticCCheck I I I)
  #:contract (StaticCCheck SGamma u U)

;; #source file ./ott/lang_simple.ott  lines 921 - 924 
 [
  
  (StaticCSynth SGamma rr (CanonicalAtomic RR))
  ----------------------------------------------------------------- "StaticCCheckSynth"
  (StaticCCheck SGamma (CanonicalAtomic rr) (CanonicalAtomic RR))]

;; #source file ./ott/lang_simple.ott  lines 925 - 929 
 [
  
  (StaticCSynth SGamma rr (CanonicalAtomic (AtomicSet i)))
   (side-condition ,(and (< 0 (term  i )) (< (term  i ) (term  j )))) 
  ---------------------------------------------------------------------------- "StaticCCheckLevel"
  (StaticCCheck SGamma (CanonicalAtomic rr) (CanonicalAtomic (AtomicSet j)))]

;; #source file ./ott/lang_simple.ott  lines 931 - 935 
 [
  
  (SWellFormed (EnvExt x U SGamma))
  (StaticCCheck (EnvExt x U SGamma) u V)
  ---------------------------------------------------------------- "StaticCCheckLam"
  (StaticCCheck SGamma  (CanonicalLam x u)  (CanonicalPi x U V))]

;; #source file ./ott/lang_simple.ott  lines 936 - 941 
 [
  (StaticCCheck SGamma U (CanonicalAtomic (AtomicSet i)))
  (SWellFormed (EnvExt x U SGamma))
  (StaticCCheck (EnvExt x U SGamma) V (CanonicalAtomic (AtomicSet i)))
  --------------------------------------------------------------------------- "StaticCCheckPi"
  (StaticCCheck SGamma (CanonicalPi x U V) (CanonicalAtomic (AtomicSet i)))]
)

;;; definitions 

(define-judgment-form
  L
  #:mode (StaticSynth I I O)
  #:contract (StaticSynth SGamma t U)

;; #source file ./ott/lang_simple.ott  lines 951 - 955 
 [
  (StaticSetNorm SGamma V T)
  (StaticCheck SGamma t V)
  ---------------------------------------- "StaticSynthAnn"
  (StaticSynth SGamma  (TermAnn t T)  V)]

;; #source file ./ott/lang_simple.ott  lines 956 - 959 
 [
   (side-condition ,(> (term  i ) 0)) 
  ------------------------------------------------------------------------------ "StaticSynthSet"
  (StaticSynth SGamma (TermSet i) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 961 - 965 
 [
  
  (SWellFormed SGamma)
  (GVarLook x U SGamma)
  ------------------------------------ "StaticSynthVar"
  (StaticSynth SGamma x U)]

;; #source file ./ott/lang_simple.ott  lines 970 - 976 
 [
  
  (StaticSynth SGamma s (CanonicalPi x U V))
  (StaticNormCheck SGamma v t U)
  (StaticHsub x U v V V_^)
  ---------------------------------------- "StaticSynthApp"
  (StaticSynth SGamma (TermApp s t) V_^)]

)
(define-judgment-form L 
 
  #:mode (StaticCheck I I I)
  #:contract (StaticCheck SGamma t U)

;; #source file ./ott/lang_simple.ott  lines 983 - 986 
 [
  (StaticSynth SGamma t U)
  -------------------------- "StaticCheckSynth"
  (StaticCheck SGamma t U)]

;; #source file ./ott/lang_simple.ott  lines 987 - 991 
 [
  (StaticSynth SGamma t (CanonicalAtomic (AtomicSet i)))
   (side-condition ,(and (< 0 (term  i )) (< (term  i ) (term  j )))) 
  -------------------------------------------------------- "StaticCheckLevel"
  (StaticCheck SGamma t (CanonicalAtomic (AtomicSet j)))]

;; #source file ./ott/lang_simple.ott  lines 992 - 997 
 [
  (StaticNormCheck SGamma U S (CanonicalAtomic (AtomicSet i)))
  (SWellFormed (EnvExt x U SGamma))
  (StaticCheck (EnvExt x U SGamma) T (CanonicalAtomic (AtomicSet i)))
  --------------------------------------------------------------------- "StaticCheckPi"
  (StaticCheck SGamma (TermPi x S T) (CanonicalAtomic (AtomicSet i)))]

;; #source file ./ott/lang_simple.ott  lines 999 - 1003 
 [
  (SWellFormed (EnvExt x U SGamma))
  (StaticCheck (EnvExt x U SGamma) t V)
  ---------------------------------------------------------- "StaticCheckLam"
  (StaticCheck SGamma  (TermLam x t)  (CanonicalPi x U V))]

)
(define-judgment-form L 
 
  #:mode (StaticSetNorm I O I)
  #:contract (StaticSetNorm SGamma U S)

;; #source file ./ott/lang_simple.ott  lines 1014 - 1017 
 [
  (StaticNormSynth SGamma S U (CanonicalAtomic (AtomicSet i)))
  ---------------------------- "StaticSetNormSynth"
  (StaticSetNorm SGamma U S)]

;; #source file ./ott/lang_simple.ott  lines 1018 - 1022 
 [
  (StaticSetNorm SGamma U S)
  (StaticSetNorm (EnvExt x U SGamma) V T)
  ----------------------------------------------------------- "StaticSetNormPi"
  (StaticSetNorm SGamma (CanonicalPi x U V) (TermPi x S T))]

)
(define-judgment-form L 
 
  #:mode (StaticNormSynth I I O O)
  #:contract (StaticNormSynth SGamma t v U)

;; #source file ./ott/lang_simple.ott  lines 1028 - 1032 
 [
  (StaticSetNorm SGamma V T)
  (StaticNormCheck SGamma v t V)
  ---------------------------------------------- "StaticNormSynthAnn"
  (StaticNormSynth SGamma  (TermAnn t T)  v V)]

;; #source file ./ott/lang_simple.ott  lines 1033 - 1036 
 [
   (side-condition ,(> (term  i ) 0)) 
  ------------------------------------------------------------------------------------------------------------------ "StaticNormSynthSet"
  (StaticNormSynth SGamma (TermSet i) (CanonicalAtomic (AtomicSet i)) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 1038 - 1043 
 [
  (SWellFormed SGamma)
  (GVarLook x U SGamma)
  (EtaExpand  (AtomicSpine  x  SpineEmpty)  v U)
  ------------------------------------------ "StaticNormSynthVar"
  (StaticNormSynth SGamma x v U)]

;; #source file ./ott/lang_simple.ott  lines 1048 - 1054 
 [
  
  (StaticNormSynth SGamma s  (CanonicalLam x u)  (CanonicalPi x U_11 U_22))
  (StaticNormCheck SGamma v t U_11)
  (StaticHsub x U_11 v u v_^)
  (StaticHsub x U_11 v U_22 V)
  ---------------------------------------------- "StaticNormSynthApp"
  (StaticNormSynth SGamma (TermApp s t) v_^ V)]

)
(define-judgment-form L 
 
  #:mode (StaticNormCheck I O I I)
  #:contract (StaticNormCheck SGamma v t U)

;; #source file ./ott/lang_simple.ott  lines 1063 - 1066 
 [
  (StaticNormSynth SGamma t v U)
  -------------------------------- "StaticNormCheckSynth"
  (StaticNormCheck SGamma v t U)]

;; #source file ./ott/lang_simple.ott  lines 1067 - 1071 
 [
  (StaticNormSynth SGamma t v (CanonicalAtomic (AtomicSet i)))
   (side-condition ,(and (< 0 (term  i )) (< (term  i ) (term  j )))) 
  -------------------------------------------------------------- "StaticNormCheckLevel"
  (StaticNormCheck SGamma v t (CanonicalAtomic (AtomicSet j)))]

;; #source file ./ott/lang_simple.ott  lines 1073 - 1078 
 [
  (StaticNormCheck SGamma U S (CanonicalAtomic (AtomicSet i)))
  (SWellFormed (EnvExt x U SGamma))
  (StaticNormCheck (EnvExt x U SGamma) V T (CanonicalAtomic (AtomicSet i)))
  --------------------------------------------------------------------------------------------- "StaticNormCheckPi"
  (StaticNormCheck SGamma (CanonicalPi x U V) (TermPi x S T) (CanonicalAtomic (AtomicSet i)))]

;; #source file ./ott/lang_simple.ott  lines 1079 - 1083 
 [
  (SWellFormed (EnvExt x U SGamma))
  (StaticNormCheck (EnvExt x U SGamma) v t V)
  ----------------------------------------------------------------------------------- "StaticNormCheckLam"
  (StaticNormCheck SGamma  (CanonicalLam x v)   (TermLam x t)  (CanonicalPi x U V))]

)
(define-judgment-form L 
 
  #:mode (EtaExpand I O I)
  #:contract (EtaExpand rr v V)

;; #source file ./ott/lang_simple.ott  lines 1089 - 1091 
 [
  ---------------------------------------------------------- "EtaExpandAtomic"
  (EtaExpand rr (CanonicalAtomic rr) (CanonicalAtomic RR))]

;; #source file ./ott/lang_simple.ott  lines 1093 - 1097 
 [
  
  (EtaExpand  (AtomicSpine  y  SpineEmpty)  u U)
  (EtaExpand (AtomicSpine x (SpineCons e u)) v V)
  ------------------------------------------------------------------------ "EtaExpandPi"
  (EtaExpand (AtomicSpine x e)  (CanonicalLam y v)  (CanonicalPi y U V))]
)

;;; definitions 

(define-judgment-form
  L
  #:mode (Domain I O)
  #:contract (Domain gU gV)

;; #source file ./ott/lang_simple.ott  lines 1115 - 1117 
 [----------------------------------- "DomainPi"
  (Domain (CanonicalPi x gU gV) gU)]

;; #source file ./ott/lang_simple.ott  lines 1118 - 1120 
 [------------------------------------ "DomainDyn"
  (Domain CanonicalDyn CanonicalDyn)]

)
(define-judgment-form L 
 
  #:mode (GradualEnvSub I I I I O)
  #:contract (GradualEnvSub x gU gu Gamma Gamma_^)

;; #source file ./ott/lang_simple.ott  lines 1126 - 1128 
 [------------------------------------------- "GradualEnvSubEmpty"
  (GradualEnvSub x gU gu EnvEmpty EnvEmpty)]

;; #source file ./ott/lang_simple.ott  lines 1129 - 1134 
 [
  
   (side-condition ,(not (alpha-equivalent? (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  (GradualHsub x gU gu gU gU_^)
  (GradualEnvSub x gU gu Gamma Gamma_^)
  --------------------------------------------------------------------- "GradualEnvSubVarDiff"
  (GradualEnvSub x gU gu (EnvExt y gU Gamma) (EnvExt y gU_^ Gamma_^))]

;; #source file ./ott/lang_simple.ott  lines 1135 - 1138 
 [
  
  (GradualEnvSub x gU gu Gamma Gamma_^)
  ----------------------------------------------------- "GradualEnvSubVarSame"
  (GradualEnvSub x gU gu (EnvExt x gU Gamma) Gamma_^)]

)
(define-judgment-form L 
 
  #:mode (GradualHsub I I I I O)
  #:contract (GradualHsub x gU gu gu_^ gv)

;; #source file ./ott/lang_simple.ott  lines 1145 - 1147 
 [--------------------------------------------------------------------------------------- "GradualHsubSet"
  (GradualHsub x gU gu (CanonicalAtomic (AtomicSet i)) (CanonicalAtomic (AtomicSet i)))]

;; #source file ./ott/lang_simple.ott  lines 1149 - 1151 
 [------------------------------------------------- "GradualHsubDyn"
  (GradualHsub x gU gu CanonicalDyn CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 1152 - 1157 
 [ (side-condition ,(not (alpha-equivalent? (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  (GradualHsub x gU gu gV_11 gV_11^)
  (GradualHsub x gU gu gV_22 gV_22^)
  --------------------------------------------------------------------------------- "GradualHsubPi"
  (GradualHsub x gU gu (CanonicalPi y gV_11 gV_22) (CanonicalPi y gV_11^ gV_22^))]

;; #source file ./ott/lang_simple.ott  lines 1158 - 1162 
 [ (where   y  ,(gensym)) 
  (GradualHsub x gU gu (CanonicalPi y gU  (substitute  gV   x   y ) ) gV_^)
  -------------------------------------------------- "GradualHsubPiRdxAlpha"
  (GradualHsub x gU gu (CanonicalPi x gU gV) gV_^)]

;; #source file ./ott/lang_simple.ott  lines 1164 - 1168 
 [ (side-condition ,(not (alpha-equivalent? (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  (GradualHsub x gU gu gv gv_^)
  --------------------------------------------------------------------- "GradualHsubLam"
  (GradualHsub x gU gu  (CanonicalLam y gv)   (CanonicalLam y gv_^) )]

;; #source file ./ott/lang_simple.ott  lines 1169 - 1173 
 [ (where   y  ,(gensym)) 
  (GradualHsub x gU gu  (CanonicalLam y  (substitute  gv   x   y ) )  gv_^)
  -------------------------------------------------- "GradualHsubLamRdxAlpha"
  (GradualHsub x gU gu  (CanonicalLam x gv)  gv_^)]

;; #source file ./ott/lang_simple.ott  lines 1174 - 1177 
 [ (side-condition ,(not (alpha-equivalent? (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  ------------------------------------------------------------------------------------------------------------------------- "GradualHsubDiffNil"
  (GradualHsub x gU gu (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ))]

;; #source file ./ott/lang_simple.ott  lines 1178 - 1183 
 [ (side-condition ,(not (alpha-equivalent? (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  (GradualHsub x gU gu (CanonicalAtomic (AtomicSpine y ge)) (CanonicalAtomic (AtomicSpine y ge_^)))
  (GradualHsub x gU gu gv gv_^)
  ----------------------------------------------------------------------------------------------------------------------------------- "GradualHsubDiffCons"
  (GradualHsub x gU gu (CanonicalAtomic (AtomicSpine y (SpineCons ge gv))) (CanonicalAtomic (AtomicSpine y (SpineCons ge_^ gv_^))))]

;; #source file ./ott/lang_simple.ott  lines 1186 - 1189 
 [(GradualHsubR x gU gu ge gv gV)
  --------------------------------------------------------------- "GradualHsubSpine"
  (GradualHsub x gU gu (CanonicalAtomic (AtomicSpine x ge)) gv)]

)
(define-judgment-form L 
 
  #:mode (GradualHsubR I I I I O O)
  #:contract (GradualHsubR x gU gu ge gv gV)

;; #source file ./ott/lang_simple.ott  lines 1209 - 1211 
 [----------------------------------------- "GradualHsubRHead"
  (GradualHsubR x gU gu SpineEmpty gu gU)]

;; #source file ./ott/lang_simple.ott  lines 1212 - 1217 
 [(GradualHsubR x gU gu_11 ge gv_11 CanonicalDyn)
  -------------------------------------------------------------------------- "GradualHsubRDynType"
  (GradualHsubR x gU gu_11 (SpineCons ge gu_22) CanonicalDyn CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 1219 - 1228 
 [(GradualHsubR x gU gu ge  (CanonicalLam y gu_22)  (CanonicalPi y gU_11 gU_22))
  (GradualHsub x gU gu gv_11 gv_22)
  (GradualHsub y gU_11 gv_22 gu_22 gv_33)
  (GradualHsub y gU_11 gv_22 gU_22 gV)
  (GEtaExpandC gv_33 gv_44 gV)
  ------------------------------------------------------ "GradualHsubRLamSpine"
  (GradualHsubR x gU gu (SpineCons ge gv_11) gv_44 gV)]

;; #source file ./ott/lang_simple.ott  lines 1229 - 1238 
 [(GradualHsubR x gU gu ge  (CanonicalLam y_11 gu_22)  (CanonicalPi y_22 gU_11 gU_22))
   (side-condition ,(not (alpha-equivalent? (term  (CanonicalAtomic  (AtomicSpine  y_11  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y_22  SpineEmpty) ) )))) 
  (GradualHsub x gU gu gv_11 gv_22)
  (GradualHsub y_11 gU_11 gv_22 gu_22 gv_33)
  (GradualHsub y_22 gU_11 gv_22 gU_22 gV)
  (GEtaExpandC gv_33 gv_44 gV)
  ------------------------------------------------------ "GradualHsubRLamSpineRdxAlpha"
  (GradualHsubR x gU gu (SpineCons ge gv_11) gv_44 gV)]

;; #source file ./ott/lang_simple.ott  lines 1240 - 1246 
 [(GradualHsubR x gU gu ge CanonicalDyn (CanonicalPi y gU_11 gU_22))
  (GradualHsub x gU gu gv gv_22)
  (GradualHsub y gU_11 gv gU_22 gV)
  ---------------------------------------------------------- "GradualHsubRDynSpine"
  (GradualHsubR x gU gu (SpineCons ge gv) CanonicalDyn gV)]

)
(define-judgment-form L 
 
  #:mode (CodSub I I I O)
  #:contract (CodSub gU gu gu_^ gv)

;; #source file ./ott/lang_simple.ott  lines 1253 - 1256 
 [(GradualHsub x gU gu gV gV_^)
  ------------------------------------------- "CodSubPi"
  (CodSub gU gu (CanonicalPi x gU gV) gV_^)]

;; #source file ./ott/lang_simple.ott  lines 1257 - 1259 
 [------------------------------------------ "CodSubDyn"
  (CodSub gU gu CanonicalDyn CanonicalDyn)]

)
(define-judgment-form L 
 
  #:mode (BodySub I I I O)
  #:contract (BodySub gU gu gu_^ gv)

;; #source file ./ott/lang_simple.ott  lines 1265 - 1268 
 [(GradualHsub x gU gu gv gv_^)
  -------------------------------------------- "BodySubPi"
  (BodySub gU gu  (CanonicalLam x gv)  gv_^)]

;; #source file ./ott/lang_simple.ott  lines 1269 - 1271 
 [------------------------------------------- "BodySubDyn"
  (BodySub gU gu CanonicalDyn CanonicalDyn)]
)

;;; definitions 

(define-judgment-form
  L
  #:mode (GradualSet I I)
  #:contract (GradualSet Gamma gU)

;; #source file ./ott/lang_simple.ott  lines 1280 - 1283 
 [
  (GradualCSynth Gamma grr CanonicalDyn)
  ------------------------------------------ "GradualSetDynTy"
  (GradualSet Gamma (CanonicalAtomic grr))]

;; #source file ./ott/lang_simple.ott  lines 1284 - 1287 
 [
  (GradualCSynth Gamma grr (CanonicalAtomic (AtomicSet i)))
  ------------------------------------------ "GradualSetSet"
  (GradualSet Gamma (CanonicalAtomic grr))]

;; #source file ./ott/lang_simple.ott  lines 1290 - 1295 
 [
  (GradualSet Gamma gU_11)
    
  (GradualSet (EnvExt x gU_11 Gamma) gU_22)
  ------------------------------------------------ "GradualSetPi"
  (GradualSet Gamma (CanonicalPi x gU_11 gU_22))]

;; #source file ./ott/lang_simple.ott  lines 1297 - 1299 
 [
  --------------------------------- "GradualSetDynVal"
  (GradualSet Gamma CanonicalDyn)]

)
(define-judgment-form L 
 
  #:mode (WellFormed I)
  #:contract (WellFormed Gamma)

;; #source file ./ott/lang_simple.ott  lines 1305 - 1307 
 [----------------------- "WellFormedEmpty"
  (WellFormed EnvEmpty)]

;; #source file ./ott/lang_simple.ott  lines 1308 - 1313 
 [
  (WellFormed Gamma)
  (GradualSet Gamma gU)
  (GVarFree x Gamma)
  ---------------------------------- "WellFormedExt"
  (WellFormed (EnvExt x gU Gamma))]

)
(define-judgment-form L 
 
  #:mode (GradualCSynth I I O)
  #:contract (GradualCSynth Gamma grr gU)

;; #source file ./ott/lang_simple.ott  lines 1319 - 1322 
 [
   (side-condition ,(> (term  i ) 0)) 
  --------------------------------------------------------------------------------- "GradualCSynthSet"
  (GradualCSynth Gamma (AtomicSet i) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 1324 - 1328 
 [
    
  (GVarLook x gU Gamma)
  --------------------------------------------------------- "GradualCSynthVar"
  (GradualCSynth Gamma  (AtomicSpine  x  SpineEmpty)  gU)]

;; #source file ./ott/lang_simple.ott  lines 1332 - 1339 
 [
  (GradualCSynth Gamma (AtomicSpine x ge) gU)
  (Domain gU gV)
  (GradualCCheck Gamma gu gV)
  (CodSub gV gu gU gV_^)
  -------------------------------------------------------------- "GradualCSynthApp"
  (GradualCSynth Gamma (AtomicSpine x (SpineCons ge gu)) gV_^)]

)
(define-judgment-form L 
 
  #:mode (GradualCCheck I I I)
  #:contract (GradualCCheck Gamma gu gU)

;; #source file ./ott/lang_simple.ott  lines 1346 - 1350 
 [
  (GradualCSynth Gamma grr gU)
  (Consistent gU gV)
  ------------------------------------------------ "GradualCCheckSynth"
  (GradualCCheck Gamma (CanonicalAtomic grr) gV)]

;; #source file ./ott/lang_simple.ott  lines 1351 - 1355 
 [
  (GradualCSynth Gamma grr (CanonicalAtomic (AtomicSet i)))
   (side-condition ,(and (< 0 (term  i )) (< (term  i ) (term  j )))) 
  ----------------------------------------------------------------------------- "GradualCCheckLevel"
  (GradualCCheck Gamma (CanonicalAtomic grr) (CanonicalAtomic (AtomicSet j)))]

;; #source file ./ott/lang_simple.ott  lines 1357 - 1361 
 [
    
  (GradualCCheck (EnvExt x gU Gamma) gu gV)
  ------------------------------------------------------------------- "GradualCCheckLamPi"
  (GradualCCheck Gamma  (CanonicalLam x gu)  (CanonicalPi x gU gV))]

;; #source file ./ott/lang_simple.ott  lines 1362 - 1368 
 [
   (side-condition ,(not (alpha-equivalent? (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
   (where   z  ,(gensym)) 
    
  (GradualCCheck (EnvExt z gU Gamma)  (substitute  gu   x   z )   (substitute  gV   y   z ) )
  ------------------------------------------------------------------- "GradualCCheckLamPiRdxAlpha"
  (GradualCCheck Gamma  (CanonicalLam x gu)  (CanonicalPi y gU gV))]

;; #source file ./ott/lang_simple.ott  lines 1369 - 1373 
 [
    
  (GradualCCheck (EnvExt x CanonicalDyn Gamma) gu CanonicalDyn)
  ---------------------------------------------------------- "GradualCCheckLamDyn"
  (GradualCCheck Gamma  (CanonicalLam x gu)  CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 1374 - 1380 
 [
  (ConsistentSet gV)
  (GradualCCheck Gamma gU_11 gV)
    
  (GradualCCheck (EnvExt x gU_11 Gamma) gU_22 gV)
  ------------------------------------------------------ "GradualCCheckPi"
  (GradualCCheck Gamma (CanonicalPi x gU_11 gU_22) gV)]

;; #source file ./ott/lang_simple.ott  lines 1382 - 1385 
 [
  (GradualSet Gamma gU)
  --------------------------------------- "GradualCCheckDyn"
  (GradualCCheck Gamma CanonicalDyn gU)]

)
(define-judgment-form L 
 
  #:mode (ConsistentSet I)
  #:contract (ConsistentSet gU)

;; #source file ./ott/lang_simple.ott  lines 1393 - 1395 
 [------------------------------------------------- "ConsistentSetSet"
  (ConsistentSet (CanonicalAtomic (AtomicSet i)))]

;; #source file ./ott/lang_simple.ott  lines 1396 - 1398 
 [------------------------------ "ConsistentSetDyn"
  (ConsistentSet CanonicalDyn)]

)
(define-judgment-form L 
 
  #:mode (Consistent I I)
  #:contract (Consistent gU gV)

;; #source file ./ott/lang_simple.ott  lines 1406 - 1408 
 [------------------------------ "ConsistentDynL"
  (Consistent CanonicalDyn gv)]

;; #source file ./ott/lang_simple.ott  lines 1409 - 1411 
 [------------------------------ "ConsistentDynR"
  (Consistent gu CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 1412 - 1414 
 [-------------------- "ConsistentEq"
  (Consistent gu gu)]

;; #source file ./ott/lang_simple.ott  lines 1415 - 1419 
 [(Consistent gU gU_^)
  (Consistent gV gV_^)
  -------------------------------------------------------------- "ConsistentPi"
  (Consistent (CanonicalPi x gU gV) (CanonicalPi x gU_^ gV_^))]

;; #source file ./ott/lang_simple.ott  lines 1420 - 1426 
 [ (side-condition ,(not (alpha-equivalent? (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
   (where   z  ,(gensym)) 
  (Consistent gU gU_^)
  (Consistent  (substitute  gV   x   z )   (substitute  gV_^   y   z ) )
  -------------------------------------------------------------- "ConsistentPiRdxAlpha"
  (Consistent (CanonicalPi x gU gV) (CanonicalPi y gU_^ gV_^))]

;; #source file ./ott/lang_simple.ott  lines 1427 - 1430 
 [(Consistent gu gv)
  ---------------------------------------------------------- "ConsistentLam"
  (Consistent  (CanonicalLam x gu)   (CanonicalLam x gv) )]

;; #source file ./ott/lang_simple.ott  lines 1431 - 1436 
 [ (side-condition ,(not (alpha-equivalent? (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
   (where   z  ,(gensym)) 
  (Consistent  (substitute  gu   x   z )   (substitute  gv   y   z ) )
  ---------------------------------------------------------- "ConsistentLamRdxAlpha"
  (Consistent  (CanonicalLam x gu)   (CanonicalLam y gv) )]

;; #source file ./ott/lang_simple.ott  lines 1437 - 1441 
 [(Consistent (CanonicalAtomic (AtomicSpine x ge)) (CanonicalAtomic (AtomicSpine x ge_^)))
  (Consistent gu gv)
  ------------------------------------------------------------------------------------------------------------------------ "ConsistentApp"
  (Consistent (CanonicalAtomic (AtomicSpine x (SpineCons ge gu))) (CanonicalAtomic (AtomicSpine x (SpineCons ge_^ gv))))]
)

;;; definitions 

(define-judgment-form
  L
  #:mode (Meet I I O)
  #:contract (Meet gU gV gU_^)

;; #source file ./ott/lang_simple.ott  lines 1452 - 1456 
 [(Meet gU gU_^ gU_^^)
  (Meet gV gV_^ gV_^^)
  ------------------------------------------------------------------------------------ "MeetPi"
  (Meet (CanonicalPi x gU gV) (CanonicalPi x gU_^ gV_^) (CanonicalPi x gU_^^ gV_^^))]

;; #source file ./ott/lang_simple.ott  lines 1457 - 1463 
 [ (side-condition ,(not (alpha-equivalent? (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
   (where   z  ,(gensym)) 
  (Meet gU gU_^ gU_^^)
  (Meet  (substitute  gV   x   z )   (substitute  gV_^   y   z )  gV_^^)
  ------------------------------------------------------------------------------------ "MeetPiRdxAlpha"
  (Meet (CanonicalPi x gU gV) (CanonicalPi y gU_^ gV_^) (CanonicalPi z gU_^^ gV_^^))]

;; #source file ./ott/lang_simple.ott  lines 1464 - 1467 
 [(Meet gu gu_^ gv)
  ---------------------------------------------------------------------- "MeetLam"
  (Meet (CanonicalLam x gu) (CanonicalLam x gu_^) (CanonicalLam x gv))]

;; #source file ./ott/lang_simple.ott  lines 1468 - 1473 
 [ (side-condition ,(not (alpha-equivalent? (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
   (where   z  ,(gensym)) 
  (Meet  (substitute  gu   x   z )   (substitute  gu_^   y   z )  gv)
  ---------------------------------------------------------------------- "MeetLamRdxAlpha"
  (Meet (CanonicalLam x gu) (CanonicalLam y gu_^) (CanonicalLam z gv))]

;; #source file ./ott/lang_simple.ott  lines 1474 - 1478 
 [(Meet gu gu_^ gu_^^)
  (Meet (CanonicalAtomic (AtomicSpine x ge)) (CanonicalAtomic (AtomicSpine x ge_^)) (CanonicalAtomic (AtomicSpine x ge_^^)))
  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ "MeetApp"
  (Meet (CanonicalAtomic (AtomicSpine x (SpineCons ge gu))) (CanonicalAtomic (AtomicSpine x (SpineCons ge_^ gu_^))) (CanonicalAtomic (AtomicSpine x (SpineCons ge_^^ gu_^^))))]

;; #source file ./ott/lang_simple.ott  lines 1479 - 1481 
 [--------------------------- "MeetDynL"
  (Meet CanonicalDyn gU gU)]

;; #source file ./ott/lang_simple.ott  lines 1482 - 1485 
 [ (side-condition ,(not (alpha-equivalent? (term  gV ) (term  CanonicalDyn )))) 
  --------------------------- "MeetDynR"
  (Meet gV CanonicalDyn gV)]

;; #source file ./ott/lang_simple.ott  lines 1486 - 1490 
 [ (side-condition ,(not (alpha-equivalent? (term  gU ) (term  CanonicalDyn )))) 
   (side-condition ,(not (alpha-equivalent? (term  gV ) (term  CanonicalDyn )))) 
  ----------------- "MeetRefl"
  (Meet gu gu gu)]

)
(define-judgment-form L 
 
  #:mode (MorePrecise I I)
  #:contract (MorePrecise gU gV)

;; #source file ./ott/lang_simple.ott  lines 1498 - 1501 
 [(Meet gU gV gU)
  --------------------- "MorePreciseDef"
  (MorePrecise gU gV)]

)
(define-judgment-form L 
 
  #:mode (EvConsistent I I I)
  #:contract (EvConsistent ep gU gV)

;; #source file ./ott/lang_simple.ott  lines 1508 - 1513 
 [
  (Meet gV_11 gV_22 gV_33)
  (MorePrecise gU_11 gV_33)
  (MorePrecise gU_22 gV_33)
  ----------------------------------------------------------- "EvConsistentDef"
  (EvConsistent (EvidenceEv Gamma gU_11 gU_22) gV_11 gV_22)]
)

;;; definitions 

(define-judgment-form
  L
  #:mode (GradualSynth I I O)
  #:contract (GradualSynth Gamma gt gU)

;; #source file ./ott/lang_simple.ott  lines 1527 - 1531 
 [
  
  (GradualSetNorm Gamma gV gT)
  (GradualCheck Gamma gt gV)
  ------------------------------------------- "GradualSynthAnn"
  (GradualSynth Gamma  (TermAnn gt gT)  gV)]

;; #source file ./ott/lang_simple.ott  lines 1532 - 1535 
 [
   (side-condition ,(> (term  i ) 0)) 
  ------------------------------------------------------------------------------ "GradualSynthSet"
  (GradualSynth Gamma (TermSet i) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 1537 - 1541 
 [
  (GVarLook x gU Gamma)
    
  ------------------------------------- "GradualSynthVar"
  (GradualSynth Gamma x gU)]

;; #source file ./ott/lang_simple.ott  lines 1546 - 1552 
 [
  
  (GradualSynth Gamma gs gV)
  (Domain gV gV_11)
  (GradualNormCheck Gamma gv gt gV_11)
  (CodSub gV_11 gv gV gV_22)
  -------------------------------------------- "GradualSynthApp"
  (GradualSynth Gamma (TermApp gs gt) gV_22)]

;; #source file ./ott/lang_simple.ott  lines 1553 - 1557 
 [
  
   (where #t (is-check-only  gs )) 
   (side-condition ,(error 'typechecking "Cannot synthesize type for ~a, try adding an annotation?" (pt (term  gs )))) 
  -------------------------------------- "GradualSynthSynthRdxError"
  (GradualSynth Gamma gs CanonicalDyn)]

)
(define-judgment-form L 
 
  #:mode (GradualCheck I I I)
  #:contract (GradualCheck Gamma gt gU)

;; #source file ./ott/lang_simple.ott  lines 1565 - 1570 
 [
   (where #f (is-check-only  gt )) 
  (GradualSynth Gamma gt gU)
  (Consistent gU gV)
  ---------------------------- "GradualCheckSynth"
  (GradualCheck Gamma gt gV)]

;; #source file ./ott/lang_simple.ott  lines 1571 - 1576 
 [
   (where #f (is-check-only  gt )) 
  (GradualSynth Gamma gt (CanonicalAtomic (AtomicSet i)))
   (side-condition ,(and (< 0 (term  i )) (< (term  i ) (term  j )))) 
  --------------------------------------------------------- "GradualCheckLevel"
  (GradualCheck Gamma gt (CanonicalAtomic (AtomicSet j)))]

;; #source file ./ott/lang_simple.ott  lines 1577 - 1584 
 [
  
   (where #f (is-check-only  gt )) 
  (GradualSynth Gamma gt gU)
   (side-condition ,(not (judgment-holds (Consistent  gU   gV )))) 
   (where #f (is-set-pair  gU   gV )) 
   (side-condition ,(error 'typechecking "Expression ~a has type ~a which can't be used in context expecting ~a" (pt (term  gt ) ) (pt (term  gU )) (pt (term  gV )))) 
  ---------------------------- "GradualCheckCheckSynthRdxError"
  (GradualCheck Gamma gt gV)]

;; #source file ./ott/lang_simple.ott  lines 1585 - 1591 
 [
  
  (ConsistentSet gV)
  (GradualNormCheck Gamma gU gS gV)
    
  (GradualCheck (EnvExt x gU Gamma) gT gV)
  ------------------------------------------ "GradualCheckPi"
  (GradualCheck Gamma (TermPi x gS gT) gV)]

;; #source file ./ott/lang_simple.ott  lines 1593 - 1597 
 [
    
  (GradualCheck (EnvExt x gU Gamma) gt gV)
  ------------------------------------------------------------- "GradualCheckLamPi"
  (GradualCheck Gamma  (TermLam x gt)  (CanonicalPi x gU gV))]

;; #source file ./ott/lang_simple.ott  lines 1598 - 1604 
 [
   (side-condition ,(not (alpha-equivalent? (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
   (where   z  ,(gensym)) 
    
  (GradualCheck (EnvExt z gU Gamma)  (substitute  gt   x   z )   (substitute  gV   y   z ) )
  ------------------------------------------------------------- "GradualCheckLamPiRdxAlpha"
  (GradualCheck Gamma  (TermLam x gt)  (CanonicalPi y gU gV))]

;; #source file ./ott/lang_simple.ott  lines 1606 - 1610 
 [
    
  (GradualCheck (EnvExt x CanonicalDyn Gamma) gt CanonicalDyn)
  ---------------------------------------------------- "GradualCheckLamDyn"
  (GradualCheck Gamma  (TermLam x gt)  CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 1611 - 1614 
 [
  (GradualSet Gamma gU)
  --------------------------------- "GradualCheckDyn"
  (GradualCheck Gamma TermDyn gU)]

;; #source file ./ott/lang_simple.ott  lines 1615 - 1620 
 [
  
   (where #t (is-check-only  gt )) 
   (where #f (is-check-pair  gt   gV )) 
   (side-condition ,(error 'typechecking "Cannot check ~a against type ~a" (pt (term  gt )) (pt (term  gV )))) 
  ---------------------------- "GradualCheckCheckRdxError"
  (GradualCheck Gamma gt gV)]

)
(define-judgment-form L 
 
  #:mode (GradualSetNorm I O I)
  #:contract (GradualSetNorm Gamma gU TT)

;; #source file ./ott/lang_simple.ott  lines 1629 - 1632 
 [
  (GradualNormSynth Gamma TT gU (CanonicalAtomic (AtomicSet i)))
  ------------------------------ "GradualSetNormSynth"
  (GradualSetNorm Gamma gU TT)]

;; #source file ./ott/lang_simple.ott  lines 1634 - 1638 
 [
  (GradualSetNorm Gamma gU SS)
  (GradualSetNorm (EnvExt x gU Gamma) gV TT)
  --------------------------------------------------------------- "GradualSetNormPi"
  (GradualSetNorm Gamma (CanonicalPi x gU gV) (TermPi x SS TT))]

;; #source file ./ott/lang_simple.ott  lines 1645 - 1647 
 [
  --------------------------------------------- "GradualSetNormDyn"
  (GradualSetNorm Gamma CanonicalDyn TermDyn)]

)
(define-judgment-form L 
 
  #:mode (GEtaLong I I)
  #:contract (GEtaLong gv gV)

;; #source file ./ott/lang_simple.ott  lines 1653 - 1655 
 [-------------------------------------------------------- "GEtaLongAtomic"
  (GEtaLong (CanonicalAtomic grr) (CanonicalAtomic gRR))]

;; #source file ./ott/lang_simple.ott  lines 1656 - 1658 
 [----------------------------------------------- "GEtaLongAtomicDyn"
  (GEtaLong (CanonicalAtomic grr) CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 1660 - 1664 
 [ (where   z  ,(gensym)) 
  (GEtaLong  (substitute  gu   x   z )   (substitute  gV   y   z ) )
  -------------------------------------------------------- "GEtaLongLamRdxAlpha"
  (GEtaLong  (CanonicalLam x gu)  (CanonicalPi y gU gV))]

;; #source file ./ott/lang_simple.ott  lines 1665 - 1667 
 [---------------------------- "GEtaLongDyn"
  (GEtaLong CanonicalDyn gU)]

;; #source file ./ott/lang_simple.ott  lines 1668 - 1670 
 [--------------------------------------- "GEtaLongPi"
  (GEtaLong (CanonicalPi x gU gV) gV_^)]

)
(define-judgment-form L 
 
  #:mode (GEtaExpand I O I)
  #:contract (GEtaExpand grr gv gV)

;; #source file ./ott/lang_simple.ott  lines 1676 - 1678 
 [-------------------------------------------------------------- "GEtaExpandAtomic"
  (GEtaExpand grr (CanonicalAtomic grr) (CanonicalAtomic gRR))]

;; #source file ./ott/lang_simple.ott  lines 1679 - 1681 
 [----------------------------------------------------- "GEtaExpandDyn"
  (GEtaExpand grr (CanonicalAtomic grr) CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 1683 - 1687 
 [(GEtaExpand  (AtomicSpine  y  SpineEmpty)  gu gU)
  (GEtaExpand (AtomicSpine x (SpineCons ge gu)) gv gV)
  ----------------------------------------------------------------------------- "GEtaExpandPi"
  (GEtaExpand (AtomicSpine x ge)  (CanonicalLam y gv)  (CanonicalPi y gU gV))]

)
(define-judgment-form L 
 
  #:mode (GEtaExpandC I O I)
  #:contract (GEtaExpandC gu gv gV)

;; #source file ./ott/lang_simple.ott  lines 1693 - 1696 
 [(GEtaExpand grr gv gV)
  ------------------------------------------- "GEtaExpandCAtomic"
  (GEtaExpandC (CanonicalAtomic grr) gv gV)]

;; #source file ./ott/lang_simple.ott  lines 1697 - 1700 
 [(GEtaExpandC gu gv gV)
  --------------------------------------------------------------------------------- "GEtaExpandCLam"
  (GEtaExpandC  (CanonicalLam x gu)   (CanonicalLam x gv)  (CanonicalPi x gU gV))]

;; #source file ./ott/lang_simple.ott  lines 1701 - 1705 
 [ (where   z  ,(gensym)) 
  (GEtaExpandC  (substitute  gu   x   z )  gv  (substitute  gV   x   z ) )
  --------------------------------------------------------------------------------- "GEtaExpandCLamRdxAlpha"
  (GEtaExpandC  (CanonicalLam x gu)   (CanonicalLam z gv)  (CanonicalPi y gU gV))]

;; #source file ./ott/lang_simple.ott  lines 1706 - 1710 
 [(GEtaExpandC gU gU_^ gV_^^)
  (GEtaExpandC gV gV_^ gV_^^)
  --------------------------------------------------------------------- "GEtaExpandCPi"
  (GEtaExpandC (CanonicalPi x gU gV) (CanonicalPi x gU_^ gV_^) gV_^^)]

;; #source file ./ott/lang_simple.ott  lines 1712 - 1714 
 [-------------------------------------------- "GEtaExpandCDyn"
  (GEtaExpandC CanonicalDyn CanonicalDyn gV)]

;; #source file ./ott/lang_simple.ott  lines 1715 - 1717 
 [---------------------------------- "GEtaExpandCDynType"
  (GEtaExpandC gu gu CanonicalDyn)]

)
(define-judgment-form L 
 
  #:mode (FEtaExpandC I O I)
  #:contract (FEtaExpandC gu gv gV)

;; #source file ./ott/lang_simple.ott  lines 1723 - 1726 
 [(GEtaExpandC gu gv (CanonicalPi x gU gV))
  ------------------------------------------- "FEtaExpandCPi"
  (FEtaExpandC gu gv (CanonicalPi x gU gV))]

;; #source file ./ott/lang_simple.ott  lines 1727 - 1730 
 [ (where   x  ,(gensym)) 
  -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- "FEtaExpandCDyn"
  (FEtaExpandC (CanonicalAtomic (AtomicSpine y ge))  (CanonicalLam x (CanonicalAtomic (AtomicSpine y (SpineCons ge (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) )))))  CanonicalDyn)]

)
(define-judgment-form L 
 
  #:mode (GradualNormSynth I I O O)
  #:contract (GradualNormSynth Gamma tt gv gU)

;; #source file ./ott/lang_simple.ott  lines 1738 - 1742 
 [
  (GradualSetNorm Gamma gV TT)
  (GradualNormCheck Gamma gv tt gV)
  -------------------------------------------------- "GradualNormSynthAnn"
  (GradualNormSynth Gamma  (TermAnn tt TT)  gv gV)]

;; #source file ./ott/lang_simple.ott  lines 1743 - 1746 
 [
   (side-condition ,(> (term  i ) 0)) 
  ------------------------------------------------------------------------------------------------------------------ "GradualNormSynthSet"
  (GradualNormSynth Gamma (TermSet i) (CanonicalAtomic (AtomicSet i)) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 1748 - 1753 
 [
    
  (GVarLook x gU Gamma)
  (GEtaExpand  (AtomicSpine  x  SpineEmpty)  gv gU)
  -------------------------------------------- "GradualNormSynthVar"
  (GradualNormSynth Gamma x gv gU)]

;; #source file ./ott/lang_simple.ott  lines 1757 - 1766 
 [
  (GradualNormSynth Gamma ss gu gV)
  (FEtaExpandC gu gu_^ gV)
  (Domain gV gV_11)
  (GradualNormCheck Gamma gv tt gV_11)
  (BodySub gV_11 gv gu_^ gv_^)
  (CodSub gV_11 gv gV gV_22)
  (GEtaExpandC gv_^ gv_^^ gV_22)
  ------------------------------------------------------ "GradualNormSynthApp"
  (GradualNormSynth Gamma (TermApp ss tt) gv_^^ gV_22)]

)
(define-judgment-form L 
 
  #:mode (GradualNormCheck I O I I)
  #:contract (GradualNormCheck Gamma gv tt gU)

;; #source file ./ott/lang_simple.ott  lines 1774 - 1779 
 [
   (where #f (is-check-only  tt )) 
  (GradualNormSynth Gamma tt gv gV)
  (MorePrecise gV gU)
  ----------------------------------- "GradualNormCheckSynthUp"
  (GradualNormCheck Gamma gv tt gU)]

;; #source file ./ott/lang_simple.ott  lines 1780 - 1787 
 [
   (where #f (is-check-only  tt )) 
  (GradualNormSynth Gamma tt gv gV)
  (Consistent gU gV)
  (Meet gU gV gU_^)
   (side-condition ,(not (alpha-equivalent? (term  gU_^ ) (term  gV )))) 
  --------------------------------------------- "GradualNormCheckSynthDown"
  (GradualNormCheck Gamma CanonicalDyn tt gU)]

;; #source file ./ott/lang_simple.ott  lines 1788 - 1793 
 [
   (where #f (is-check-only  tt )) 
  (GradualNormSynth Gamma tt gv (CanonicalAtomic (AtomicSet i)))
   (side-condition ,(and (< 0 (term  i )) (< (term  i ) (term  j )))) 
  ---------------------------------------------------------------- "GradualNormCheckLevel"
  (GradualNormCheck Gamma gv tt (CanonicalAtomic (AtomicSet j)))]

;; #source file ./ott/lang_simple.ott  lines 1795 - 1803 
 [
  (ConsistentSet gV)
  (GradualNormCheck Gamma gU_11 SS gV)
    
  (GradualNormCheck (EnvExt x gU_11 Gamma) gU_22 TT gV)
  -------------------------------------------------------------------------- "GradualNormCheckPi"
  (GradualNormCheck Gamma (CanonicalPi x gU_11 gU_22) (TermPi x SS TT) gV)]

;; #source file ./ott/lang_simple.ott  lines 1804 - 1808 
 [
    
  (GradualNormCheck (EnvExt x gU Gamma) gv tt gV)
  --------------------------------------------------------------------------------------- "GradualNormCheckLamPi"
  (GradualNormCheck Gamma  (CanonicalLam x gv)   (TermLam x tt)  (CanonicalPi x gU gV))]

;; #source file ./ott/lang_simple.ott  lines 1809 - 1815 
 [
   (side-condition ,(not (alpha-equivalent? (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
   (where   z  ,(gensym)) 
    
  (GradualNormCheck (EnvExt z gU Gamma) gv  (substitute  tt   x   z )   (substitute  gV   y   z ) )
  --------------------------------------------------------------------------------------- "GradualNormCheckLamPiRdxAlpha"
  (GradualNormCheck Gamma  (CanonicalLam z gv)   (TermLam x tt)  (CanonicalPi y gU gV))]

;; #source file ./ott/lang_simple.ott  lines 1816 - 1820 
 [
    
  (GradualNormCheck (EnvExt x CanonicalDyn Gamma) gv tt CanonicalDyn)
  ------------------------------------------------------------------------------ "GradualNormCheckLamDyn"
  (GradualNormCheck Gamma  (CanonicalLam x gv)   (TermLam x tt)  CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 1821 - 1824 
 [
  (GradualSet Gamma gU)
  -------------------------------------------------- "GradualNormCheckDyn"
  (GradualNormCheck Gamma CanonicalDyn TermDyn gU)]

;; #source file ./ott/lang_simple.ott  lines 1826 - 1831 
 [
  (GradualNormSynth Gamma ett gv gV)
  (Meet gU gV gV)
  ------------------------------------------------ "GradualNormCheckEvUp"
  (GradualNormCheck Gamma gv (TermEp ep ett) gU)]

;; #source file ./ott/lang_simple.ott  lines 1832 - 1838 
 [
  (GradualNormSynth Gamma ett gv gV)
  (Meet gU gV gU_^)
   (side-condition ,(not (alpha-equivalent? (term  gU_^ ) (term  gV )))) 
  ---------------------------------------------------------- "GradualNormCheckEvDown"
  (GradualNormCheck Gamma CanonicalDyn (TermEp ep ett) gU)]

;; #source file ./ott/lang_simple.ott  lines 1840 - 1842 
 [
  ---------------------------------------------------------------- "GradualNormCheckDynAnn"
  (GradualNormCheck Gamma CanonicalDyn (TermDynAnn Gamma gU) gU)]

)
(define-judgment-form L 
 
  #:mode (GradualElabSynth I I O O)
  #:contract (GradualElabSynth Gamma gt et gU)

;; #source file ./ott/lang_simple.ott  lines 1849 - 1853 
 [
  
  (GradualSetNorm Gamma gV gT)
  (GradualElabCheck Gamma et gt gV)
  -------------------------------------------------- "GradualElabSynthAnn"
  (GradualElabSynth Gamma  (TermAnn gt gT)  et gV)]

;; #source file ./ott/lang_simple.ott  lines 1854 - 1857 
 [
   (side-condition ,(> (term  i ) 0)) 
  ---------------------------------------------------------------------------------------------- "GradualElabSynthSet"
  (GradualElabSynth Gamma (TermSet i) (TermSet i) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 1859 - 1863 
 [
    
  (GVarLook x gU Gamma)
  ----------------------------------------------------- "GradualElabSynthVar"
  (GradualElabSynth Gamma x x gU)]

;; #source file ./ott/lang_simple.ott  lines 1867 - 1874 
 [
  
  (GradualElabSynth Gamma gs es gV)
  (Domain gV gV_11)
  (GradualElabCheck Gamma et gt gV_11)
  (GradualNormCheck Gamma gv gt gV_11)
  (CodSub gV_11 gv gV gV_22)
  ---------------------------------------------------------------- "GradualElabSynthApp"
  (GradualElabSynth Gamma (TermApp gs gt) (TermApp es et) gV_22)]

;; #source file ./ott/lang_simple.ott  lines 1875 - 1879 
 [
  
   (where #t (is-check-only  gs )) 
   (side-condition ,(error 'typechecking "Cannot synthesize type for ~a, try adding an annotation?" (pt (term  gs )))) 
  ----------------------------------------------------------------------------------------------- "GradualElabSynthSynthRdxError"
  (GradualElabSynth Gamma gs (TermSet  0 ) (CanonicalAtomic  (AtomicSpine  Set0  SpineEmpty) ))]

)
(define-judgment-form L 
 
  #:mode (GradualElabCheck I O I I)
  #:contract (GradualElabCheck Gamma et gt gU)

;; #source file ./ott/lang_simple.ott  lines 1886 - 1891 
 [
   (where #f (is-check-only  gt )) 
  (GradualElabSynth Gamma gt et gV_^)
   (side-condition , (alpha-equivalent? (term  gV_^ ) (term  gV ))) 
  ----------------------------------- "GradualElabCheckSynthEq"
  (GradualElabCheck Gamma et gt gV)]

;; #source file ./ott/lang_simple.ott  lines 1892 - 1898 
 [
   (where #f (is-check-only  gt )) 
  (GradualElabSynth Gamma gt et gV)
   (side-condition ,(not (alpha-equivalent? (term  gU ) (term  gV )))) 
  (Meet gU gV gV_^)
  ------------------------------------------------------------------------- "GradualElabCheckSynth"
  (GradualElabCheck Gamma (TermEp (EvidenceEv Gamma gV_^ gV_^) et) gt gU)]

;; #source file ./ott/lang_simple.ott  lines 1899 - 1904 
 [
   (where #f (is-check-only  gt )) 
  (GradualElabSynth Gamma gt et (CanonicalAtomic (AtomicSet i)))
   (side-condition ,(and (< 0 (term  i )) (< (term  i ) (term  j )))) 
  ---------------------------------------------------------------- "GradualElabCheckLevel"
  (GradualElabCheck Gamma et gt (CanonicalAtomic (AtomicSet j)))]

;; #source file ./ott/lang_simple.ott  lines 1905 - 1912 
 [
  
   (where #f (is-check-only  gt )) 
  (GradualElabSynth Gamma gt et gU)
   (side-condition ,(not (judgment-holds (Consistent  gU   gV )))) 
   (where #f (is-set-pair  gU   gV )) 
   (side-condition ,(error 'typechecking "Expression ~a has type ~a which can't be used in context expecting ~a" (pt (term  gt ) ) (pt (term  gU )) (pt (term  gV )))) 
  ---------------------------------------------- "GradualElabCheckCheckSynthRdxError"
  (GradualElabCheck Gamma (TermSet  0 ) gt gV)]

;; #source file ./ott/lang_simple.ott  lines 1914 - 1923 
 [
  
  (ConsistentSet gV)
  (GradualElabCheck Gamma eS gS gV)
  (GradualNormCheck Gamma gU gS gV)
    
  (GradualElabCheck (EnvExt x gU Gamma) eT gT gV)
  --------------------------------------------------------------- "GradualElabCheckPi"
  (GradualElabCheck Gamma (TermPi x eS eT) (TermPi x gS gT) gV)]

;; #source file ./ott/lang_simple.ott  lines 1924 - 1928 
 [
    
  (GradualElabCheck (EnvExt x gU Gamma) et gt gV)
  ---------------------------------------------------------------------------------- "GradualElabCheckLamPi"
  (GradualElabCheck Gamma  (TermLam x et)   (TermLam x gt)  (CanonicalPi x gU gV))]

;; #source file ./ott/lang_simple.ott  lines 1929 - 1935 
 [
   (side-condition ,(not (alpha-equivalent? (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
   (where   z  ,(gensym)) 
    
  (GradualElabCheck (EnvExt z gU Gamma) et  (substitute  gt   x   z )   (substitute  gV   y   z ) )
  ---------------------------------------------------------------------------------- "GradualElabCheckLamPiRdxAlpha"
  (GradualElabCheck Gamma  (TermLam z et)   (TermLam x gt)  (CanonicalPi y gU gV))]

;; #source file ./ott/lang_simple.ott  lines 1936 - 1940 
 [
    
  (GradualElabCheck (EnvExt x CanonicalDyn Gamma) et gt CanonicalDyn)
  ------------------------------------------------------------------------- "GradualElabCheckLamDyn"
  (GradualElabCheck Gamma  (TermLam x et)   (TermLam x gt)  CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 1941 - 1944 
 [
  (GradualSet Gamma gU)
  ----------------------------------------------------------- "GradualElabCheckDyn"
  (GradualElabCheck Gamma (TermDynAnn Gamma gU) TermDyn gU)]

;; #source file ./ott/lang_simple.ott  lines 1946 - 1951 
 [
  
   (where #t (is-check-only  gt )) 
   (where #f (is-check-pair  gt   gV )) 
   (side-condition ,(error 'typechecking "Cannot check ~a against type ~a" (pt (term  gt )) (pt (term  gV )))) 
  ---------------------------------------------- "GradualElabCheckCheckRdxError"
  (GradualElabCheck Gamma (TermSet  0 ) gt gV)]
)
;; #source file ./ott/lang_simple.ott  lines 1953 - 1953 
#| 

;;; definitions 

(define-judgment-form
  L
  #:mode (EvType I I I)
  #:contract (EvType Gamma et gU)

;; #source file ./ott/lang_simple.ott  lines 1964 - 1967 
 [
   (side-condition ,(> (term  i ) 0)) 
  ------------------------------------------------------------------------ "EvTypeSet"
  (EvType Gamma (TermSet i) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 1969 - 1973 
 [
    
  (GVarLook x gU Gamma)
  ------------------------------- "EvTypeVar"
  (EvType Gamma x gU)]

;; #source file ./ott/lang_simple.ott  lines 1977 - 1983 
 [
  
  (EvType Gamma es gV)
  (Domain gV gU)
  (GradualNormCheck Gamma gv et gU)
  (CodSub gU gv gV gV_22)
  -------------------------------------- "EvTypeApp"
  (EvType Gamma (TermApp es et) gV_22)]

;; #source file ./ott/lang_simple.ott  lines 1986 - 1990 
 [
  (EvType Gamma et gU)
  (EvConsistent ep gU gV)
  ---------------------------------- "EvTypeEv"
  (EvType Gamma (TermEp ep et) gV)]

;; #source file ./ott/lang_simple.ott  lines 1991 - 1997 
 [
  
  (ConsistentSet gV)
  (GradualNormCheck Gamma gU eS gV)
    
  (EvType (EnvExt x gU Gamma) eT gV)
  ------------------------------------ "EvTypePi"
  (EvType Gamma (TermPi x eS eT) gV)]

;; #source file ./ott/lang_simple.ott  lines 2000 - 2004 
 [
    
  (EvType (EnvExt x gU Gamma) et gV)
  ------------------------------------------------------- "EvTypeLamPi"
  (EvType Gamma  (TermLam x et)  (CanonicalPi x gU gV))]

;; #source file ./ott/lang_simple.ott  lines 2006 - 2010 
 [
    
  (EvType (EnvExt x CanonicalDyn Gamma) et CanonicalDyn)
  ---------------------------------------------- "EvTypeLamDyn"
  (EvType Gamma  (TermLam x et)  CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 2011 - 2014 
 [
  (GradualSet Gamma gU)
  ----------------------------------------- "EvTypeDyn"
  (EvType Gamma (TermDynAnn Gamma gU) gU)]
)
;; #source file ./ott/lang_simple.ott  lines 2017 - 2017 
|# 

;;; definitions 

(define-judgment-form
  L
  #:mode (SimpleSmallStep I O)
  #:contract (SimpleSmallStep s t)

;; #source file ./ott/lang_simple.ott  lines 2031 - 2033 
 [
  --------------------------------------- "SimpleSmallStepAnn"
  (SimpleSmallStep  (TermAnn sv T)  sv)]

;; #source file ./ott/lang_simple.ott  lines 2034 - 2036 
 [
  ------------------------------------------------------------------------ "SimpleSmallStepApp"
  (SimpleSmallStep (TermApp  (TermLam x t)  sv)  (esubst  t   x   sv ) )]

;; #source file ./ott/lang_simple.ott  lines 2038 - 2041 
 [
  (SimpleSmallStep s t)
  ------------------------------------------------------------- "SimpleSmallStepContext"
  (SimpleSmallStep  (in-hole  SC   s )   (in-hole  SC   t ) )]

)
(define-judgment-form L 
 
  #:mode (SmallStep I O)
  #:contract (SmallStep es et)

;; #source file ./ott/lang_simple.ott  lines 2049 - 2052 
 [
  (ConsistentTrans ep_11 ep_22 ep_33)
  ------------------------------------------------------------------ "SmallStepAscr"
  (SmallStep (TermEp ep_11  (TermEp ep_22 rv) ) (TermEp ep_33 rv))]

;; #source file ./ott/lang_simple.ott  lines 2055 - 2059 
 [
   (side-condition ,(empty? (judgment-holds (ConsistentTrans  ep_11   ep_22  ep_9999) ep_9999))) 
   (side-condition ,(error 'RuntimeError "Can't cast:\n    ~a\nto\n   ~a\nin term ~a" (printEvType (term  ep_11 )) (printEvType (term  ep_22 )) (pt (term  rv )) )) 
  ---------------------------------------------------------- "SmallStepAscrFail"
  (SmallStep (TermEp ep_11  (TermEp ep_22 rv) ) TermError)]

;; #source file ./ott/lang_simple.ott  lines 2063 - 2065 
 [
  -------------------------------------------------------------------- "SmallStepApp"
  (SmallStep (TermApp  (TermLam x et)  ev)  (esubst  et   x   ev ) )]

;; #source file ./ott/lang_simple.ott  lines 2066 - 2071 
 [
  (Domain gU gV_11)
  (GradualNormCheck EnvEmpty gv ev gV_11)
  (CodSub gV_11 gv gU gV_22)
  ------------------------------------------------------------------------------- "SmallStepAppDyn"
  (SmallStep (TermApp (TermDynAnn EnvEmpty gU) ev) (TermDynAnn EnvEmpty gV_22))]

;; #source file ./ott/lang_simple.ott  lines 2072 - 2077 
 [
  (EvDom ep_11 ep_33)
  (ConsistentTrans ep_22 ep_33 ep_44)
  (EvCod rv ep_11 ep_55)
  -------------------------------------------------------------------------------------------------------------------------------------- "SmallStepAppEv"
  (SmallStep (TermApp  (TermEp ep_11  (TermLam x et) )   (TermEp ep_22 rv) ) (TermEp ep_55   (esubst  et   x   (TermEp ep_44 rv) )  ))]

;; #source file ./ott/lang_simple.ott  lines 2078 - 2091 
 [
  (Domain gV_11 gV_11^)
  (Domain gV_22 gV_22^)
  (Domain gV_33 gV_33^)
  (ConsistentTrans ep_11 (EvidenceEv EnvEmpty gV_11^ gV_22^) ep_22)
  (GradualNormCheck EnvEmpty gv_11 (TermEp ep_11 rv) gV_11^)
  (GradualNormCheck EnvEmpty gv_22 (TermEp ep_11 rv) gV_22^)
  (GradualNormCheck EnvEmpty gv_33 (TermEp ep_11 rv) gV_33^)
  (CodSub gV_11^ gv_11 gV_11 gV_11^^)
  (CodSub gV_22^ gv_22 gV_22 gV_22^^)
  (CodSub gV_33^ gv_33 gV_33 gV_33^^)
  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- "SmallStepAppEvDyn"
  (SmallStep (TermApp  (TermEp (EvidenceEv EnvEmpty gV_11 gV_22) (TermDynAnn EnvEmpty gV_33))   (TermEp ep_11 rv) ) (TermEp (EvidenceEv EnvEmpty gV_11^^ gV_22^^) (TermDynAnn EnvEmpty gV_33^^)))]

;; #source file ./ott/lang_simple.ott  lines 2092 - 2095 
 [
  
  (SmallStep (TermApp  (TermEp ep_11 rv)   (TermEp (EvidenceEv EnvEmpty CanonicalDyn CanonicalDyn) rv) ) es)
  ------------------------------------------------- "SmallStepAppEvRaw"
  (SmallStep (TermApp  (TermEp ep_11 rv)  rv) es)]

;; #source file ./ott/lang_simple.ott  lines 2096 - 2101 
 [
  
  (EvDom ep_11 ep_33)
   (side-condition ,(empty? (judgment-holds (ConsistentTrans  ep_22   ep_33  ep_9999) ep_9999))) 
   (side-condition ,(error 'RuntimeError "Can't cast:\n    ~a\nto\n   ~a\nin term ~a" (printEvType (term  ep_33 )) (printEvType (term  ep_22 )) (pt (term   (TermApp ru rv)  )) )) 
  ------------------------------------------------------------------------- "SmallStepAppFailTrans"
  (SmallStep (TermApp  (TermEp ep_11 ru)   (TermEp ep_22 rv) ) TermError)]

;; #source file ./ott/lang_simple.ott  lines 2102 - 2106 
 [
  
   (side-condition ,(empty? (judgment-holds (EvDom  ep_11  ep_9999) ep_9999))) 
   (side-condition ,(error 'RuntimeError "Can't cast:\n    ~a\nto\n   ~a\nin term ~a" (printEvType (term  ep_11 )) (printEvType (term  (EvidenceEv EnvEmpty (CanonicalPi x CanonicalDyn CanonicalDyn) (CanonicalPi x CanonicalDyn CanonicalDyn)) )) (pt (term   (TermApp rv ev)  )) )) 
  -------------------------------------------------------- "SmallStepAppFailDom"
  (SmallStep (TermApp  (TermEp ep_11 rv)  ev) TermError)]

;; #source file ./ott/lang_simple.ott  lines 2112 - 2116 
 [
   (side-condition ,(empty? (judgment-holds (Domain  gU  gV_9999) gV_9999))) 
   (side-condition ,(error 'RuntimeError "Can't cast:\n    ~a\nto\n   ~a\nin term ~a" (printEvType (term  (EvidenceEv EnvEmpty gU gU) )) (printEvType (term  (EvidenceEv EnvEmpty (CanonicalPi x CanonicalDyn CanonicalDyn) (CanonicalPi x CanonicalDyn CanonicalDyn)) )) (pt (term   (TermApp (TermDynAnn EnvEmpty gU) ev)  )) )) 
  ------------------------------------------------------------------------------ "SmallStepAppDynFail"
  (SmallStep (TermApp  (TermEp ep_11 (TermDynAnn EnvEmpty gU))  ev) TermError)]

;; #source file ./ott/lang_simple.ott  lines 2119 - 2124 
 [
  (SmallStep es et)
   (side-condition ,(not (alpha-equivalent? (term  es ) (term TermError)))) 
   (side-condition ,(not (alpha-equivalent? (term  et ) (term TermError)))) 
  --------------------------------------------------------- "SmallStepContext"
  (SmallStep  (in-hole  EC   es )   (in-hole  EC   et ) )]

;; #source file ./ott/lang_simple.ott  lines 2125 - 2128 
 [
  (SmallStep es TermError)
  --------------------------------------------- "SmallStepContextErr"
  (SmallStep  (in-hole  EC   es )  TermError)]

)
(define-judgment-form L 
 
  #:mode (ConsistentTrans I I O)
  #:contract (ConsistentTrans ep_11 ep_22 ep_33)

;; #source file ./ott/lang_simple.ott  lines 2134 - 2138 
 [
  (Meet gU_11 gU_22 gU_33)
  (Meet gV_11 gV_22 gV_33)
  ---------------------------------------------------------------------------------------------------------------- "ConsistentTransDef"
  (ConsistentTrans (EvidenceEv Gamma gU_11 gV_11) (EvidenceEv Gamma gU_22 gV_22) (EvidenceEv Gamma gU_33 gV_33))]

)
(define-judgment-form L 
 
  #:mode (EvDom I O)
  #:contract (EvDom ep_11 ep_22)

;; #source file ./ott/lang_simple.ott  lines 2144 - 2148 
 [
  (Domain gU gU_^)
  (Domain gV gV_^)
  --------------------------------------------------------------- "EvDomPair"
  (EvDom (EvidenceEv Gamma gU gV) (EvidenceEv Gamma gU_^ gV_^))]

)
(define-judgment-form L 
 
  #:mode (EvCod I I O)
  #:contract (EvCod ev ep_11 ep_22)

;; #source file ./ott/lang_simple.ott  lines 2155 - 2163 
 [
  
  (Domain gU gU_11)
  (Domain gV gV_11)
  (GradualNormCheck EnvEmpty gu ev gU_11)
  (GradualNormCheck EnvEmpty gv ev gV_11)
  (CodSub gU_11 gu gU gU_22)
  (CodSub gV_11 gv gV gV_22)
  -------------------------------------------------------------------- "EvCodPair"
  (EvCod ev (EvidenceEv Gamma gU gV) (EvidenceEv Gamma gU_22 gV_22))]
)
;; #source file ./ott/lang_simple.ott  lines 2178 - 2213 
(define-judgment-form
  L
  #:mode (ElabAndType I I O)
  ; #:contract (ElabAndType gs esgU)
  [ (GradualElabSynth Gamma gs es gU)
  ---------------------------------
  (ElabAndType gs Gamma (ElabTypePair es gU))]

)

(define-judgment-form
  L
  #:mode (GetElab I O)
  [
  ---------------------------------
  (GetElab (ElabTypePair es gU) es)]
)

(define-judgment-form
  L
  #:mode (GetType I O)
  [
  ---------------------------------
  (GetType (ElabTypePair es gU) gU)]
)

(define (typePairToRealPair pr) 
  (cons 
    (first (judgment-holds (GetElab ,pr es) es) )
    (first (judgment-holds (GetType ,pr gU) gU) )
  ))

