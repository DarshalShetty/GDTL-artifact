;; #source  
;;; generated by Ott 0.28 from: ./ott/lang_simple.ott

#lang racket
(require redex/reduction-semantics)

;; #source file ./ott/lang_simple.ott  lines 4 - 6 
;; #source file ./ott/lang_simple.ott  lines 8 - 16 
(provide (all-defined-out))

(define currently-defined-vars 
  (make-hasheq))

;; #source file ./ott/lang_simple.ott  lines 18 - 94 
;; #source file ./ott/lang_simple.ott  lines 99 - 101 
;; #source file ./ott/lang_simple.ott  lines 104 - 104 
;; #source file ./ott/lang_simple.ott  lines 110 - 118 and file ./ott/lang_simple.ott  lines 123 - 131 and file ./ott/lang_simple.ott  lines 135 - 169 and file ./ott/lang_simple.ott  lines 174 - 183 and file ./ott/lang_simple.ott  lines 192 - 197 and file ./ott/lang_simple.ott  lines 200 - 205 and file ./ott/lang_simple.ott  lines 207 - 209 and file ./ott/lang_simple.ott  lines 212 - 218 and file ./ott/lang_simple.ott  lines 221 - 223 and file ./ott/lang_simple.ott  lines 225 - 255 and file ./ott/lang_simple.ott  lines 260 - 274 and file ./ott/lang_simple.ott  lines 278 - 283 and file ./ott/lang_simple.ott  lines 285 - 288 and file ./ott/lang_simple.ott  lines 296 - 299 and file ./ott/lang_simple.ott  lines 307 - 318 and file ./ott/lang_simple.ott  lines 322 - 328 and file ./ott/lang_simple.ott  lines 331 - 336 and file ./ott/lang_simple.ott  lines 338 - 346 and file ./ott/lang_simple.ott  lines 350 - 352 and file ./ott/lang_simple.ott  lines 363 - 368 and file ./ott/lang_simple.ott  lines 370 - 376 and file ./ott/lang_simple.ott  lines 422 - 425 and file ./ott/lang_simple.ott  lines 427 - 431 and file ./ott/lang_simple.ott  lines 433 - 437 and file ./ott/lang_simple.ott  lines 565 - 570 and file ./ott/lang_simple.ott  lines 573 - 575 and file ./ott/lang_simple.ott  lines 577 - 579 and file ./ott/lang_simple.ott  lines 581 - 582 
(define-language L  

(level i j ::= natural)

;; #source file ./ott/lang_simple.ott  lines 260 - 274 
  (canonical gu gU ::= 
    (CanonicalLam var gu)
    (CanonicalAtomic grr)
    CanonicalDyn
    (CanonicalPi var gU_11 gU_22))
  ;grammar_pp, 2817: and 
;; #source file ./ott/lang_simple.ott  lines 278 - 283 
  (atomic grr gRR ::= 
    (AtomicSpine var ge)
    (AtomicSet i))
  ;grammar_pp, 2817: and 
;; #source file ./ott/lang_simple.ott  lines 285 - 288 
  (spine ge ::= 
    SpineEmpty
    (SpineCons ge gu))

;; #source file ./ott/lang_simple.ott  lines 433 - 437 
  (Env ::= 
    EnvEmpty
    (EnvExt var gU Env)
    (Envconcat Env_11 Env_22))

;; #source file ./ott/lang_simple.ott  lines 296 - 299 
  (epsilon ep ::= 
    (EvidenceEv Gamma gU))

;; #source file ./ott/lang_simple.ott  lines 135 - 169 
  (term tt ett TT ::= 
    (TermLam var tt)
    (TermApp tt_11 tt_22)
    var
    (TermSet i)
    (TermPi var TT_11 TT_22)
    (TermAnn tt TT)
    (TermEp ep tt)
    TermDyn
    TermError)

(iinf ::= number)

;; #source file ./ott/lang_simple.ott  lines 581 - 582 
  (ent ::= 
    (ENTTriple et gu gU))

;; #source file ./ott/lang_simple.ott  lines 370 - 376 
  (evalContext EC ::= 
    (TermApp hole et)
    (TermApp ev hole)
    (TermPi x hole eT)
    (TermEp ep hole))

;; #source file ./ott/lang_simple.ott  lines 363 - 368 
  (simpleContext SC ::= 
    (TermApp hole t)
    (TermApp sv hole)
    (TermPi x hole T)
    (TermAnn hole T))

;; #source file ./ott/lang_simple.ott  lines 577 - 579 
  (iinfs jinfs ::= 
    (UniverseMultiSetSingleton iinf)
    (UniverseMultiSetSum iinfs jinfs))

;; #source file ./ott/lang_simple.ott  lines 350 - 352 
  (dummyev dummyeV ::= 
    (DummyEvidenceValueEv ep rv)
    (DummyEvidenceValueRaw rv))

;; #source file ./ott/lang_simple.ott  lines 573 - 575 
  (is js ::= 
    (LevelMultiSetSingleton i)
    (LevelMultiSetSum is js))

;; #source file ./ott/lang_simple.ott  lines 322 - 328 
  (rv rV ::= 
    (TermLam var et)
    (TermPi var eV eT)
    (TermSet i)
    TermDyn)

;; #source file ./ott/lang_simple.ott  lines 174 - 183 
  (t T ::= 
    (TermLam var t)
    (TermApp t_11 t_22)
    var
    (TermPi var T_11 T_22)
    (TermSet i)
    (TermAnn t T))

;; #source file ./ott/lang_simple.ott  lines 212 - 218 
  (gtSynth gTSynth ::= 
    (TermApp gt_11 gt_22)
    var
    (TermSet i)
    (TermAnn gt gT)
    TermDyn)

;; #source file ./ott/lang_simple.ott  lines 422 - 425 
  (SGamma ::= 
    EnvEmpty
    (EnvExt var U SGamma)
    (Envconcat SGamma_11 SGamma_22))

;; #source file ./ott/lang_simple.ott  lines 307 - 318 
  (et eT ::= 
    (TermLam var et)
    (TermApp et_11 et_22)
    var
    (TermPi var eT_11 eT_22)
    (TermSet i)
    TermDyn
    (TermEp ep et)
    TermError)

;; #source file ./ott/lang_simple.ott  lines 225 - 255 
  (gt gT ::= 
    (TermLam var gt)
    (TermApp gt_11 gt_22)
    var
    (TermSet i)
    (TermPi var gT_11 gT_22)
    (TermAnn gt gT)
    TermDyn)

;; #source file ./ott/lang_simple.ott  lines 200 - 205 
  (rr RR ::= 
    (AtomicSpine var e)
    (AtomicSet i))

;; #source file ./ott/lang_simple.ott  lines 331 - 336 
  (simpleValue sv sV ::= 
    (TermLam var t)
    (TermPi var sV T)
    (TermSet i))

;; #source file ./ott/lang_simple.ott  lines 427 - 431 
  (Gamma ::= 
    EnvEmpty
    (EnvExt var gU Gamma)
    (Envconcat Gamma_11 Gamma_22))

;; #source file ./ott/lang_simple.ott  lines 123 - 131 
  (ttSynth ettSynth TTSynth ::= 
    (TermApp tt_11 tt_22)
    var
    (TermSet i)
    (TermAnn gt gT)
    TermDyn
    (TermEp ep et))

;; #source file ./ott/lang_simple.ott  lines 207 - 209 
  (e ::= 
    SpineEmpty
    (SpineCons e u))

;; #source file ./ott/lang_simple.ott  lines 221 - 223 
  (gtCheckOnly gTCheckOnly ::= 
    (TermLam var gt)
    (TermPi var gT_11 gT_22))

;; #source file ./ott/lang_simple.ott  lines 192 - 197 
  (u U ::= 
    (CanonicalLam var u)
    (CanonicalAtomic rr)
    (CanonicalPi var U_11 U_22))

;; #source file ./ott/lang_simple.ott  lines 338 - 346 
  (ev eV ::= 
    (TermEp ep rv)
    (TermPi var eV eT)
    (TermLam var et)
    (TermSet i)
    TermDyn)
   (var x y z X Y Z ::= variable-not-otherwise-mentioned)

    #:binding-forms

    (TermLam x tt #:refers-to (shadow x))
    (TermPi x TT_11 TT_22 #:refers-to (shadow x))
    (StaticTermLam x t #:refers-to (shadow x))
    (StaticTermPi x T_11 T_22)
    (SCanonicalLam x u #:refers-to (shadow x))

    (GradualTermCheckOnlyLam x gt #:refers-to (shadow x))
    (GradualTermCheckOnlyPi x gT_11 gT_22 #:refers-to (shadow x))
    (GradualTermLam x gt #:refers-to (shadow x))
    (GradualTermPi x gT_11 gT_22 #:refers-to (shadow x))
    (CanonicalLam x gu #:refers-to (shadow x))
    (CanonicalPi x gU_11 gU_22 #:refers-to (shadow x))

    (EvidenceTermLam x et #:refers-to (shadow x))
    (EvidenceTermPi x eT_11 eT_22 #:refers-to (shadow x))
    (RawValueLam x et #:refers-to (shadow x))
    (SimpleValueLam x t #:refers-to (shadow x))
    (SimpleValuePi x sV T #:refers-to (shadow x))
    (EvidenceValuePi x eV eT #:refers-to (shadow x))
    (EvidenceValueLam x et #:refers-to (shadow x))

)

;;;; subrules 
;; #source file ./ott/lang_simple.ott  lines 596 - 596 and file ./ott/lang_simple.ott  lines 597 - 597 and file ./ott/lang_simple.ott  lines 600 - 600 and file ./ott/lang_simple.ott  lines 601 - 601 and file ./ott/lang_simple.ott  lines 602 - 602 and file ./ott/lang_simple.ott  lines 603 - 603 and file ./ott/lang_simple.ott  lines 604 - 604 and file ./ott/lang_simple.ott  lines 605 - 605 and file ./ott/lang_simple.ott  lines 606 - 606 and file ./ott/lang_simple.ott  lines 607 - 607 and file ./ott/lang_simple.ott  lines 609 - 609 and file ./ott/lang_simple.ott  lines 610 - 610 and file ./ott/lang_simple.ott  lines 615 - 615 and file ./ott/lang_simple.ott  lines 616 - 616 and file ./ott/lang_simple.ott  lines 617 - 617 and file ./ott/lang_simple.ott  lines 620 - 620 
;; #source file ./ott/lang_simple.ott  lines 631 - 642 
;; #source file ./ott/lang_simple.ott  lines 644 - 866 

(define (meet gu_1 gu_2)
  (with-handlers ([exn:fail:redex? (lambda (exn) (error 'RuntimeError "Incompatible types:\n    ~a\nand\n   ~a" (pt gu_1) (pt gu_2) ))])
    (meet_ (term (^ ,gu_1 ,gu_2)))
  ))

(define meet_
  (term-match/single L
               [(^ CanonicalDyn gu) (term gu)]
               [(^ gu CanonicalDyn) (term gu)]
               [(^ (CanonicalAtomic (AtomicSet i)) (CanonicalAtomic (AtomicSet i))) (term (CanonicalAtomic (AtomicSet i)))]
               [(^ (CanonicalAtomic (AtomicSpine x SpineEmpty)) (CanonicalAtomic (AtomicSpine x SpineEmpty))) (term (CanonicalAtomic (AtomicSpine x SpineEmpty)))]
               [(^ (CanonicalAtomic (AtomicSpine x (SpineCons ge_1 gu_1))) (CanonicalAtomic (AtomicSpine x (SpineCons ge_2 gu_2))))
                (term-let ([(CanonicalAtomic (AtomicSpine x ge_3)) (meet (term (CanonicalAtomic (AtomicSpine x ge_1))) (term (CanonicalAtomic (AtomicSpine x ge_2))))])
                          (term (CanonicalAtomic (AtomicSpine x (SpineCons ge_3 ,(meet (term gu_1) (term gu_2)))))))]
               [(^ (CanonicalLam x gu_1) (CanonicalLam y gu_2))
                (let ([z (gensym)])
                 (term (CanonicalLam ,z ,(meet (term (substitute gu_1 x ,z)) (term (substitute gu_2 y ,z))) )))]
               [(^ (CanonicalPi x gU_11 gU_12) (CanonicalPi y gU_21 gU_22))
                (let ([z (gensym)])
                 (term (CanonicalPi ,z ,(meet (term gU_11) (term gU_21)) ,(meet (term (substitute gU_12 x ,z)) (term (substitute gU_22 y ,z))) )))]
               ))

(define (eta-expand gu gU)
  (first (judgment-holds (GEtaExpandC ,gu gu_ret ,gU) gu_ret)
))

(define (hsub x_old gu_new gU gu) ((hsub_ gu) x_old gu_new gU) )

(define hsub_
  (term-match/single L
                     [CanonicalDyn (lambda (x_old gu_new gU) (term CanonicalDyn))]
                     [(CanonicalLam x gu) (lambda (x_old gu_new gU)
                                            (term (CanonicalLam x ,(if (equal? (term x) x_old) (term gu) (hsub x_old gu_new gU (term gu))) )))]
                     [(CanonicalPi x gU_1 gU_2)
                      (lambda (x_old gu_new gU)
                        (term (CanonicalPi x
                                         ,(hsub x_old gu_new gU (term gU_1)) 
                                         ,(if (equal? (term x) x_old) (term gU_2) (hsub x_old gu_new gU (term gU_2))))))]
                     [(CanonicalAtomic (AtomicSet i)) (lambda (x_old gu_new gU)
                                                        (term (CanonicalAtomic (AtomicSet i))))]
                     [(CanonicalAtomic (AtomicSpine x ge))
                      (lambda (x_old gu_new gU) (if (equal? (term x) x_old)
                                                    (term-let ([(TermPair gu_ret1 gU_ret2) ((hsub-spine (term ge)) x_old gu_new gU)])
                                                               (term gu_ret1)
                                                               )
                                                               (term (CanonicalAtomic (AtomicSpine x ,((hsub-map-spine (term ge)) x_old gu_new gU)) ))))]
                     )
  )

(define hsub-map-spine
  (term-match/single L
                     [SpineEmpty (lambda (x_old gu_new gU) (term SpineEmpty))]
                     [(SpineCons ge gu) (lambda (x_old gu_new gU)
                                          (term (SpineCons ,((hsub-map-spine (term ge)) x_old gu_new gU) ,(hsub x_old gu_new gU (term gu)))))]))

(define hsub-spine
  (term-match/single L
                     [SpineEmpty (lambda (x gu_new gU) (term (TermPair ,gu_new ,gU)))]
                     [(SpineCons ge gu) (lambda (x gu_new gU) (hsub-spine-withsub (term (TermPair ,(hsub x gu_new gU (term gu)) ,( (hsub-spine (term ge)) x gu_new gU) )) )) ]))

(define hsub-spine-withsub
  (term-match/single L
                     [(TermPair gu_subbed (TermPair (CanonicalLam x gu_body) (CanonicalPi y gU_dom gU_cod) ))
                      (let ([gu_val (hsub (term x) (term gu_subbed) (term gU_dom) (term gu_body))]
                            [gU_type (hsub (term y) (term gu_subbed) (term gU_dom) (term gU_cod))])
                       (term (TermPair ,(eta-expand gu_val gU_type) ,gU_type )))]
                     [(TermPair gu_subbed (TermPair gu_spine CanonicalDyn)) (term (TermPair CanonicalDyn CanonicalDyn))]
                     [(TermPair gu_subbed (TermPair CanonicalDyn (CanonicalPi y gU_dom gU_cod)) ) (term (TermPair CanonicalDyn ,(hsub (term y) (term gu_subbed) (term gU_dom) (term gU_cod))))]))

(define perform-elab-substs
  (term-match/single L 
                     [x (if (hash-has-key? currently-defined-vars (term x) ) 
                            (redex-let L ([ (ENTTriple et gu gU) (hash-ref currently-defined-vars (term x)) ]) (term et)  )
                            (term x) )]
                     [(TermLam x et) (term (TermLam x ,(perform-elab-substs (term et)))) ]
                     [(TermApp et_11 et_22) (term (TermApp ,(perform-elab-substs (term et_11)) ,(perform-elab-substs (term et_22))))]
                     [(TermPi x eT_11 eT_22) (term (TermPi x ,(perform-elab-substs (term eT_11)) ,(perform-elab-substs (term eT_22))))]
                     [(TermSet i) (term (TermSet i))]
                     [TermDyn (term TermDyn)]
                     [(TermEp ep et) (term (TermEp ep ,(perform-elab-substs (term et))))]
                     [TermError (term TermError)]
                     ))

(define-metafunction L 
  succ : i -> i
  [(succ i) ,(+ (term i) 1)])
  
  (define-metafunction L 
  pred : i -> i
  [(pred i) ,(- (term i) 1)])

(define-metafunction L 
  esubst : et var et -> et 
  [(esubst x_old x_old et_new) et_new ]
  [(esubst y x_old et_new) y (side-condition (not (equal? (term x_old) (term y)))) ]
  [(esubst (TermPi y eT_1 eT_2) x_old et_new) 
    (TermPi y (esubst eT_1 x_old et_new) (esubst eT_2 x_old et_new ))
    (side-condition (not (equal? (term x_old) (term y))))
  ]
  [(esubst (TermPi x_old eT_1 eT_2) x_old et_new) 
    (TermPi y (esubst eT_1 x_old et_new) eT_2)
  ]
  [(esubst (TermLam y et) x_old et_new) 
    (TermLam y (esubst et x_old et_new ))
    (side-condition (not (equal? (term x_old) (term y))))]
  [(esubst (TermLam x_old et) x_old et_new) 
    (TermLam y et)]
  [(esubst (TermApp et_1 et_2) x_old et_new) (TermApp (esubst et_1 x_old et_new) (esubst et_2 x_old et_new))]
  [(esubst (TermEp (EvidenceEv Gamma gU_1 ) et) x_old et_new) (TermEp (EvidenceEv Gamma_new gU_new) (esubst et x_old et_new))
    (judgment-holds (GVarLook x_old gU_V Gamma))
    (judgment-holds (GNCheck Gamma gu_esnorm et_new gU_V))
    (judgment-holds (GradualEnvSub x_old gU_V gu_esnorm Gamma Gamma_new))
    (judgment-holds (GHsub  x_old gU_V gu_esnorm gU_1 gU_new))]
  [(esubst (TermEp (EvidenceEv Gamma gU_1 ) et) x_old et_new) (TermEp (EvidenceEv Gamma gU_1 ) (esubst et x_old et_new))
    (side-condition (empty? (judgment-holds (GVarLook x_old gU_V Gamma) gU_V)))
  ]
  [(esubst (TermSet i) x_old et_new) (TermSet i) ]
  [(esubst TermDyn x_old et_new) TermDyn]
)

(define-metafunction L 
 is-check-only : term -> boolean
 [(is-check-only TermDyn) #t]
 [(is-check-only (TermPi x TT_1 TT_2)) #t]
 [(is-check-only (TermLam x tt)) #t]
 [(is-check-only tt) #f] 
)

(define (closed et l)
  ((closed_ l) et))

(define (closed_ l)
  (term-match/single L
   [TermDyn #t]
   [x (member (term x) l)]
   [(TermApp et_1 et_2) (and (closed (term et_1) l) (closed (term et_2) l))]
   [(TermLam x et) (closed (term et) (cons (term x) l))]
   [(TermSet i) #t]
   [(TermPi x eT_1 eT_2) (and (closed (term eT_1) l) (closed  (term eT_2) (cons (term x) l)))]
   [TermError #t]
   [(TermEp ep et) (closed (term et) l)]
   ))

(define (closed-holds et)
  (andmap (lambda (et_result) (closed et_result empty)) (with-handlers ([(lambda (x) true) (lambda (x) '())])
                                                          (apply-reduction-relation Step et))))

(define-metafunction L 
 is-check-pair : term gU -> boolean
 [(is-check-pair TermDyn gU) #t]
 [(is-check-pair (TermPi x TT_1 TT_2) (CanonicalAtomic (AtomicDyn))) #t]
 [(is-check-pair (TermPi x TT_1 TT_2) (CanonicalAtomic (AtomicSet i))) #t]
 [(is-check-pair (TermLam x tt) (CanonicalAtomic (AtomicDyn))) #t]
 [(is-check-pair (TermLam x tt) (CanonicalPi y gU gU_V)) #t]
 [(is-check-pair tt gU) #f] 
)

(define-metafunction L 
 is-set-pair : gU gU_V -> boolean
 [(is-set-pair (CanonicalAtomic (AtomicSet i)) (CanonicalAtomic (AtomicSet j))) #t (side-condition (< (term i) (term j)))]
 [(is-set-pair gU gU_V) #f] 
)

(define-metafunction L 
 type-in-ev : ep -> gU
 [(type-in-ev (EvidenceEv Gamma gU)) gU]
)

(define (pt tm)
  (with-handlers ([exn:fail:redex?
                   (lambda (exn) (format "~a" tm))])
    (pretty-term tm)
    ))

(define pretty-term
    (term-match/single L
    [x (symbol->string (term x))]
    [(TermLam x tt) (string-append "(λ " (pt (term x)) " . " (pt (term tt)) ")")]
    [(TermPi x TT_1 TT_2) (string-append "(( " (pt (term x)) " : " (pt (term TT_1)) ") -> " (pt (term TT_2)) ")")]
    [(TermSet i) (string-append "Set" (number->string (term i)))]
    [(TermApp tt_1 tt_2) (string-append "(" (pt (term tt_1)) " " (pt (term tt_2)) ")")]
    [TermDyn "?"]
    [TermError "⊥"]
    [(TermAnn tt_1 tt_2) (string-append (pt (term tt_1)) " :: " (pt (term tt_2)))]
    [(TermDynAnn gU) (string-append "?" (pt (term gU)))]
    [(TermEp (EvidenceEv Gamma gU ) tt) (string-append "〈" (pt (term gU)) "〉" (pt (term tt)))]
    [(CanonicalAtomic grr) (pt (term grr))]
    [(CanonicalLam x gu) (string-append "(λ " (pt (term x)) " . " (pt (term gu)) ")")]
    [(CanonicalPi x gU gU_V) (string-append "(( " (pt (term x)) " : " (pt (term gU)) ") -> " (pt (term gU_V)) ")")]
    [(AtomicSet i) (string-append "Set" (number->string (term i)))]
    [CanonicalDyn "?"]
    [(AtomicSpine x ge) (string-append "(" (pt (term x)) " " (pt (term ge)) ")")]
    [SpineEmpty ""]
    [(SpineCons ge gu) (string-append (pt (term ge)) " " (pt (term gu)))]
    
    ))

(define (printEvType ep)
 (term-let ([(EvidenceEv Gamma gU ) ep]) (pt (term gU))))

(define-extended-language LContext
  L
  (redexContext RC ::= 
    hole
    (TermApp RC et)
    (TermApp ev RC)
    (TermPi x RC eT)
    (TermEp ep RC))
)

(define Red
  (reduction-relation LContext
  (--> et_1 et_2 (judgment-holds (Step et_1 et_2)))
  )
)

 

;;; definitions 

(define-judgment-form
  L
  #:mode (GVarLook I O I)
  #:contract (GVarLook x gU Gamma)

;; #source file ./ott/lang_simple.ott  lines 875 - 877 
 [
  ------------------------------------- "GVarLookHead"
  (GVarLook x gU (EnvExt x gU Gamma))]

;; #source file ./ott/lang_simple.ott  lines 878 - 882 
 [
   (side-condition ,(not (alpha-equivalent? L (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  (GVarLook x gU_11 Gamma)
  ------------------------------------------- "GVarLookTail"
  (GVarLook x gU_11 (EnvExt y gU_22 Gamma))]

)
(define-judgment-form L 
 
  #:mode (GVarFree I I)
  #:contract (GVarFree x Gamma)

;; #source file ./ott/lang_simple.ott  lines 886 - 888 
 [----------------------- "GFreeLookNil"
  (GVarFree x EnvEmpty)]

;; #source file ./ott/lang_simple.ott  lines 889 - 893 
 [
   (side-condition ,(not (alpha-equivalent? L (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  (GVarFree x Gamma)
  ---------------------------------- "GFreeLookCons"
  (GVarFree x (EnvExt y gU Gamma))]
)

;;; definitions 

(define-judgment-form
  L
  #:mode (Universe I I O)
  #:contract (Universe Gamma gu iinf)

;; #source file ./ott/lang_simple.ott  lines 914 - 917 
 [
   (side-condition ,(> (term  i ) 0)) 
  ----------------------------------------------------------------- "UniverseSet"
  (Universe Gamma (CanonicalAtomic (AtomicSet i))   (succ  i )  )]

;; #source file ./ott/lang_simple.ott  lines 918 - 923 
 [
  (GVarLook x gU Gamma)
  (Universe Gamma gU  i )
   (side-condition ,(> (term  i ) 0)) 
  ---------------------------------------------------------------------------------- "UniverseVar"
  (Universe Gamma (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) )   (pred  i )  )]

;; #source file ./ott/lang_simple.ott  lines 924 - 928 
 [
  (Universe Gamma gU_11  i )
  (Universe (EnvExt x gU_11 Gamma) gU_22  j )
  ------------------------------------------------------------------ "UniversePi"
  (Universe Gamma (CanonicalPi x gU_11 gU_22)  (max   i     j  ) )]

;; #source file ./ott/lang_simple.ott  lines 929 - 932 
 [
  (Universe Gamma gu  i )
  -------------------------------------------- "UniverseLam"
  (Universe Gamma  (CanonicalLam x gu)   i )]

;; #source file ./ott/lang_simple.ott  lines 933 - 937 
 [
  (Universe Gamma (CanonicalAtomic (AtomicSpine x ge))  i )
  (Universe Gamma gu  j )
  ------------------------------------------------------------------------------------------ "UniverseSpine"
  (Universe Gamma (CanonicalAtomic (AtomicSpine x (SpineCons ge gu)))  (max   i     j  ) )]

;; #source file ./ott/lang_simple.ott  lines 938 - 940 
 [
  ---------------------------------------- "UniverseDyn"
  (Universe Gamma CanonicalDyn  +inf.0 )]

)
(define-judgment-form L 
 
  #:mode (SUniverse I I O)
  #:contract (SUniverse SGamma u i)

;; #source file ./ott/lang_simple.ott  lines 946 - 949 
 [
   (side-condition ,(> (term  i ) 0)) 
  ----------------------------------------------------------------- "SUniverseSet"
  (SUniverse SGamma (CanonicalAtomic (AtomicSet i))  (succ  i ) )]

;; #source file ./ott/lang_simple.ott  lines 950 - 955 
 [
  (GVarLook x U SGamma)
  (SUniverse SGamma U i)
   (side-condition ,(> (term  i ) 0)) 
  ---------------------------------------------------------------------------------- "SUniverseVar"
  (SUniverse SGamma (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) )  (pred  i ) )]

;; #source file ./ott/lang_simple.ott  lines 957 - 961 
 [
  (SUniverse SGamma U_11 i)
  (SUniverse (EnvExt x U_11 SGamma) U_22 j)
  -------------------------------------------------------------- "SUniversePi"
  (SUniverse SGamma (CanonicalPi x U_11 U_22)  (max  i   j ) )]

;; #source file ./ott/lang_simple.ott  lines 962 - 964 
 [
  
  --------------------------------------------- "SUniverseLam"
  (SUniverse SGamma  (CanonicalLam x u)   0 )]

;; #source file ./ott/lang_simple.ott  lines 965 - 969 
 [
  
  (SUniverse SGamma (CanonicalAtomic (AtomicSpine x e)) i)
  (SUniverse SGamma u j)
  -------------------------------------------------------------------------------------- "SUniverseSpine"
  (SUniverse SGamma (CanonicalAtomic (AtomicSpine x (SpineCons e u)))  (max  i   j ) )]
)

;;; definitions 

(define-judgment-form
  L
  #:mode (SHsub I I I I O)
  #:contract (SHsub x U u_11 u_22 u_33)

;; #source file ./ott/lang_simple.ott  lines 990 - 995 
 [
  (SHsub x U u U_11 U_11^)
  (SHsub x U u U_22 U_22^)
   (side-condition ,(not (alpha-equivalent? L (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  --------------------------------------------------------------------- "SHsubPi"
  (SHsub x U u (CanonicalPi y U_11 U_22) (CanonicalPi y U_11^ U_22^))]

;; #source file ./ott/lang_simple.ott  lines 997 - 1000 
 [
   (side-condition ,(not (alpha-equivalent? L (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  ----------------------------------------------------------------------------------------------------------------- "SHsubDiffNil"
  (SHsub x U u (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ))]

;; #source file ./ott/lang_simple.ott  lines 1001 - 1006 
 [
  
   (side-condition ,(not (alpha-equivalent? L (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  (SHsub x U u (CanonicalAtomic (AtomicSpine y e)) (CanonicalAtomic (AtomicSpine y e_^)))
  (SHsub x U u u_22 u_33)
  --------------------------------------------------------------------------------------------------------------------------- "SHsubDiffCons"
  (SHsub x U u (CanonicalAtomic (AtomicSpine y (SpineCons e u_22))) (CanonicalAtomic (AtomicSpine y (SpineCons e_^ u_33))))]

;; #source file ./ott/lang_simple.ott  lines 1009 - 1011 
 [
  ------------------------------------------------------------------------------- "SHsubSet"
  (SHsub x U u (CanonicalAtomic (AtomicSet i)) (CanonicalAtomic (AtomicSet i)))]

;; #source file ./ott/lang_simple.ott  lines 1013 - 1017 
 [
  
  (SHsub x U u u_22 u_33)
   (side-condition ,(not (alpha-equivalent? L (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  --------------------------------------------------------------- "SHsubLam"
  (SHsub x U u  (CanonicalLam y u_22)   (CanonicalLam y u_33) )]

;; #source file ./ott/lang_simple.ott  lines 1022 - 1025 
 [
  
  (SHsubR x U u_11 (SpineCons e u_22) u_33 U_^)
  ---------------------------------------------------------------------------- "SHsubSpine"
  (SHsub x U u_11 (CanonicalAtomic (AtomicSpine x (SpineCons e u_22))) u_33)]

)
(define-judgment-form L 
 
  #:mode (SHsubR I I I I O O)
  #:contract (SHsubR x U u e u_^ U_^)

;; #source file ./ott/lang_simple.ott  lines 1036 - 1038 
 [
  ------------------------------- "SHsubRHead"
  (SHsubR x U u SpineEmpty u U)]

;; #source file ./ott/lang_simple.ott  lines 1039 - 1046 
 [
  
   (SHsubR x U u_11 e  (CanonicalLam y u_11^)  (CanonicalPi y U_11^ U_22^))   (SHsub x U u_11 u_22 u_33) 
   (SHsub y U_11^ u_33 u_11^ u_22^)   (SHsub y U_11^ u_33 U_22^ U_33^) 
  -------------------------------------------------- "SHsubRSpine"
  (SHsubR x U u_11 (SpineCons e u_22) u_22^ U_33^)]
)

;;; definitions 

(define-judgment-form
  L
  #:mode (SWF I)
  #:contract (SWF SGamma)

;; #source file ./ott/lang_simple.ott  lines 1056 - 1058 
 [---------------- "SWFEmpty"
  (SWF EnvEmpty)]

;; #source file ./ott/lang_simple.ott  lines 1059 - 1062 
 [
    (SWF SGamma)   (StaticSet SGamma U)    (GVarFree x SGamma) 
  --------------------------- "SWFExt"
  (SWF (EnvExt x U SGamma))]

)
(define-judgment-form L 
 
  #:mode (StaticSet I I)
  #:contract (StaticSet SGamma U)

;; #source file ./ott/lang_simple.ott  lines 1073 - 1076 
 [
  
  (SCSynth SGamma rr (CanonicalAtomic (AtomicSet i)))
  ----------------------------------------- "StaticSetSet"
  (StaticSet SGamma (CanonicalAtomic rr))]

;; #source file ./ott/lang_simple.ott  lines 1079 - 1084 
 [
  (StaticSet SGamma U_11)
  (SWF (EnvExt x U_11 SGamma))
  (StaticSet (EnvExt x U_11 SGamma) U_22)
  ---------------------------------------------- "StaticSetPi"
  (StaticSet SGamma (CanonicalPi x U_11 U_22))]

)
(define-judgment-form L 
 
  #:mode (SCSynth I I O)
  #:contract (SCSynth SGamma rr U)

;; #source file ./ott/lang_simple.ott  lines 1092 - 1095 
 [
   (side-condition ,(> (term  i ) 0)) 
  ---------------------------------------------------------------------------- "SCSynthSet"
  (SCSynth SGamma (AtomicSet i) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 1097 - 1101 
 [
  
  (SWF SGamma)
  (GVarLook x U SGamma)
  --------------------------------------------------- "SCSynthVar"
  (SCSynth SGamma  (AtomicSpine  x  SpineEmpty)  U)]

;; #source file ./ott/lang_simple.ott  lines 1105 - 1109 
 [
  
  (SCSynth SGamma (AtomicSpine x e) (CanonicalPi y U_11 U_22))
   (SCCheck SGamma u U_11)   (SHsub y U_11 u U_22 U_33) 
  ------------------------------------------------------- "SCSynthApp"
  (SCSynth SGamma (AtomicSpine x (SpineCons e u)) U_33)]

)
(define-judgment-form L 
 
  #:mode (SCCheck I I I)
  #:contract (SCCheck SGamma u U)

;; #source file ./ott/lang_simple.ott  lines 1117 - 1120 
 [
  
  (SCSynth SGamma rr (CanonicalAtomic RR))
  ------------------------------------------------------------ "SCCheckSynth"
  (SCCheck SGamma (CanonicalAtomic rr) (CanonicalAtomic RR))]

;; #source file ./ott/lang_simple.ott  lines 1121 - 1125 
 [
  (SCSynth SGamma RR (CanonicalAtomic (AtomicSet i)))
   (side-condition ,(and (< 0 (term  i )) (<= (term  i ) (term  j )))) 
  ----------------------------------------------------------------------- "SCCheckLevel"
  (SCCheck SGamma (CanonicalAtomic RR) (CanonicalAtomic (AtomicSet j)))]

;; #source file ./ott/lang_simple.ott  lines 1127 - 1130 
 [
  
   (SWF (EnvExt x U_11 SGamma))   (SCCheck (EnvExt x U_11 SGamma) u U_22) 
  ----------------------------------------------------------------- "SCCheckLam"
  (SCCheck SGamma  (CanonicalLam x u)  (CanonicalPi x U_11 U_22))]

;; #source file ./ott/lang_simple.ott  lines 1131 - 1135 
 [
  (SCCheck SGamma U_11 (CanonicalAtomic (AtomicSet i)))
   (SWF (EnvExt x U_11 SGamma))   (SCCheck (EnvExt x U_11 SGamma) U_22 (CanonicalAtomic (AtomicSet i))) 
  ---------------------------------------------------------------------------- "SCCheckPi"
  (SCCheck SGamma (CanonicalPi x U_11 U_22) (CanonicalAtomic (AtomicSet i)))]
)

;;; definitions 

(define-judgment-form
  L
  #:mode (SSynth I I O)
  #:contract (SSynth SGamma t U)

;; #source file ./ott/lang_simple.ott  lines 1145 - 1149 
 [
  
  (StaticSetNorm SGamma U T)
  (SCheck SGamma t U)
  ----------------------------------- "SSynthAnn"
  (SSynth SGamma  (TermAnn t T)  U)]

;; #source file ./ott/lang_simple.ott  lines 1150 - 1153 
 [
   (side-condition ,(> (term  i ) 0)) 
  ------------------------------------------------------------------------- "SSynthSet"
  (SSynth SGamma (TermSet i) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 1155 - 1159 
 [
  
  (SWF SGamma)
  (GVarLook x U SGamma)
  ------------------------------- "SSynthVar"
  (SSynth SGamma x U)]

;; #source file ./ott/lang_simple.ott  lines 1164 - 1168 
 [
  
   (SSynth SGamma t_11 (CanonicalPi x U_11 U_22))   (SNormCheck SGamma u t_22 U_11) 
  (SHsub x U_11 u U_22 U_33)
  ------------------------------------------ "SSynthApp"
  (SSynth SGamma (TermApp t_11 t_22) U_33)]

)
(define-judgment-form L 
 
  #:mode (SCheck I I I)
  #:contract (SCheck SGamma t U)

;; #source file ./ott/lang_simple.ott  lines 1175 - 1178 
 [
  
  (SSynth SGamma t U)
  --------------------- "SCheckSynth"
  (SCheck SGamma t U)]

;; #source file ./ott/lang_simple.ott  lines 1179 - 1183 
 [
  (SSynth SGamma T (CanonicalAtomic (AtomicSet i)))
   (side-condition ,(and (< 0 (term  i )) (<= (term  i ) (term  j )))) 
  --------------------------------------------------- "SCheckLevel"
  (SCheck SGamma T (CanonicalAtomic (AtomicSet j)))]

;; #source file ./ott/lang_simple.ott  lines 1184 - 1187 
 [
    (SNormCheck SGamma U T_11 (CanonicalAtomic (AtomicSet i)))   (SWF (EnvExt x U SGamma))    (SCheck (EnvExt x U SGamma) T_22 (CanonicalAtomic (AtomicSet i))) 
  ---------------------------------------------------------------------- "SCheckPi"
  (SCheck SGamma (TermPi x T_11 T_22) (CanonicalAtomic (AtomicSet i)))]

;; #source file ./ott/lang_simple.ott  lines 1189 - 1193 
 [
  
  (SWF (EnvExt x U_11 SGamma))
  (SCheck (EnvExt x U_11 SGamma) t U_22)
  ----------------------------------------------------------- "SCheckLam"
  (SCheck SGamma  (TermLam x t)  (CanonicalPi x U_11 U_22))]

)
(define-judgment-form L 
 
  #:mode (StaticSetNorm I O I)
  #:contract (StaticSetNorm SGamma U T)

;; #source file ./ott/lang_simple.ott  lines 1206 - 1209 
 [
  (SNormSynth SGamma T U (CanonicalAtomic (AtomicSet i)))
  ---------------------------- "StaticSetNormSynth"
  (StaticSetNorm SGamma U T)]

;; #source file ./ott/lang_simple.ott  lines 1210 - 1214 
 [
  (StaticSetNorm SGamma U_11 T_11)
  (StaticSetNorm (EnvExt x U_11 SGamma) U_22 T_22)
  ----------------------------------------------------------------------- "StaticSetNormPi"
  (StaticSetNorm SGamma (CanonicalPi x U_11 U_22) (TermPi x T_11 T_22))]

)
(define-judgment-form L 
 
  #:mode (SNormSynth I I O O)
  #:contract (SNormSynth SGamma t u U)

;; #source file ./ott/lang_simple.ott  lines 1220 - 1224 
 [
  
  (StaticSetNorm SGamma U T)
  (SNormCheck SGamma u t U)
  ----------------------------------------- "SNormSynthAnn"
  (SNormSynth SGamma  (TermAnn t T)  u U)]

;; #source file ./ott/lang_simple.ott  lines 1225 - 1228 
 [
   (side-condition ,(> (term  i ) 0)) 
  ------------------------------------------------------------------------------------------------------------- "SNormSynthSet"
  (SNormSynth SGamma (TermSet i) (CanonicalAtomic (AtomicSet i)) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 1230 - 1235 
 [
  
  (SWF SGamma)
  (GVarLook x U SGamma)
  (EtaExpand  (AtomicSpine  x  SpineEmpty)  u U)
  ------------------------------------- "SNormSynthVar"
  (SNormSynth SGamma x u U)]

;; #source file ./ott/lang_simple.ott  lines 1240 - 1245 
 [
  
  (SNormSynth SGamma t_11  (CanonicalLam x u_11)  (CanonicalPi x U_11 U_22))
  (SNormCheck SGamma u_22 t_22 U_11)
   (SHsub x U_11 u_22 u_11 u_33)   (SHsub x U_11 u_22 U_22 U_33) 
  --------------------------------------------------- "SNormSynthApp"
  (SNormSynth SGamma (TermApp t_11 t_22) u_33 U_33)]

)
(define-judgment-form L 
 
  #:mode (SNormCheck I O I I)
  #:contract (SNormCheck SGamma u t U)

;; #source file ./ott/lang_simple.ott  lines 1254 - 1257 
 [
  
  (SNormSynth SGamma t u U)
  --------------------------- "SNormCheckSynth"
  (SNormCheck SGamma u t U)]

;; #source file ./ott/lang_simple.ott  lines 1258 - 1262 
 [
  (SNormSynth SGamma T U (CanonicalAtomic (AtomicSet i)))
   (side-condition ,(and (< 0 (term  i )) (<= (term  i ) (term  j )))) 
  --------------------------------------------------------- "SNormCheckLevel"
  (SNormCheck SGamma U T (CanonicalAtomic (AtomicSet j)))]

;; #source file ./ott/lang_simple.ott  lines 1264 - 1269 
 [
  (SNormCheck SGamma U_11 T_11 (CanonicalAtomic (AtomicSet i)))
  (SWF (EnvExt x U_11 SGamma))
  (SNormCheck (EnvExt x U_11 SGamma) U_22 T_22 (CanonicalAtomic (AtomicSet i)))
  ---------------------------------------------------------------------------------------------------- "SNormCheckPi"
  (SNormCheck SGamma (CanonicalPi x U_11 U_22) (TermPi x T_11 T_22) (CanonicalAtomic (AtomicSet i)))]

;; #source file ./ott/lang_simple.ott  lines 1270 - 1274 
 [
  
  (SWF (EnvExt x U_11 SGamma))
  (SNormCheck (EnvExt x U_11 SGamma) u t U_22)
  ------------------------------------------------------------------------------------ "SNormCheckLam"
  (SNormCheck SGamma  (CanonicalLam x u)   (TermLam x t)  (CanonicalPi x U_11 U_22))]

)
(define-judgment-form L 
 
  #:mode (EtaExpand I O I)
  #:contract (EtaExpand rr u U)

;; #source file ./ott/lang_simple.ott  lines 1279 - 1281 
 [
  ---------------------------------------------------------- "EtaExpandAtomic"
  (EtaExpand rr (CanonicalAtomic rr) (CanonicalAtomic RR))]

;; #source file ./ott/lang_simple.ott  lines 1283 - 1286 
 [
  
   (EtaExpand  (AtomicSpine  y  SpineEmpty)  u U_11)   (EtaExpand (AtomicSpine x (SpineCons e u)) u U_22) 
  ------------------------------------------------------------------------------ "EtaExpandPi"
  (EtaExpand (AtomicSpine x e)  (CanonicalLam y u)  (CanonicalPi y U_11 U_22))]
)

;;; definitions 

(define-judgment-form
  L
  #:mode (EvDomain I O)
  #:contract (EvDomain ep ep_^)

;; #source file ./ott/lang_simple.ott  lines 1304 - 1307 
 [(Domain gU gU_^)
  ------------------------------------------------------------------------ "EvDomainUnwrap"
  (EvDomain  (EvidenceEv EnvEmpty  gU )   (EvidenceEv EnvEmpty  gU_^ ) )]

)
(define-judgment-form L 
 
  #:mode (Domain I O)
  #:contract (Domain gU_11 gU_22)

;; #source file ./ott/lang_simple.ott  lines 1313 - 1315 
 [-------------------------------------------- "DomainPi"
  (Domain (CanonicalPi x gU_11 gU_22) gU_11)]

;; #source file ./ott/lang_simple.ott  lines 1316 - 1318 
 [------------------------------------ "DomainDyn"
  (Domain CanonicalDyn CanonicalDyn)]

)
(define-judgment-form L 
 
  #:mode (GradualEnvSub I I I I O)
  #:contract (GradualEnvSub x gU gu Gamma Gamma_^)

;; #source file ./ott/lang_simple.ott  lines 1336 - 1338 
 [------------------------------------------- "GradualEnvSubEmpty"
  (GradualEnvSub x gU gu EnvEmpty EnvEmpty)]

;; #source file ./ott/lang_simple.ott  lines 1339 - 1344 
 [
  
   (side-condition ,(not (alpha-equivalent? L (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  (GHsub x gU gu gU_11 gU_22)
  (GradualEnvSub x gU gu Gamma Gamma_^)
  ------------------------------------------------------------------------- "GradualEnvSubVarDiff"
  (GradualEnvSub x gU gu (EnvExt y gU_11 Gamma) (EnvExt y gU_22 Gamma_^))]

;; #source file ./ott/lang_simple.ott  lines 1345 - 1348 
 [
  
  (GradualEnvSub x gU gu Gamma Gamma_^)
  ------------------------------------------------------- "GradualEnvSubVarSame"
  (GradualEnvSub x gU gu (EnvExt x gU_^ Gamma) Gamma_^)]
)
;; #source file ./ott/lang_simple.ott  lines 1350 - 1350 
#| 

;;; definitions 

(define-judgment-form
  L  #:contract (GHsub x gU gu_11 gu_22 gu_33)

;; #source file ./ott/lang_simple.ott  lines 1361 - 1363 
 [--------------------------------------------------------------------------------- "GHsubSet"
  (GHsub x gU gu (CanonicalAtomic (AtomicSet i)) (CanonicalAtomic (AtomicSet i)))]

;; #source file ./ott/lang_simple.ott  lines 1365 - 1367 
 [------------------------------------------- "GHsubDyn"
  (GHsub x gU gu CanonicalDyn CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 1368 - 1373 

;; #source file ./ott/lang_simple.ott  lines 1374 - 1379 
 [ (where   z  ,(gensym)) 
  (GHsub x gU gu gU_11 gU_11^)
  (GHsub x gU gu  (substitute  gU_22   y   z )  gU_22^)
  --------------------------------------------------------------------------- "GHsubPiRdxAlpha"
  (GHsub x gU gu (CanonicalPi y gU_11 gU_22) (CanonicalPi z gU_11^ gU_22^))]

;; #source file ./ott/lang_simple.ott  lines 1381 - 1385 

;; #source file ./ott/lang_simple.ott  lines 1386 - 1390 
 [ (where   z  ,(gensym)) 
  (GHsub x gU gu  (substitute  gu_22   y   z )  gu_22^)
  -------------------------------------------------------------------- "GHsubLamRdxAlpha"
  (GHsub x gU gu  (CanonicalLam y gu_22)   (CanonicalLam z gu_22^) )]

;; #source file ./ott/lang_simple.ott  lines 1391 - 1394 
 [ (side-condition ,(not (alpha-equivalent? L (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  ------------------------------------------------------------------------------------------------------------------- "GHsubDiffNil"
  (GHsub x gU gu (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ))]

;; #source file ./ott/lang_simple.ott  lines 1395 - 1400 
 [ (side-condition ,(not (alpha-equivalent? L (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  (GHsub x gU gu (CanonicalAtomic (AtomicSpine y ge)) (CanonicalAtomic (AtomicSpine y ge_^)))
  (GHsub x gU gu gu_22 gu_33)
  --------------------------------------------------------------------------------------------------------------------------------- "GHsubDiffCons"
  (GHsub x gU gu (CanonicalAtomic (AtomicSpine y (SpineCons ge gu_22))) (CanonicalAtomic (AtomicSpine y (SpineCons ge_^ gu_33))))]

;; #source file ./ott/lang_simple.ott  lines 1403 - 1406 
 [(GHsubR x gU gu ge gu_22 gU_22)
  ------------------------------------------------------------ "GHsubSpine"
  (GHsub x gU gu (CanonicalAtomic (AtomicSpine x ge)) gu_22)]

)
(define-judgment-form L 
 
  #:mode (GHsubR I I I I O O)
  #:contract (GHsubR x gU gu ge gu_22 gU_22)

;; #source file ./ott/lang_simple.ott  lines 1426 - 1428 
 [----------------------------------- "GHsubRHead"
  (GHsubR x gU gu SpineEmpty gu gU)]

;; #source file ./ott/lang_simple.ott  lines 1431 - 1435 
 [ (GHsubR x gU gu ge CanonicalDyn (CanonicalPi y gU_11 gU_22))   (GHsub y gU_11 gu_22 gU_22 gU_33) 
  ---------------------------------------------------------- "GHsubRDynSpine"
  (GHsubR x gU gu (SpineCons ge gu_22) CanonicalDyn gU_33)]

;; #source file ./ott/lang_simple.ott  lines 1436 - 1441 

;; #source file ./ott/lang_simple.ott  lines 1442 - 1447 
 [(GHsubR x gU gu_11 ge gu_22 CanonicalDyn)
  -------------------------------------------------------------------- "GHsubRDynType"
  (GHsubR x gU gu_11 (SpineCons ge gu_22) CanonicalDyn CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 1450 - 1456 
 [(GHsubR x gU gu ge  (CanonicalLam y_11 gu_22)  (CanonicalPi y_22 gU_11 gU_22))
   (GHsub x gU gu gu_11 gu_33)   (GHsub y_11 gU_11 gu_33 gu_22 gu_44) 
   (GHsub y_22 gU_11 gu_33 gU_22 gU_33)   (GEtaExpandC gu_44 gu_55 gU_33) 
  --------------------------------------------------- "GHsubRLamSpineRdxAlpha"
  (GHsubR x gU gu (SpineCons ge gu_11) gu_55 gU_33)]
)
;; #source file ./ott/lang_simple.ott  lines 1460 - 1475 

|#

(define-judgment-form L 
 
  #:mode (GHsub I I I I O)
  #:contract (GHsub x gU gu_11 gu_22 gu_33)

  [ (where gu_33 ,(hsub (term x) (term gu_11) (term gU) (term gu_22)))
  --------------------------------------
  (GHsub x gU gu_11 gu_22 gu_33)
  ]

)

;;; definitions 

(define-judgment-form
  L
  #:mode (EvCodSub I I O)
  #:contract (EvCodSub gu ep ep_^)

;; #source file ./ott/lang_simple.ott  lines 1485 - 1488 
 [(Domain gU gU_^)
  --------------------------------------------------------------------------- "EvCodSubUnwrap"
  (EvCodSub gu  (EvidenceEv EnvEmpty  gU )   (EvidenceEv EnvEmpty  gU_^ ) )]

)
(define-judgment-form L 
 
  #:mode (CodSub I I O)
  #:contract (CodSub gu gU gU_^)

;; #source file ./ott/lang_simple.ott  lines 1494 - 1497 
 [(GHsub x gU_11 gu gU_22 gU_22^)
  ------------------------------------------------ "CodSubPi"
  (CodSub gu (CanonicalPi x gU_11 gU_22) gU_22^)]

;; #source file ./ott/lang_simple.ott  lines 1498 - 1500 
 [--------------------------------------- "CodSubDyn"
  (CodSub gu CanonicalDyn CanonicalDyn)]

)
(define-judgment-form L 
 
  #:mode (BodySub I I I O)
  #:contract (BodySub gU gu gu_22 gu_33)

;; #source file ./ott/lang_simple.ott  lines 1526 - 1529 
 [(GHsub x gU gu gu_22 gu_22^)
  ------------------------------------------------- "BodySubPi"
  (BodySub gU gu  (CanonicalLam x gu_22)  gu_22^)]

;; #source file ./ott/lang_simple.ott  lines 1530 - 1532 
 [------------------------------------------- "BodySubDyn"
  (BodySub gU gu CanonicalDyn CanonicalDyn)]
)

;;; definitions 

(define-judgment-form
  L
  #:mode (GradualSet I I)
  #:contract (GradualSet Gamma gU)

;; #source file ./ott/lang_simple.ott  lines 1543 - 1546 
 [
  (GCSynth Gamma grr CanonicalDyn)
  ------------------------------------------ "GradualSetDynTy"
  (GradualSet Gamma (CanonicalAtomic grr))]

;; #source file ./ott/lang_simple.ott  lines 1547 - 1550 
 [
  (GCSynth Gamma grr (CanonicalAtomic (AtomicSet i)))
  ------------------------------------------ "GradualSetSet"
  (GradualSet Gamma (CanonicalAtomic grr))]

;; #source file ./ott/lang_simple.ott  lines 1553 - 1558 
 [
  (GradualSet Gamma gU_11)
    
  (GradualSet (EnvExt x gU_11 Gamma) gU_22)
  ------------------------------------------------ "GradualSetPi"
  (GradualSet Gamma (CanonicalPi x gU_11 gU_22))]

;; #source file ./ott/lang_simple.ott  lines 1560 - 1562 
 [
  --------------------------------- "GradualSetDynVal"
  (GradualSet Gamma CanonicalDyn)]

)
(define-judgment-form L 
 
  #:mode (WF I)
  #:contract (WF Gamma)

;; #source file ./ott/lang_simple.ott  lines 1568 - 1570 
 [--------------- "WFEmpty"
  (WF EnvEmpty)]

;; #source file ./ott/lang_simple.ott  lines 1571 - 1575 
 [
   (WF Gamma)   (GradualSet Gamma gU) 
  (GVarFree x Gamma)
  -------------------------- "WFExt"
  (WF (EnvExt x gU Gamma))]

)
(define-judgment-form L 
 
  #:mode (GCSynth I I O)
  #:contract (GCSynth Gamma grr gU)

;; #source file ./ott/lang_simple.ott  lines 1581 - 1584 
 [
   (side-condition ,(> (term  i ) 0)) 
  --------------------------------------------------------------------------- "GCSynthSet"
  (GCSynth Gamma (AtomicSet i) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 1586 - 1590 
 [
    
  (GVarLook x gU Gamma)
  --------------------------------------------------- "GCSynthVar"
  (GCSynth Gamma  (AtomicSpine  x  SpineEmpty)  gU)]

;; #source file ./ott/lang_simple.ott  lines 1594 - 1601 
 [
  (GCSynth Gamma (AtomicSpine x ge) gU)
  (Domain gU gU_22)
  (GCCheck Gamma gu gU_22)
  (CodSub gu gU gU_33)
  --------------------------------------------------------- "GCSynthApp"
  (GCSynth Gamma (AtomicSpine x (SpineCons ge gu)) gU_33)]

)
(define-judgment-form L 
 
  #:mode (GCCheck I I I)
  #:contract (GCCheck Gamma gu gU)

;; #source file ./ott/lang_simple.ott  lines 1608 - 1612 
 [
  (GCSynth Gamma grr gU)
  (Consistent gU gU_^)
  -------------------------------------------- "GCCheckSynth"
  (GCCheck Gamma (CanonicalAtomic grr) gU_^)]

;; #source file ./ott/lang_simple.ott  lines 1613 - 1617 
 [
  (GCSynth Gamma gRR (CanonicalAtomic (AtomicSet i)))
   (side-condition ,(and (< 0 (term  i )) (<= (term  i ) (term  j )))) 
  ----------------------------------------------------------------------- "GCCheckLevel"
  (GCCheck Gamma (CanonicalAtomic gRR) (CanonicalAtomic (AtomicSet j)))]

;; #source file ./ott/lang_simple.ott  lines 1619 - 1623 

;; #source file ./ott/lang_simple.ott  lines 1625 - 1630 
 [
   (where   z  ,(gensym)) 
    
  (GCCheck (EnvExt z gU_11 Gamma)  (substitute  gu   x   z )   (substitute  gU_22   y   z ) )
  ------------------------------------------------------------------- "GCCheckLamPiRdxAlpha"
  (GCCheck Gamma  (CanonicalLam x gu)  (CanonicalPi y gU_11 gU_22))]

;; #source file ./ott/lang_simple.ott  lines 1631 - 1635 
 [
    
  (GCCheck (EnvExt x CanonicalDyn Gamma) gu CanonicalDyn)
  ---------------------------------------------------- "GCCheckLamDyn"
  (GCCheck Gamma  (CanonicalLam x gu)  CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 1636 - 1642 
 [
  (ConsistentSet gU_33)
  (GCCheck Gamma gU_11 gU_33)
    
  (GCCheck (EnvExt x gU_11 Gamma) gU_22 gU_33)
  --------------------------------------------------- "GCCheckPi"
  (GCCheck Gamma (CanonicalPi x gU_11 gU_22) gU_33)]

;; #source file ./ott/lang_simple.ott  lines 1644 - 1647 
 [
  (GradualSet Gamma gU)
  --------------------------------- "GCCheckDyn"
  (GCCheck Gamma CanonicalDyn gU)]

)
(define-judgment-form L 
 
  #:mode (ConsistentSet I)
  #:contract (ConsistentSet gU)

;; #source file ./ott/lang_simple.ott  lines 1655 - 1657 
 [------------------------------------------------- "ConsistentSetSet"
  (ConsistentSet (CanonicalAtomic (AtomicSet i)))]

;; #source file ./ott/lang_simple.ott  lines 1658 - 1660 
 [------------------------------ "ConsistentSetDyn"
  (ConsistentSet CanonicalDyn)]

)
(define-judgment-form L 
 
  #:mode (Consistent I I)
  #:contract (Consistent gU gU_^)

;; #source file ./ott/lang_simple.ott  lines 1670 - 1672 
 [-------------------- "ConsistentEq"
  (Consistent gu gu)]

;; #source file ./ott/lang_simple.ott  lines 1673 - 1677 

;; #source file ./ott/lang_simple.ott  lines 1679 - 1684 
 [ (where   z  ,(gensym)) 
  (Consistent gU_11 gU_11^)
  (Consistent  (substitute  gU_22   x   z )   (substitute  gU_22^   y   z ) )
  ------------------------------------------------------------------------ "ConsistentPiRdxAlpha"
  (Consistent (CanonicalPi x gU_11 gU_22) (CanonicalPi y gU_11^ gU_22^))]

;; #source file ./ott/lang_simple.ott  lines 1685 - 1688 

;; #source file ./ott/lang_simple.ott  lines 1690 - 1694 
 [ (where   z  ,(gensym)) 
  (Consistent  (substitute  gu   x   z )   (substitute  gu_^   y   z ) )
  ------------------------------------------------------------ "ConsistentLamRdxAlpha"
  (Consistent  (CanonicalLam x gu)   (CanonicalLam y gu_^) )]

;; #source file ./ott/lang_simple.ott  lines 1695 - 1699 
 [(Consistent (CanonicalAtomic (AtomicSpine x ge)) (CanonicalAtomic (AtomicSpine x ge_^)))
  (Consistent gu gu_^)
  -------------------------------------------------------------------------------------------------------------------------- "ConsistentApp"
  (Consistent (CanonicalAtomic (AtomicSpine x (SpineCons ge gu))) (CanonicalAtomic (AtomicSpine x (SpineCons ge_^ gu_^))))]

;; #source file ./ott/lang_simple.ott  lines 1700 - 1702 
 [------------------------------ "ConsistentDynL"
  (Consistent CanonicalDyn gu)]

;; #source file ./ott/lang_simple.ott  lines 1703 - 1705 
 [------------------------------ "ConsistentDynR"
  (Consistent gu CanonicalDyn)]
)

;;; definitions 

(define-judgment-form
  L
  #:mode (EvMeet I I O)
  #:contract (EvMeet ep_11 ep_22 ep_33)

;; #source file ./ott/lang_simple.ott  lines 1716 - 1719 
 [(Meet gU_11 gU_22 gU_33)
  ---------------------------------------------------------------------------------------------------------- "EvMeetUnwrap"
  (EvMeet  (EvidenceEv EnvEmpty  gU_11 )   (EvidenceEv EnvEmpty  gU_22 )   (EvidenceEv EnvEmpty  gU_33 ) )]
)
;; #source file ./ott/lang_simple.ott  lines 1720 - 1720 
#| 

;;; definitions 

(define-judgment-form
  L
  #:mode (Meet I I O)
  #:contract (Meet gU_11 gU_22 gU_33)

;; #source file ./ott/lang_simple.ott  lines 1731 - 1735 

;; #source file ./ott/lang_simple.ott  lines 1737 - 1742 
 [ (where   z  ,(gensym)) 
  (Meet gU_11 gU_11^ gU_11^^)
  (Meet  (substitute  gU_22   x   z )   (substitute  gU_22^   y   z )  gU_22^^)
  -------------------------------------------------------------------------------------------------- "MeetPiRdxAlpha"
  (Meet (CanonicalPi x gU_11 gU_22) (CanonicalPi y gU_11^ gU_22^) (CanonicalPi z gU_11^^ gU_22^^))]

;; #source file ./ott/lang_simple.ott  lines 1743 - 1746 

;; #source file ./ott/lang_simple.ott  lines 1748 - 1752 
 [ (where   z  ,(gensym)) 
  (Meet  (substitute  gu   x   z )   (substitute  gu_^   y   z )  gu_^^)
  ------------------------------------------------------------------------- "MeetLamRdxAlpha"
  (Meet (CanonicalLam x gu) (CanonicalLam y gu_^) (CanonicalLam z gu_^^))]

;; #source file ./ott/lang_simple.ott  lines 1753 - 1757 
 [(Meet gu gu_^ gu_^^)
  (Meet (CanonicalAtomic (AtomicSpine x ge)) (CanonicalAtomic (AtomicSpine x ge_^)) (CanonicalAtomic (AtomicSpine x ge_^^)))
  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ "MeetApp"
  (Meet (CanonicalAtomic (AtomicSpine x (SpineCons ge gu))) (CanonicalAtomic (AtomicSpine x (SpineCons ge_^ gu_^))) (CanonicalAtomic (AtomicSpine x (SpineCons ge_^^ gu_^^))))]

;; #source file ./ott/lang_simple.ott  lines 1758 - 1760 
 [--------------------------- "MeetDynL"
  (Meet CanonicalDyn gU gU)]

;; #source file ./ott/lang_simple.ott  lines 1761 - 1764 
 [ (side-condition ,(not (alpha-equivalent? L (term  gU ) (term  CanonicalDyn )))) 
  --------------------------- "MeetDynR"
  (Meet gU CanonicalDyn gU)]

;; #source file ./ott/lang_simple.ott  lines 1765 - 1768 
 [ (side-condition ,(not (alpha-equivalent? L (term  gu ) (term  CanonicalDyn )))) 
  ----------------- "MeetRefl"
  (Meet gu gu gu)]

)
(define-judgment-form L 
 
  #:mode (MorePrecise I I)
  #:contract (MorePrecise gU gU_^)

;; #source file ./ott/lang_simple.ott  lines 1776 - 1780 

;; #source file ./ott/lang_simple.ott  lines 1782 - 1787 
 [ (where   z  ,(gensym)) 
  (MorePrecise gU_11 gU_11^)
  (MorePrecise  (substitute  gU_22   x   z )   (substitute  gU_22^   y   z ) )
  ------------------------------------------------------------------------- "MorePrecisePiRdxAlpha"
  (MorePrecise (CanonicalPi x gU_11 gU_22) (CanonicalPi y gU_11^ gU_22^))]

;; #source file ./ott/lang_simple.ott  lines 1788 - 1791 

;; #source file ./ott/lang_simple.ott  lines 1793 - 1797 
 [ (where   z  ,(gensym)) 
  (MorePrecise  (substitute  gu   x   z )   (substitute  gu_^   y   z ) )
  --------------------------------------------------------- "MorePreciseLamRdxAlpha"
  (MorePrecise (CanonicalLam x gu) (CanonicalLam y gu_^))]

;; #source file ./ott/lang_simple.ott  lines 1798 - 1802 
 [(MorePrecise gu gu_^)
  (MorePrecise (CanonicalAtomic (AtomicSpine x ge)) (CanonicalAtomic (AtomicSpine x ge_^)))
  --------------------------------------------------------------------------------------------------------------------------- "MorePreciseApp"
  (MorePrecise (CanonicalAtomic (AtomicSpine x (SpineCons ge gu))) (CanonicalAtomic (AtomicSpine x (SpineCons ge_^ gu_^))))]

;; #source file ./ott/lang_simple.ott  lines 1804 - 1806 
 [------------------------------- "MorePreciseDyn"
  (MorePrecise gU CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 1807 - 1810 
 [ (side-condition ,(not (alpha-equivalent? L (term  gU ) (term  CanonicalDyn )))) 
  --------------------- "MorePreciseRefl"
  (MorePrecise gU gU)]
)
;; #source file ./ott/lang_simple.ott  lines 1812 - 1842 

|#

(define-judgment-form L 
 
  #:mode (Meet I I O)
  #:contract (Meet gU_11 gU_22 gU_33)

  [
  (where gU_3 ,(meet (term gU_1) (term gU_2)))
  ---------------------------------
  (Meet gU_1 gU_2 gU_3)
  ]

)

(define-judgment-form L 
 
  #:mode (MorePrecise I I)
  #:contract (MorePrecise gU gU_^)

  [
  (Meet gU_1 gU_2 gU_1)
  ---------------------------------
  (MorePrecise gU_1 gU_2)
  ]

)

 

;;; definitions 

(define-judgment-form
  L
  #:mode (TermPrecise I I)
  #:contract (TermPrecise gt gt_^)

;; #source file ./ott/lang_simple.ott  lines 1854 - 1858 

;; #source file ./ott/lang_simple.ott  lines 1862 - 1865 

;; #source file ./ott/lang_simple.ott  lines 1868 - 1872 
 [
  
  (TermPrecise gt_11 gt_11^)
  (TermPrecise gt_22 gt_22^)
  ------------------------------------------------------------- "TermPreciseApp"
  (TermPrecise (TermApp gt_11 gt_22) (TermApp gt_11^ gt_22^))]

;; #source file ./ott/lang_simple.ott  lines 1873 - 1877 
 [
  
  (TermPrecise gt_11 gt_22)
  (TermPrecise gT_11 gT_22)
  ----------------------------------------------------------- "TermPreciseAscr"
  (TermPrecise (TermAnn gt_11 gT_11) (TermAnn gt_22 gT_22))]

;; #source file ./ott/lang_simple.ott  lines 1878 - 1881 
 [
  -------------------------- "TermPreciseDyn"
  (TermPrecise gt TermDyn)]

;; #source file ./ott/lang_simple.ott  lines 1882 - 1884 
 [--------------------- "TermPreciseRefl"
  (TermPrecise gT gT)]

)
(define-judgment-form L 
 
  #:mode (EvPrecise I I)
  #:contract (EvPrecise ep ep_^)

;; #source file ./ott/lang_simple.ott  lines 1891 - 1894 
 [(MorePrecise gU gU_^)
  ----------------------------------------------------------------- "EvPreciseUnwrap"
  (EvPrecise (EvidenceEv EnvEmpty gU) (EvidenceEv EnvEmpty gU_^))]

)
(define-judgment-form L 
 
  #:mode (EvTermPrecise I I)
  #:contract (EvTermPrecise et et_^)

;; #source file ./ott/lang_simple.ott  lines 1901 - 1905 

;; #source file ./ott/lang_simple.ott  lines 1908 - 1911 

;; #source file ./ott/lang_simple.ott  lines 1913 - 1917 
 [
  
  (EvTermPrecise et_11 et_11^)
  (EvTermPrecise et_22 et_22^)
  --------------------------------------------------------------- "EvTermPreciseApp"
  (EvTermPrecise (TermApp et_11 et_22) (TermApp et_11^ et_22^))]

;; #source file ./ott/lang_simple.ott  lines 1918 - 1922 
 [
  
  (EvTermPrecise et_11 et_22)
  (EvPrecise ep_11 ep_22)
  ----------------------------------------------------------- "EvTermPreciseAscr"
  (EvTermPrecise (TermEp ep_11 et_11) (TermEp ep_22 et_22))]

;; #source file ./ott/lang_simple.ott  lines 1923 - 1925 
 [---------------------------- "EvTermPreciseDyn"
  (EvTermPrecise eT TermDyn)]

;; #source file ./ott/lang_simple.ott  lines 1926 - 1928 
 [------------------------------ "EvTermPreciseErr"
  (EvTermPrecise TermError eT)]

;; #source file ./ott/lang_simple.ott  lines 1929 - 1931 
 [----------------------- "EvTermPreciseRefl"
  (EvTermPrecise eT eT)]

)
(define-judgment-form L 
 
  #:mode (EvConsistent I I I)
  #:contract (EvConsistent ep gU gU_^)

;; #source file ./ott/lang_simple.ott  lines 1938 - 1942 
 [
  (Meet gU_11 gU_22 gU_33)
  (MorePrecise gU gU_33)
  -------------------------------------------------- "EvConsistentDef"
  (EvConsistent (EvidenceEv Gamma gU) gU_11 gU_22)]
)
;; #source file ./ott/lang_simple.ott  lines 1943 - 1943 
#| 

;;; definitions 

(define-judgment-form
  L
  #:mode (EtaPrecise I I)
  #:contract (EtaPrecise gu gu_^)

)
(define-judgment-form L 
 
  #:mode (GammaPrecise I I)
  #:contract (GammaPrecise Gamma Gamma_^)

)
(define-judgment-form L 
 
  #:mode (EtaGammaPrecise I I)
  #:contract (EtaGammaPrecise Gamma Gamma_^)

)
;; #source file ./ott/lang_simple.ott  lines 1960 - 1960 
|# 

;;; definitions 

(define-judgment-form
  L
  #:mode (GSynth I I O)
  #:contract (GSynth Gamma gtSynth gU)

;; #source file ./ott/lang_simple.ott  lines 1978 - 1982 
 [
  
  (GradualSetNorm Gamma gU gT)
  (GCheck Gamma gt gU)
  ------------------------------------- "GSynthAnn"
  (GSynth Gamma  (TermAnn gt gT)  gU)]

;; #source file ./ott/lang_simple.ott  lines 1983 - 1986 
 [
   (side-condition ,(> (term  i ) 0)) 
  ------------------------------------------------------------------------ "GSynthSet"
  (GSynth Gamma (TermSet i) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 1988 - 1992 
 [
  (GVarLook x gU Gamma)
    
  ------------------------------- "GSynthVar"
  (GSynth Gamma x gU)]

;; #source file ./ott/lang_simple.ott  lines 1997 - 2002 
 [
  
   (GSynth Gamma gtSynth_11 gU)      
    (Domain gU gU_^)   (GNCheck Gamma gu gt_22 gU_^)  
  (CodSub gu gU gU_22)
  ------------------------------------------------- "GSynthApp"
  (GSynth Gamma (TermApp gtSynth_11 gt_22) gU_22)]

;; #source file ./ott/lang_simple.ott  lines 2003 - 2006 
 [
  ------------------------------------- "GSynthDyn"
  (GSynth Gamma TermDyn CanonicalDyn)]

)
(define-judgment-form L 
 
  #:mode (GCheck I I I)
  #:contract (GCheck Gamma gt gU)

;; #source file ./ott/lang_simple.ott  lines 2021 - 2026 
 [
  
  (GSynth Gamma gtSynth gU_^)
  (Consistent gU_^ gU)
  --------------------------- "GCheckSynth"
  (GCheck Gamma gtSynth gU)]

;; #source file ./ott/lang_simple.ott  lines 2027 - 2032 
 [
  (GSynth Gamma gTSynth (CanonicalAtomic (AtomicSet i)))
   (side-condition ,(and (< 0 (term  i )) (<= (term  i ) (term  j )))) 
  -------------------------------------------------------- "GCheckLevel"
  (GCheck Gamma gTSynth (CanonicalAtomic (AtomicSet j)))]

;; #source file ./ott/lang_simple.ott  lines 2041 - 2045 
 [
  
   (GNCheck Gamma gU_^ gT_11 gU)   (ConsistentSet gU) 
        (GCheck (EnvExt x gU_^ Gamma) gT_22 gU) 
  ------------------------------------------ "GCheckPi"
  (GCheck Gamma (TermPi x gT_11 gT_22) gU)]

;; #source file ./ott/lang_simple.ott  lines 2047 - 2051 

;; #source file ./ott/lang_simple.ott  lines 2053 - 2058 
 [
  
   (where   z  ,(gensym)) 
    
  (GCheck (EnvExt z gU_11 Gamma)  (substitute  gt   x   z )   (substitute  gU_22   y   z ) )
  ------------------------------------------------------------- "GCheckLamPiRdxAlpha"
  (GCheck Gamma  (TermLam x gt)  (CanonicalPi y gU_11 gU_22))]

;; #source file ./ott/lang_simple.ott  lines 2060 - 2064 
 [
  
    
  (GCheck (EnvExt x CanonicalDyn Gamma) gt CanonicalDyn)
  ---------------------------------------------- "GCheckLamDyn"
  (GCheck Gamma  (TermLam x gt)  CanonicalDyn)]

)
(define-judgment-form L 
 
  #:mode (GradualSetNorm I O I)
  #:contract (GradualSetNorm Gamma gU TT)

;; #source file ./ott/lang_simple.ott  lines 2082 - 2085 
 [
  
  (GNSynth Gamma TTSynth gU (CanonicalAtomic (AtomicSet i)))
  ----------------------------------- "GradualSetNormSynth"
  (GradualSetNorm Gamma gU TTSynth)]

;; #source file ./ott/lang_simple.ott  lines 2087 - 2091 
 [
  (GradualSetNorm Gamma gU_11 TT_1_1)
  (GradualSetNorm (EnvExt x gU_11 Gamma) gU_22 TT_2_2)
  ----------------------------------------------------------------------------- "GradualSetNormPi"
  (GradualSetNorm Gamma (CanonicalPi x gU_11 gU_22) (TermPi x TT_1_1 TT_2_2))]

;; #source file ./ott/lang_simple.ott  lines 2093 - 2095 
 [
  --------------------------------------------- "GradualSetNormDyn"
  (GradualSetNorm Gamma CanonicalDyn TermDyn)]

)
(define-judgment-form L 
 
  #:mode (GEtaLong I I)
  #:contract (GEtaLong gu gU)

;; #source file ./ott/lang_simple.ott  lines 2101 - 2103 
 [-------------------------------------------------------- "GEtaLongAtomic"
  (GEtaLong (CanonicalAtomic grr) (CanonicalAtomic gRR))]

;; #source file ./ott/lang_simple.ott  lines 2104 - 2106 
 [----------------------------------------------- "GEtaLongAtomicDyn"
  (GEtaLong (CanonicalAtomic grr) CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 2108 - 2111 

;; #source file ./ott/lang_simple.ott  lines 2112 - 2116 
 [ (where   z  ,(gensym)) 
  (GEtaLong  (substitute  gu   x   z )   (substitute  gU   y   z ) )
  ---------------------------------------------------------- "GEtaLongLamRdxAlpha"
  (GEtaLong  (CanonicalLam x gu)  (CanonicalPi y gU_^ gU))]

;; #source file ./ott/lang_simple.ott  lines 2117 - 2119 
 [---------------------------- "GEtaLongDyn"
  (GEtaLong CanonicalDyn gU)]

;; #source file ./ott/lang_simple.ott  lines 2120 - 2122 
 [------------------------------------------ "GEtaLongPi"
  (GEtaLong (CanonicalPi x gU gU_^) gU_^^)]

)
(define-judgment-form L 
 
  #:mode (GEtaExpand I O I)
  #:contract (GEtaExpand grr gu gU)

;; #source file ./ott/lang_simple.ott  lines 2128 - 2130 
 [-------------------------------------------------------------- "GEtaExpandAtomic"
  (GEtaExpand grr (CanonicalAtomic grr) (CanonicalAtomic gRR))]

;; #source file ./ott/lang_simple.ott  lines 2131 - 2133 
 [----------------------------------------------------- "GEtaExpandDyn"
  (GEtaExpand grr (CanonicalAtomic grr) CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 2135 - 2139 
 [(GEtaExpand  (AtomicSpine  y  SpineEmpty)  gu gU_11)
  (GEtaExpand (AtomicSpine x (SpineCons ge gu)) gu_22 gU_22)
  -------------------------------------------------------------------------------------- "GEtaExpandPi"
  (GEtaExpand (AtomicSpine x ge)  (CanonicalLam y gu_22)  (CanonicalPi y gU_11 gU_22))]

)
(define-judgment-form L 
 
  #:mode (GEtaExpandC I O I)
  #:contract (GEtaExpandC gu gu_^ gU)

;; #source file ./ott/lang_simple.ott  lines 2146 - 2149 
 [(GEtaExpand grr gu gU)
  ------------------------------------------- "GEtaExpandCAtomic"
  (GEtaExpandC (CanonicalAtomic grr) gu gU)]

;; #source file ./ott/lang_simple.ott  lines 2150 - 2153 

;; #source file ./ott/lang_simple.ott  lines 2154 - 2158 
 [ (where   z  ,(gensym)) 
  (GEtaExpandC  (substitute  gu   x   z )  gu_^  (substitute  gU_22   x   z ) )
  ----------------------------------------------------------------------------------------- "GEtaExpandCLamRdxAlpha"
  (GEtaExpandC  (CanonicalLam x gu)   (CanonicalLam z gu_^)  (CanonicalPi y gU_11 gU_22))]

;; #source file ./ott/lang_simple.ott  lines 2159 - 2163 
 [(GEtaExpandC gU_11 gU_11^ gU_^^)
  (GEtaExpandC gU_22 gU_22^ gU_^^)
  ------------------------------------------------------------------------------- "GEtaExpandCPi"
  (GEtaExpandC (CanonicalPi x gU_11 gU_22) (CanonicalPi x gU_11^ gU_22^) gU_^^)]

;; #source file ./ott/lang_simple.ott  lines 2165 - 2167 
 [-------------------------------------------- "GEtaExpandCDyn"
  (GEtaExpandC CanonicalDyn CanonicalDyn gU)]

;; #source file ./ott/lang_simple.ott  lines 2168 - 2170 
 [---------------------------------- "GEtaExpandCDynType"
  (GEtaExpandC gu gu CanonicalDyn)]

)
(define-judgment-form L 
 
  #:mode (GNSynth I I O O)
  #:contract (GNSynth Gamma tt gu gU)

;; #source file ./ott/lang_simple.ott  lines 2191 - 2195 
 [
  
  (GradualSetNorm Gamma gU gT)
  (GNCheck Gamma gu gt gU)
  ----------------------------------------- "GNSynthAnn"
  (GNSynth Gamma  (TermAnn gt gT)  gu gU)]

;; #source file ./ott/lang_simple.ott  lines 2196 - 2199 
 [
   (side-condition ,(> (term  i ) 0)) 
  --------------------------------------------------------------------------------------------------------- "GNSynthSet"
  (GNSynth Gamma (TermSet i) (CanonicalAtomic (AtomicSet i)) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 2201 - 2207 
 [
   (side-condition ,(not (hash-has-key? currently-defined-vars (term  x )) )) 
    
  (GVarLook x gU Gamma)
  (GEtaExpand  (AtomicSpine  x  SpineEmpty)  gu gU)
  ----------------------------------- "GNSynthVar"
  (GNSynth Gamma x gu gU)]

;; #source file ./ott/lang_simple.ott  lines 2208 - 2211 
 [
  
   (where (ENTTriple  et   gu   gU ) ,(and (hash-has-key? currently-defined-vars (term  x ) ) (hash-ref currently-defined-vars (term  x )) )) 
  ----------------------------------- "GNSynthVarLook"
  (GNSynth Gamma x gu gU)]

;; #source file ./ott/lang_simple.ott  lines 2216 - 2223 
 [
      (where   x  ,(gensym))    (GNSynth Gamma tt_11 gu_11 gU)    (GEtaExpandC gu_11 gu_11^ (CanonicalPi x CanonicalDyn CanonicalDyn))  
    
   (Domain gU gU_11)   (GNCheck Gamma gu_22 tt_22 gU_11) 
  (BodySub gU_11 gu_22 gu_11^ gu_33)
   (CodSub gu_22 gU gU_22)   (GEtaExpandC gu_33 gu_33^ gU_22) 
  ---------------------------------------------------- "GNSynthApp"
  (GNSynth Gamma (TermApp tt_11 tt_22) gu_33^ gU_22)]

;; #source file ./ott/lang_simple.ott  lines 2225 - 2228 
 [
  --------------------------------------------------- "GNSynthDyn"
  (GNSynth Gamma TermDyn CanonicalDyn CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 2229 - 2232 
 [
  
  (GNCheck Gamma gu et gU)
  ----------------------------------------------------------- "GNSynthEv"
  (GNSynth Gamma (TermEp (EvidenceEv Gamma_^ gU) et) gu gU)]

)
(define-judgment-form L 
 
  #:mode (GNSynthCheck I O I I I I)
  #:contract (GNSynthCheck Gamma gu ttSynth gu_^ gU_^ gU)

;; #source file ./ott/lang_simple.ott  lines 2239 - 2242 
 [
   (side-condition ,(and (< 0 (term  i )) (<= (term  i ) (term  j )))) 
  ---------------------------------------------------------------------------------------------------- "GNSynthCheckLevel"
  (GNSynthCheck Gamma gU TTSynth gU (CanonicalAtomic (AtomicSet i)) (CanonicalAtomic (AtomicSet j)))]

;; #source file ./ott/lang_simple.ott  lines 2243 - 2248 
 [
  
   (side-condition ,(not (judgment-holds (BothSets  gU   gU_^ )) )) 
  (Meet gU gU_^ gU_^^)
   (where  gu  ,(if (alpha-equivalent? (term  gU_^ ) (term  gU_^^ )) (term  gu ) (term  CanonicalDyn ))) 
  -------------------------------------------- "GNSynthCheckConsistent"
  (GNSynthCheck Gamma gu ttSynth gu gU_^ gU)]

)
(define-judgment-form L 
 
  #:mode (GNCheck I O I I)
  #:contract (GNCheck Gamma gu tt gU)

;; #source file ./ott/lang_simple.ott  lines 2256 - 2260 
 [
  
  (GNSynth Gamma ttSynth gu_^ gU_^)
  (GNSynthCheck Gamma gu ttSynth gu_^ gU_^ gU)
  ------------------------------- "GNCheckSynthRdx"
  (GNCheck Gamma gu ttSynth gU)]

;; #source file ./ott/lang_simple.ott  lines 2261 - 2267 

;; #source file ./ott/lang_simple.ott  lines 2269 - 2275 

;; #source file ./ott/lang_simple.ott  lines 2276 - 2281 

;; #source file ./ott/lang_simple.ott  lines 2283 - 2291 
 [
  (ConsistentSet gU_33)
  (GNCheck Gamma gU_11 TT_11 gU_33)
    
  (GNCheck (EnvExt x gU_11 Gamma) gU_22 TT_22 gU_33)
  -------------------------------------------------------------------------- "GNCheckPi"
  (GNCheck Gamma (CanonicalPi x gU_11 gU_22) (TermPi x TT_11 TT_22) gU_33)]

;; #source file ./ott/lang_simple.ott  lines 2292 - 2296 

;; #source file ./ott/lang_simple.ott  lines 2297 - 2302 
 [
   (where   z  ,(gensym)) 
    
  (GNCheck (EnvExt z gU_11 Gamma) gu  (substitute  tt   x   z )   (substitute  gU_22   y   z ) )
  ------------------------------------------------------------------------------------ "GNCheckLamPiRdxAlpha"
  (GNCheck Gamma  (CanonicalLam z gu)   (TermLam x tt)  (CanonicalPi y gU_11 gU_22))]

;; #source file ./ott/lang_simple.ott  lines 2303 - 2307 
 [
    
  (GNCheck (EnvExt x CanonicalDyn Gamma) gu tt CanonicalDyn)
  --------------------------------------------------------------------- "GNCheckLamDyn"
  (GNCheck Gamma  (CanonicalLam x gu)   (TermLam x tt)  CanonicalDyn)]

)
(define-judgment-form L 
 
  #:mode (GElabSynth I I O O)
  #:contract (GElabSynth Gamma gtSynth et gU)

;; #source file ./ott/lang_simple.ott  lines 2330 - 2334 
 [
  
  (GradualSetNorm Gamma gU gT)
  (GElabCheck Gamma et gt gU)
  -------------------------------------------- "GElabSynthAnn"
  (GElabSynth Gamma  (TermAnn gt gT)  et gU)]

;; #source file ./ott/lang_simple.ott  lines 2335 - 2338 
 [
   (side-condition ,(> (term  i ) 0)) 
  ---------------------------------------------------------------------------------------- "GElabSynthSet"
  (GElabSynth Gamma (TermSet i) (TermSet i) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 2340 - 2345 
 [
   (side-condition ,(not (hash-has-key? currently-defined-vars (term  x )) )) 
    
  (GVarLook x gU Gamma)
  ----------------------------------------------- "GElabSynthVar"
  (GElabSynth Gamma x x gU)]

;; #source file ./ott/lang_simple.ott  lines 2346 - 2349 
 [
  
   (where (ENTTriple  et   gu   gU ) ,(and (hash-has-key? currently-defined-vars (term  x ) ) (hash-ref currently-defined-vars (term  x )) )) 
  ----------------------------------------------- "GElabSynthVarLook"
  (GElabSynth Gamma x x gU)]

;; #source file ./ott/lang_simple.ott  lines 2353 - 2359 
 [
  
  (GElabSynth Gamma gtSynth_11 et_11 gU)
  (Domain gU gU_11)
  (GradualNECheck Gamma gu et_22 gt_22 gU_11)
  (CodSub gu gU gU_22)
  --------------------------------------------------------------------------- "GElabSynthApp"
  (GElabSynth Gamma (TermApp gtSynth_11 gt_22) (TermApp et_11 et_22) gU_22)]

;; #source file ./ott/lang_simple.ott  lines 2360 - 2363 
 [
  ------------------------------------------------------------------------------------------ "GElabSynthDyn"
  (GElabSynth Gamma TermDyn (TermEp (EvidenceEv Gamma CanonicalDyn) TermDyn) CanonicalDyn)]

)
(define-judgment-form L 
 
  #:mode (GElabSynthCheck I O I I I I)
  #:contract (GElabSynthCheck Gamma et_^ gtSynth et gU_^ gU)

;; #source file ./ott/lang_simple.ott  lines 2371 - 2374 
 [
   (side-condition ,(and (< 0 (term  i )) (<= (term  i ) (term  j )))) 
  ------------------------------------------------------------------------------------------------------- "GElabSynthCheckLevel"
  (GElabSynthCheck Gamma eT gTSynth eT (CanonicalAtomic (AtomicSet i)) (CanonicalAtomic (AtomicSet j)))]

;; #source file ./ott/lang_simple.ott  lines 2378 - 2383 
 [
  
   (side-condition ,(not (judgment-holds (BothSets  gU_^^   gU )) )) 
  (Meet gU_^^ gU gU_^)
  --------------------------------------------------------------------------------- "GElabSynthCheckConsistent"
  (GElabSynthCheck Gamma (TermEp (EvidenceEv Gamma gU_^) et) gtSynth et gU gU_^^)]

)
(define-judgment-form L 
 
  #:mode (GElabCheck I O I I)
  #:contract (GElabCheck Gamma et gt gU)

;; #source file ./ott/lang_simple.ott  lines 2397 - 2402 
 [
  
  (GElabSynth Gamma gtSynth et_^ gU_^)
  (GElabSynthCheck Gamma et gtSynth et_^ gU_^ gU)
  ---------------------------------- "GElabCheckSynthRdx"
  (GElabCheck Gamma et gtSynth gU)]

;; #source file ./ott/lang_simple.ott  lines 2403 - 2409 

;; #source file ./ott/lang_simple.ott  lines 2410 - 2415 

;; #source file ./ott/lang_simple.ott  lines 2425 - 2433 
 [
  (ConsistentSet gU)
  (GradualNECheck Gamma gU_11 eT_11 gT_11 gU)
    
  (GElabCheck (EnvExt x gU_11 Gamma) eT_22 gT_22 gU)
  --------------------------------------------------------------------- "GElabCheckPi"
  (GElabCheck Gamma (TermPi x eT_11 eT_22) (TermPi x gT_11 gT_22) gU)]

;; #source file ./ott/lang_simple.ott  lines 2434 - 2438 

;; #source file ./ott/lang_simple.ott  lines 2439 - 2444 
 [
  
   (where   z  ,(gensym)) 
    
  (GElabCheck (EnvExt z gU_11 Gamma) et  (substitute  gt   x   z )   (substitute  gU_22   y   z ) )
  ---------------------------------------------------------------------------------- "GElabCheckLamPiRdxAlpha"
  (GElabCheck Gamma  (TermLam z et)   (TermLam x gt)  (CanonicalPi y gU_11 gU_22))]

;; #source file ./ott/lang_simple.ott  lines 2445 - 2449 
 [
  
    
  (GElabCheck (EnvExt x CanonicalDyn Gamma) et gt CanonicalDyn)
  ------------------------------------------------------------------- "GElabCheckLamDyn"
  (GElabCheck Gamma  (TermLam x et)   (TermLam x gt)  CanonicalDyn)]

)
(define-judgment-form L 
 
  #:mode (GradualNESynth I I O O O)
  #:contract (GradualNESynth Gamma gtSynth et gu gU)

;; #source file ./ott/lang_simple.ott  lines 2465 - 2469 
 [
  
  (GradualSetNorm Gamma gU gT)
  (GradualNECheck Gamma gu et gt gU)
  --------------------------------------------------- "GradualNESynthAnn"
  (GradualNESynth Gamma  (TermAnn gt gT)  et gu gU)]

;; #source file ./ott/lang_simple.ott  lines 2470 - 2473 
 [
   (side-condition ,(> (term  i ) 0)) 
  ---------------------------------------------------------------------------------------------------------------------------- "GradualNESynthSet"
  (GradualNESynth Gamma (TermSet i) (TermSet i) (CanonicalAtomic (AtomicSet i)) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 2475 - 2481 
 [
   (side-condition ,(not (hash-has-key? currently-defined-vars (term  x )) )) 
    
  (GVarLook x gU Gamma)
  (GEtaExpand  (AtomicSpine  x  SpineEmpty)  gu gU)
  ------------------------------------------------------ "GradualNESynthVar"
  (GradualNESynth Gamma x x gu gU)]

;; #source file ./ott/lang_simple.ott  lines 2482 - 2485 
 [
  
   (where (ENTTriple  et   gu   gU ) ,(and (hash-has-key? currently-defined-vars (term  x ) ) (hash-ref currently-defined-vars (term  x )) )) 
  ------------------------------------------------------ "GradualNESynthVarLook"
  (GradualNESynth Gamma x x gu gU)]

;; #source file ./ott/lang_simple.ott  lines 2489 - 2499 
 [
  
  (GradualNESynth Gamma gtSynth_11 et_11 gu gU)
     (where   x  ,(gensym))    (GEtaExpandC gu gu_^ (CanonicalPi x CanonicalDyn CanonicalDyn))  
    
  (Domain gU gU_11)
  (GradualNECheck Gamma gu_22 et_22 gt_22 gU_11)
  (BodySub gU_11 gu_22 gu_^ gu_^^)
  (CodSub gu_22 gU gU_22)
  (GEtaExpandC gu_^^ gu_^^^ gU_22)
  -------------------------------------------------------------------------------------- "GradualNESynthApp"
  (GradualNESynth Gamma (TermApp gtSynth_11 gt_22) (TermApp et_11 et_22) gu_^^^ gU_22)]

;; #source file ./ott/lang_simple.ott  lines 2502 - 2506 
 [
   (side-condition ,(error 'typechecking "Cannot synthesize type for ~a, try adding an annotation?" (pt (term  (TermVar gs) )))) 
  ----------------------------------------------------------------------------------------------------------------------------------------- "GradualNESynthSynthRdxError"
  (GradualNESynth Gamma (TermVar gs) (TermSet  0 ) (CanonicalAtomic (AtomicSet  0 )) (CanonicalAtomic  (AtomicSpine  Set0  SpineEmpty) ))]

)
(define-judgment-form L 
 
  #:mode (BothSets I I)
  #:contract (BothSets gU gU_^)

;; #source file ./ott/lang_simple.ott  lines 2511 - 2513 
 [---------------------------------------------------------------------------- "BothSetsRule"
  (BothSets (CanonicalAtomic (AtomicSet i)) (CanonicalAtomic (AtomicSet j)))]

)
(define-judgment-form L 
 
  #:mode (GradualNESynthCheck I O O I I I I I)
  #:contract (GradualNESynthCheck Gamma gu et_11 gtSynth gu_^ et gU_^ gU)

;; #source file ./ott/lang_simple.ott  lines 2519 - 2522 
 [
   (side-condition ,(and (< 0 (term  i )) (<= (term  i ) (term  j )))) 
  ----------------------------------------------------------------------------------------------------------------- "GradualNESynthCheckLevel"
  (GradualNESynthCheck Gamma gU eT gTSynth gU eT (CanonicalAtomic (AtomicSet i)) (CanonicalAtomic (AtomicSet j)))]

;; #source file ./ott/lang_simple.ott  lines 2527 - 2532 
 [
  
   (side-condition ,(not (judgment-holds (BothSets  gU   gU_^ )) )) 
  (Meet gU gU_^ gU_^^)
   (where  gu_^^  ,(if (alpha-equivalent? (term  gU_^ ) (term  gU_^^ )) (term  gu_^ ) (term  CanonicalDyn ))) 
  ---------------------------------------------------------------------------------------------------- "GradualNESynthCheckConsistent"
  (GradualNESynthCheck Gamma gu_^^ (TermEp (EvidenceEv Gamma gU_^^) et_^) gtSynth gu_^ et_^ gU_^ gU)]

)
(define-judgment-form L 
 
  #:mode (GradualNECheck I O O I I)
  #:contract (GradualNECheck Gamma gu et gt gU)

;; #source file ./ott/lang_simple.ott  lines 2549 - 2553 
 [
  
  (GradualNESynth Gamma gtSynth et_^ gu_^ gU_^)
  (GradualNESynthCheck Gamma gu_^^ et_^^ gtSynth gu_^ et_^ gU_^ gU)
  ----------------------------------------------- "GradualNECheckSynthRdx"
  (GradualNECheck Gamma gu_^^ et_^^ gtSynth gU)]

;; #source file ./ott/lang_simple.ott  lines 2555 - 2562 

;; #source file ./ott/lang_simple.ott  lines 2563 - 2568 

;; #source file ./ott/lang_simple.ott  lines 2578 - 2586 
 [
  (ConsistentSet gU_^^)
  (GradualNECheck Gamma gU_11 eT_11 gT_11 gU_^^)
    
  (GradualNECheck (EnvExt x gU_11 Gamma) gU_22 eT_22 gT_22 gU_^^)
  -------------------------------------------------------------------------------------------------------- "GradualNECheckPi"
  (GradualNECheck Gamma (CanonicalPi x gU_11 gU_22) (TermPi x eT_11 eT_22) (TermPi x gT_11 gT_22) gU_^^)]

;; #source file ./ott/lang_simple.ott  lines 2587 - 2591 

;; #source file ./ott/lang_simple.ott  lines 2592 - 2597 
 [
  
   (where   z  ,(gensym)) 
    
  (GradualNECheck (EnvExt z gU_11 Gamma) gu et  (substitute  gt   x   z )   (substitute  gU_22   y   z ) )
  ------------------------------------------------------------------------------------------------------------ "GradualNECheckLamPiRdxAlpha"
  (GradualNECheck Gamma  (CanonicalLam z gu)   (TermLam z et)   (TermLam x gt)  (CanonicalPi y gU_11 gU_22))]

;; #source file ./ott/lang_simple.ott  lines 2598 - 2602 
 [
  
    
  (GradualNECheck (EnvExt x CanonicalDyn Gamma) gu et gt CanonicalDyn)
  --------------------------------------------------------------------------------------------- "GradualNECheckLamDyn"
  (GradualNECheck Gamma  (CanonicalLam x gu)   (TermLam x et)   (TermLam x gt)  CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 2603 - 2606 
 [
  (GradualSet Gamma gU)
  --------------------------------------------------------------------------------------- "GradualNECheckDyn"
  (GradualNECheck Gamma CanonicalDyn (TermEp (EvidenceEv Gamma gU) TermDyn) TermDyn gU)]
)
;; #source file ./ott/lang_simple.ott  lines 2614 - 2614 
#| 

;;; definitions 

(define-judgment-form
  L
  #:mode (EvType I I I)
  #:contract (EvType Gamma et gU)

;; #source file ./ott/lang_simple.ott  lines 2627 - 2631 
 [
    
  (GVarLook x gU Gamma)
  ------------------------------- "EvTypeVar"
  (EvType Gamma x gU)]

;; #source file ./ott/lang_simple.ott  lines 2635 - 2640 
 [
  
  (EvType Gamma et_11 gU)
  (EvType Gamma et_22  (error "TODO") )
  (EvCod et_22 gU gU_22)
  -------------------------------------------- "EvTypeApp"
  (EvType Gamma (TermApp et_11 et_22) gU_22)]

;; #source file ./ott/lang_simple.ott  lines 2646 - 2652 
 [
  
  (ConsistentSet gU)
  (GNCheck Gamma gU_^ eT_11 gU)
    
  (EvType (EnvExt x gU_^ Gamma) eT_22 gU)
  ------------------------------------------ "EvTypePi"
  (EvType Gamma (TermPi x eT_11 eT_22) gU)]

;; #source file ./ott/lang_simple.ott  lines 2653 - 2656 
 [
   (side-condition ,(> (term  i ) 0)) 
  ------------------------------------------------------------------------ "EvTypeSet"
  (EvType Gamma (TermSet i) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 2658 - 2662 
 [
  
  (EvType Gamma et gU_^)
  (EvConsistent ep gU_^ gU)
  ---------------------------------- "EvTypeEv"
  (EvType Gamma (TermEp ep et) gU)]

;; #source file ./ott/lang_simple.ott  lines 2663 - 2667 
 [
  (EvType Gamma eT (CanonicalAtomic (AtomicSet i)))
   (side-condition ,(and (< 0 (term  i )) (<= (term  i ) (term  j )))) 
  --------------------------------------------------- "EvTypeLevel"
  (EvType Gamma eT (CanonicalAtomic (AtomicSet j)))]

;; #source file ./ott/lang_simple.ott  lines 2672 - 2676 
 [
  
    
  (EvType (EnvExt x gU_11 Gamma) et gU_22)
  ------------------------------------------------------------- "EvTypeLamPi"
  (EvType Gamma  (TermLam x et)  (CanonicalPi x gU_11 gU_22))]

;; #source file ./ott/lang_simple.ott  lines 2678 - 2682 
 [
  
    
  (EvType (EnvExt x CanonicalDyn Gamma) et CanonicalDyn)
  ---------------------------------------------- "EvTypeLamDyn"
  (EvType Gamma  (TermLam x et)  CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 2683 - 2687 
 [
  (GradualSet Gamma gU)
  (EvConsistent ep gU gU)
  --------------------------------------- "EvTypeDyn"
  (EvType Gamma (TermEp ep TermDyn) gU)]
)
;; #source file ./ott/lang_simple.ott  lines 2690 - 2690 
|# 

;;; definitions 

(define-judgment-form
  L
  #:mode (SimpleStep I O)
  #:contract (SimpleStep t_11 t_22)

;; #source file ./ott/lang_simple.ott  lines 2704 - 2706 
 [
  ---------------------------------- "SimpleStepAnn"
  (SimpleStep  (TermAnn sv T)  sv)]

;; #source file ./ott/lang_simple.ott  lines 2707 - 2709 
 [
  
  ------------------------------------------------------------------- "SimpleStepApp"
  (SimpleStep (TermApp  (TermLam x t)  sv)  (esubst  t   x   sv ) )]

;; #source file ./ott/lang_simple.ott  lines 2711 - 2714 
 [
  
  (SimpleStep t_11 t_22)
  -------------------------------------------------------------- "SimpleStepContext"
  (SimpleStep  (in-hole  SC   t_11 )   (in-hole  SC   t_22 ) )]

)
(define-judgment-form L 
 
  #:mode (Step I O)
  #:contract (Step et_11 et_22)

;; #source file ./ott/lang_simple.ott  lines 2722 - 2725 
 [
  (EvMeet ep_11 ep_22 ep_33)
  ------------------------------------------------------------- "StepAscr"
  (Step (TermEp ep_11  (TermEp ep_22 rv) ) (TermEp ep_33 rv))]

;; #source file ./ott/lang_simple.ott  lines 2728 - 2732 
 [
   (side-condition ,(empty? (judgment-holds (Meet (type-in-ev  ep_11 ) (type-in-ev  ep_22 ) gU_9999) gU_9999))) 
   (side-condition ,(error 'RuntimeError "Can't cast:\n    ~a\nto\n   ~a\nin term ~a" (printEvType (term  ep_11 )) (printEvType (term  ep_22 )) (pt (term  rv )) )) 
  ----------------------------------------------------- "StepAscrFail"
  (Step (TermEp ep_11  (TermEp ep_22 rv) ) TermError)]

;; #source file ./ott/lang_simple.ott  lines 2744 - 2749 
 [
  
    
    (EvDomain ep_11 ep_11^)   (EvMeet ep_22 ep_11^ ep_33)  
  (EvEvCod rv ep_11 ep_44)
  --------------------------------------------------------------------------------------------------------------------------------- "StepAppEv"
  (Step (TermApp  (TermEp ep_11  (TermLam x et) )   (TermEp ep_22 rv) ) (TermEp ep_44   (esubst  et   x   (TermEp ep_33 rv) )  ))]

;; #source file ./ott/lang_simple.ott  lines 2752 - 2757 
 [
  
  (EvDomain ep_11 ep_22)
  (EvEvCod rv ep_11 ep_33)
  ---------------------------------------------------------------------------------------------------------------- "StepAppEvRaw"
  (Step (TermApp  (TermEp ep_11  (TermLam x et) )  rv) (TermEp ep_33   (esubst  et   x   (TermEp ep_22 rv) )  ))]

;; #source file ./ott/lang_simple.ott  lines 2758 - 2760 
 [
  
  --------------------------------------------------------------- "StepApp"
  (Step (TermApp  (TermLam x et)  ev)  (esubst  et   x   ev ) )]

;; #source file ./ott/lang_simple.ott  lines 2761 - 2764 
 [
  (EvEvCod ev ep_11 ep_22)
  --------------------------------------------------------------------- "StepAppDyn"
  (Step (TermApp  (TermEp ep_11 TermDyn)  ev) (TermEp ep_22 TermDyn))]

;; #source file ./ott/lang_simple.ott  lines 2766 - 2771 
 [
  
  (EvDomain ep_11 ep_33)
   (side-condition ,(empty? (judgment-holds (Meet (type-in-ev  ep_33 ) (type-in-ev  ep_22 ) gU_9999) gU_9999))) 
   (side-condition ,(error 'RuntimeError "Can't cast:\n    ~a\nto\n   ~a\nin term ~a" (printEvType (term  ep_33 )) (printEvType (term  ep_22 )) (pt (term   (TermApp rv_11 rv_22)  )) )) 
  -------------------------------------------------------------------------- "StepAppFailTrans"
  (Step (TermApp  (TermEp ep_11 rv_11)   (TermEp ep_22 rv_22) ) TermError)]

;; #source file ./ott/lang_simple.ott  lines 2777 - 2781 
 [
  
   (side-condition ,(empty? (judgment-holds (Domain (type-in-ev  ep_11 ) gU_9999) gU_9999))) 
   (side-condition ,(error 'RuntimeError "Can't cast:\n    ~a\nto\n   ~a\nin term ~a" (printEvType (term  ep_11 )) (printEvType (term   (EvidenceEv EnvEmpty  (CanonicalPi x CanonicalDyn CanonicalDyn) )  )) (pt (term   (TermApp rv ev)  )) )) 
  --------------------------------------------------- "StepAppFailDom"
  (Step (TermApp  (TermEp ep_11 rv)  ev) TermError)]

;; #source file ./ott/lang_simple.ott  lines 2794 - 2798 

;; #source file ./ott/lang_simple.ott  lines 2799 - 2802 

)
(define-judgment-form L 
 
  #:mode (EvCod I I O)
  #:contract (EvCod et gU_11 gU_22)

;; #source file ./ott/lang_simple.ott  lines 2844 - 2849 
 [
    
    (Domain gU gU_^)   (GNCheck EnvEmpty gu et gU_^)  
  (CodSub gu gU gU_22)
  --------------------- "EvCodSub"
  (EvCod et gU gU_22)]

)
(define-judgment-form L 
 
  #:mode (EvEvCod I I O)
  #:contract (EvEvCod et ep_11 ep_22)

;; #source file ./ott/lang_simple.ott  lines 2856 - 2861 
 [
    
    (Domain gU gU_^)   (GNCheck EnvEmpty gu et gU_^)  
  (EvCodSub gu  (EvidenceEv EnvEmpty  gU )   (EvidenceEv EnvEmpty  gU_22 ) )
  --------------------------------------------------------------------------- "EvEvCodSub"
  (EvEvCod et  (EvidenceEv EnvEmpty  gU )   (EvidenceEv EnvEmpty  gU_22 ) )]
)
;; #source file ./ott/lang_simple.ott  lines 2878 - 2894 
(define-judgment-form
  L
  #:mode (ElabNormType I I O)
  [ 
  (GradualNESynth Gamma gt et gu gU)
  (where et_subbed ,(perform-elab-substs (term et)))
  ---------------------------------
  (ElabNormType Gamma gt (ENTTriple et_subbed gu gU))]

)

