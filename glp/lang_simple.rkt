;; #source  
;;; generated by Ott 0.28 from: ./ott/lang_simple.ott

#lang racket
(require redex/reduction-semantics)

;; #source file ./ott/lang_simple.ott  lines 4 - 6 
;; #source file ./ott/lang_simple.ott  lines 8 - 10 
(provide (all-defined-out))

;; #source file ./ott/lang_simple.ott  lines 12 - 80 
;; #source file ./ott/lang_simple.ott  lines 85 - 87 
;; #source file ./ott/lang_simple.ott  lines 90 - 90 
;; #source file ./ott/lang_simple.ott  lines 96 - 104 and file ./ott/lang_simple.ott  lines 109 - 134 and file ./ott/lang_simple.ott  lines 139 - 148 and file ./ott/lang_simple.ott  lines 150 - 155 and file ./ott/lang_simple.ott  lines 157 - 162 and file ./ott/lang_simple.ott  lines 165 - 170 and file ./ott/lang_simple.ott  lines 172 - 174 and file ./ott/lang_simple.ott  lines 179 - 200 and file ./ott/lang_simple.ott  lines 205 - 215 and file ./ott/lang_simple.ott  lines 217 - 222 and file ./ott/lang_simple.ott  lines 224 - 227 and file ./ott/lang_simple.ott  lines 235 - 236 and file ./ott/lang_simple.ott  lines 244 - 255 and file ./ott/lang_simple.ott  lines 259 - 265 and file ./ott/lang_simple.ott  lines 268 - 273 and file ./ott/lang_simple.ott  lines 275 - 283 and file ./ott/lang_simple.ott  lines 287 - 289 and file ./ott/lang_simple.ott  lines 300 - 306 and file ./ott/lang_simple.ott  lines 308 - 314 and file ./ott/lang_simple.ott  lines 360 - 363 and file ./ott/lang_simple.ott  lines 365 - 369 and file ./ott/lang_simple.ott  lines 371 - 375 and file ./ott/lang_simple.ott  lines 480 - 485 and file ./ott/lang_simple.ott  lines 488 - 490 and file ./ott/lang_simple.ott  lines 492 - 494 and file ./ott/lang_simple.ott  lines 496 - 497 
(define-language L  

(level i j ::= natural)

;; #source file ./ott/lang_simple.ott  lines 205 - 215 
  (canonical gu gv gU gV ::= 
    (CanonicalLam var gu)
    CanonicalDyn
    (CanonicalAtomic grr)
    (CanonicalPi var gU gV))
  ;grammar_pp, 2817: and 
;; #source file ./ott/lang_simple.ott  lines 217 - 222 
  (atomic grr gRR ::= 
    (AtomicSpine var ge)
    (AtomicSet i))
  ;grammar_pp, 2817: and 
;; #source file ./ott/lang_simple.ott  lines 224 - 227 
  (spine ge ::= 
    SpineEmpty
    (SpineCons ge gu))

;; #source file ./ott/lang_simple.ott  lines 371 - 375 
  (Env ::= 
    EnvEmpty
    (EnvExt var gU Env)
    (Envconcat Env_11 Env_22))

;; #source file ./ott/lang_simple.ott  lines 235 - 236 
  (epsilon ep ::= 
    (EvidenceEv Gamma gU gV))

;; #source file ./ott/lang_simple.ott  lines 109 - 134 
  (term ss tt ett SS TT ::= 
    (TermLam var tt)
    (TermApp ss tt)
    var
    (TermSet i)
    (TermPi var SS TT)
    (TermAnn tt TT)
    (TermEp ep ss)
    TermDyn
    (TermDynAnn Gamma gU)
    TermError)

(iinf ::= number)

;; #source file ./ott/lang_simple.ott  lines 492 - 494 
  (iinfs jinfs ::= 
    (UniverseMultiSetSingleton iinf)
    (UniverseMultiSetSum iinfs jinfs))

;; #source file ./ott/lang_simple.ott  lines 496 - 497 
  (esgU ::= 
    (ElabTypePair es gU))

;; #source file ./ott/lang_simple.ott  lines 287 - 289 
  (dummyeu dummyev dummyeueU dummyeueV ::= 
    (DummyEvidenceValueEv ep rv)
    (DummyEvidenceValueRaw rv))

;; #source file ./ott/lang_simple.ott  lines 308 - 314 
  (evalContext EC ::= 
    (TermPi x hole eT)
    (TermApp hole et)
    (TermApp ev hole)
    (TermEp ep hole))

;; #source file ./ott/lang_simple.ott  lines 488 - 490 
  (is js ::= 
    (LevelMultiSetSingleton i)
    (LevelMultiSetSum is js))

;; #source file ./ott/lang_simple.ott  lines 300 - 306 
  (simpleContext SC ::= 
    (TermPi x hole T)
    (TermPi x sV hole)
    (TermApp hole t)
    (TermApp sv hole)
    (TermAnn hole T))

;; #source file ./ott/lang_simple.ott  lines 360 - 363 
  (SGamma ::= 
    EnvEmpty
    (EnvExt var U SGamma)
    (Envconcat SGamma_11 SGamma_22))

;; #source file ./ott/lang_simple.ott  lines 139 - 148 
  (s t S T ::= 
    (TermLam var t)
    (TermApp s t)
    var
    (TermPi var S T)
    (TermSet i)
    (TermAnn t T))

;; #source file ./ott/lang_simple.ott  lines 165 - 170 
  (rr RR ::= 
    (AtomicSpine var e)
    (AtomicSet i))

;; #source file ./ott/lang_simple.ott  lines 244 - 255 
  (es et eS eT ::= 
    (TermPi var eS eT)
    (TermLam var et)
    var
    (TermApp es et)
    (TermDynAnn Gamma gU)
    (TermSet i)
    (TermEp ep es)
    TermError)

;; #source file ./ott/lang_simple.ott  lines 157 - 162 
  (u v U V ::= 
    (CanonicalLam var u)
    (CanonicalAtomic rr)
    (CanonicalPi var U V))

;; #source file ./ott/lang_simple.ott  lines 172 - 174 
  (e ::= 
    SpineEmpty
    (SpineCons e u))

;; #source file ./ott/lang_simple.ott  lines 365 - 369 
  (Gamma ::= 
    EnvEmpty
    (EnvExt var gU Gamma)
    (Envconcat Gamma_11 Gamma_22))

;; #source file ./ott/lang_simple.ott  lines 275 - 283 
  (eu ev eU eV ::= 
    (TermEp ep rv)
    (TermPi var eU eT)
    (TermLam var et)
    (TermSet i)
    (TermDynAnn Gamma gU))

;; #source file ./ott/lang_simple.ott  lines 150 - 155 
  (sa ta Sa Ta ::= 
    (TermLam var ta)
    (TermApp sa ta)
    var
    (TermPi var Sa Ta)
    (TermSet i))

;; #source file ./ott/lang_simple.ott  lines 179 - 200 
  (gs gt gS gT ::= 
    (TermLam var gt)
    (TermApp gs gt)
    var
    (TermSet i)
    (TermPi var gS gT)
    (TermAnn gt gT)
    TermDyn)

;; #source file ./ott/lang_simple.ott  lines 268 - 273 
  (simpleValue su sv sU sV ::= 
    (TermPi var sU sV)
    (TermLam var ta)
    (TermSet i))

;; #source file ./ott/lang_simple.ott  lines 259 - 265 
  (ru rv rU rV ::= 
    (TermPi var eU eV)
    (TermLam var et)
    (TermSet i)
    (TermDynAnn Gamma gU))
   (var x y z X Y Z ::= variable-not-otherwise-mentioned)

    #:binding-forms

    (TermLam x tt #:refers-to (shadow x))
    (TermPi x SS TT #:refers-to (shadow x))
    (StaticTermLam x t #:refers-to (shadow x))
    (StaticTermPi x S T #:refers-to (shadow x))
    (StaticTermNoAnnLam x ta #:refers-to (shadow x))
    (StaticTermNoAnnPi x Sa Ta #:refers-to (shadow x))
    (StaticCanonicalLam x u #:refers-to (shadow x))

    (GradualTermLam x gt #:refers-to (shadow x))
    (GradualTermPi x gS gT #:refers-to (shadow x))
    (CanonicalLam x gu #:refers-to (shadow x))
    (CanonicalPi x gU gV #:refers-to (shadow x))

    (EvidenceTermPi x eS eT #:refers-to (shadow x))
    (EvidenceTermLam x et #:refers-to (shadow x))
    (RawValueLam x et #:refers-to (shadow x))
    (SimpleValuePi x sU sV #:refers-to (shadow x))
    (SimpleValueLam x ta)
    (EvidenceValuePi x eU eT #:refers-to (shadow x))
    (EvidenceValueLam x et #:refers-to (shadow x))

)

;;;; subrules 
;; #source file ./ott/lang_simple.ott  lines 510 - 510 and file ./ott/lang_simple.ott  lines 511 - 511 and file ./ott/lang_simple.ott  lines 514 - 514 and file ./ott/lang_simple.ott  lines 515 - 515 and file ./ott/lang_simple.ott  lines 516 - 516 and file ./ott/lang_simple.ott  lines 517 - 517 and file ./ott/lang_simple.ott  lines 518 - 518 and file ./ott/lang_simple.ott  lines 520 - 520 and file ./ott/lang_simple.ott  lines 521 - 521 and file ./ott/lang_simple.ott  lines 522 - 522 and file ./ott/lang_simple.ott  lines 523 - 523 and file ./ott/lang_simple.ott  lines 524 - 524 and file ./ott/lang_simple.ott  lines 526 - 526 and file ./ott/lang_simple.ott  lines 527 - 527 and file ./ott/lang_simple.ott  lines 528 - 528 and file ./ott/lang_simple.ott  lines 531 - 531 
;; #source file ./ott/lang_simple.ott  lines 542 - 553 
;; #source file ./ott/lang_simple.ott  lines 555 - 584 

(define-metafunction L 
  succ : i -> i
  [(succ i) ,(+ (term i) 1)])
  
  (define-metafunction L 
  pred : i -> i
  [(pred i) ,(- (term i) 1)])

(define-metafunction L 
  esubst : et var et -> et 
  [(esubst x_old x_old et_new) et_new ]
  [(esubst x_old y et_new) y ]
  [(esubst (TermPi y eS eT) x_old et_new) 
    (TermPi z (esubst eS x_old et_new) (esubst (substitute eT x z) x_old et_new ))
    (where   z  ,(gensym)) ] 
  [(esubst (TermLam y es) x_old et_new) 
    (TermLam z (esubst (substitute es x z) x_old et_new ))
    (where   z  ,(gensym)) ]
  [(esubst (TermApp es et)) (TermApp (esubst es x_old et_new) (esubst et x_old et_new))]
  [(esubst (TermEp (EvidenceEv Gamma gU_1 gU_2) es) x_old et_new) (TermEp (EvidenceEv Gamma_1 gU_3 gU_4) (esubst es x_old et_new))
    (judgment-holds (GVarLook x_old gV Gamma))
    (judgment-holds (GradualNormCheck Gamma gu_esnorm es gV))
    (judgment-holds (GradualEnvSub Gamma x_old gV gu_esnorm Gamma_1))
    (judgment-holds (GradualHsub  x_old gV gu_esnorm gU_1 gU_3))
    (judgment-holds (GradualHsub  x_old gV gu_esnorm gU_2 gU_4))]
  ;; TODO get rid of types on ? or add Gamma
  [(esubst es x_old et_new) es] 
)

;;; definitions 

(define-judgment-form
  L
  #:mode (GVarLook I O I)
  #:contract (GVarLook x gU Gamma)

;; #source file ./ott/lang_simple.ott  lines 593 - 595 
 [
  ------------------------------------- "GVarLookHead"
  (GVarLook x gU (EnvExt x gU Gamma))]

;; #source file ./ott/lang_simple.ott  lines 596 - 600 
 [
  (GVarLook x gU Gamma)
   (side-condition ,(not (alpha-equivalent? (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  ------------------------------------- "GVarLookTail"
  (GVarLook x gU (EnvExt y gV Gamma))]

)
(define-judgment-form L 
 
  #:mode (GVarFree I I)
  #:contract (GVarFree x Gamma)

;; #source file ./ott/lang_simple.ott  lines 604 - 606 
 [----------------------- "GFreeLookNil"
  (GVarFree x EnvEmpty)]

;; #source file ./ott/lang_simple.ott  lines 607 - 611 
 [
   (side-condition ,(not (alpha-equivalent? (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  (GVarFree x Gamma)
  ---------------------------------- "GFreeLookCons"
  (GVarFree x (EnvExt y gU Gamma))]
)

;;; definitions 

(define-judgment-form
  L
  #:mode (Universe I I O)
  #:contract (Universe Gamma gu iinf)

;; #source file ./ott/lang_simple.ott  lines 632 - 635 
 [
   (side-condition ,(> (term  i ) 0)) 
  ----------------------------------------------------------------- "UniverseSet"
  (Universe Gamma (CanonicalAtomic (AtomicSet i))   (succ  i )  )]

;; #source file ./ott/lang_simple.ott  lines 636 - 641 
 [
  (GVarLook x gV Gamma)
  (Universe Gamma gV  i )
   (side-condition ,(> (term  i ) 0)) 
  ---------------------------------------------------------------------------------- "UniverseVar"
  (Universe Gamma (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) )   (pred  i )  )]

;; #source file ./ott/lang_simple.ott  lines 642 - 646 
 [
  (Universe Gamma gU  i )
  (Universe (EnvExt x gU Gamma) gV  j )
  ------------------------------------------------------------ "UniversePi"
  (Universe Gamma (CanonicalPi x gU gV)  (max   i     j  ) )]

;; #source file ./ott/lang_simple.ott  lines 647 - 650 
 [
  (Universe Gamma gu  i )
  -------------------------------------------- "UniverseLam"
  (Universe Gamma  (CanonicalLam x gu)   i )]

;; #source file ./ott/lang_simple.ott  lines 651 - 655 
 [
  (Universe Gamma (CanonicalAtomic (AtomicSpine x ge))  i )
  (Universe Gamma gv  j )
  ------------------------------------------------------------------------------------------ "UniverseSpine"
  (Universe Gamma (CanonicalAtomic (AtomicSpine x (SpineCons ge gv)))  (max   i     j  ) )]

;; #source file ./ott/lang_simple.ott  lines 656 - 658 
 [
  ---------------------------------------- "UniverseDyn"
  (Universe Gamma CanonicalDyn  +inf.0 )]

)
(define-judgment-form L 
 
  #:mode (SUniverse I I O)
  #:contract (SUniverse SGamma u i)

;; #source file ./ott/lang_simple.ott  lines 664 - 667 
 [
   (side-condition ,(> (term  i ) 0)) 
  ----------------------------------------------------------------- "SUniverseSet"
  (SUniverse SGamma (CanonicalAtomic (AtomicSet i))  (succ  i ) )]

;; #source file ./ott/lang_simple.ott  lines 668 - 673 
 [
  (GVarLook x V SGamma)
  (SUniverse SGamma V i)
   (side-condition ,(> (term  i ) 0)) 
  ---------------------------------------------------------------------------------- "SUniverseVar"
  (SUniverse SGamma (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) )  (pred  i ) )]

;; #source file ./ott/lang_simple.ott  lines 675 - 679 
 [
  (SUniverse SGamma U i)
  (SUniverse (EnvExt x U SGamma) V j)
  -------------------------------------------------------- "SUniversePi"
  (SUniverse SGamma (CanonicalPi x U V)  (max  i   j ) )]

;; #source file ./ott/lang_simple.ott  lines 680 - 682 
 [
  
  --------------------------------------------- "SUniverseLam"
  (SUniverse SGamma  (CanonicalLam x u)   0 )]

;; #source file ./ott/lang_simple.ott  lines 683 - 687 
 [
  
  (SUniverse SGamma (CanonicalAtomic (AtomicSpine x e)) i)
  (SUniverse SGamma v j)
  -------------------------------------------------------------------------------------- "SUniverseSpine"
  (SUniverse SGamma (CanonicalAtomic (AtomicSpine x (SpineCons e v)))  (max  i   j ) )]
)

;;; definitions 

(define-judgment-form
  L
  #:mode (StaticHsub I I I I O)
  #:contract (StaticHsub x U u u_^ v)

;; #source file ./ott/lang_simple.ott  lines 717 - 719 
 [
  ------------------------------------------------------------------------------------ "StaticHsubSet"
  (StaticHsub x U u (CanonicalAtomic (AtomicSet i)) (CanonicalAtomic (AtomicSet i)))]

;; #source file ./ott/lang_simple.ott  lines 722 - 727 
 [
  (StaticHsub x U u U U_^)
  (StaticHsub x U u V V_^)
   (side-condition ,(not (alpha-equivalent? (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  ---------------------------------------------------------------- "StaticHsubPi"
  (StaticHsub x U u (CanonicalPi y U V) (CanonicalPi y U_^ V_^))]

;; #source file ./ott/lang_simple.ott  lines 729 - 733 
 [
  (StaticHsub x U u v v_^)
   (side-condition ,(not (alpha-equivalent? (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  ---------------------------------------------------------------- "StaticHsubLam"
  (StaticHsub x U u  (CanonicalLam y v)   (CanonicalLam y v_^) )]

;; #source file ./ott/lang_simple.ott  lines 736 - 739 
 [
   (side-condition ,(not (alpha-equivalent? (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  ---------------------------------------------------------------------------------------------------------------------- "StaticHsubDiffNil"
  (StaticHsub x U u (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ))]

;; #source file ./ott/lang_simple.ott  lines 740 - 745 
 [
  
   (side-condition ,(not (alpha-equivalent? (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  (StaticHsub x U u (CanonicalAtomic (AtomicSpine y e)) (CanonicalAtomic (AtomicSpine y e_^)))
  (StaticHsub x U u v v_^)
  ---------------------------------------------------------------------------------------------------------------------------- "StaticHsubDiffCons"
  (StaticHsub x U u (CanonicalAtomic (AtomicSpine y (SpineCons e v))) (CanonicalAtomic (AtomicSpine y (SpineCons e_^ v_^))))]

;; #source file ./ott/lang_simple.ott  lines 746 - 749 
 [
  
  (StaticHsubR x U u_11 (AtomicSpine x (SpineCons e u_22)) v_22 V_^)
  --------------------------------------------------------------------------------- "StaticHsubSpine"
  (StaticHsub x U u_11 (CanonicalAtomic (AtomicSpine x (SpineCons e u_22))) v_22)]

)
(define-judgment-form L 
 
  #:mode (StaticHsubR I I I I O O)
  #:contract (StaticHsubR x U u rr v V)

;; #source file ./ott/lang_simple.ott  lines 760 - 762 
 [
  -------------------------------------------------------- "StaticHsubRHead"
  (StaticHsubR x U u  (AtomicSpine  x  SpineEmpty)  u U)]

;; #source file ./ott/lang_simple.ott  lines 763 - 772 
 [
  
  (StaticHsub x U u_11 u_22 u_33)
  (StaticHsubR x U u_11 (AtomicSpine x e)  (CanonicalLam y v_11)  (CanonicalPi y V_11 V_22))
  (StaticHsub y V_11 u_33 v_11 v_22)
  (StaticHsub y V_11 u_33 V_22 V_^)
  ---------------------------------------------------------------------- "StaticHsubRSpine"
  (StaticHsubR x U u_11  (AtomicSpine x (SpineCons e u_22))  v_22 V_^)]
)

;;; definitions 

(define-judgment-form
  L
  #:mode (SWellFormed I)
  #:contract (SWellFormed SGamma)

;; #source file ./ott/lang_simple.ott  lines 782 - 784 
 [------------------------ "SWellFormedEmpty"
  (SWellFormed EnvEmpty)]

;; #source file ./ott/lang_simple.ott  lines 785 - 790 
 [
  (SWellFormed SGamma)
  (StaticSet SGamma U)
  (GVarFree x SGamma)
  ----------------------------------- "SWellFormedExt"
  (SWellFormed (EnvExt x U SGamma))]

)
(define-judgment-form L 
 
  #:mode (StaticSet I I)
  #:contract (StaticSet SGamma U)

;; #source file ./ott/lang_simple.ott  lines 799 - 802 
 [
  
  (StaticCSynth SGamma rr (CanonicalAtomic (AtomicSet i)))
  ----------------------------------------- "StaticSetSet"
  (StaticSet SGamma (CanonicalAtomic rr))]

;; #source file ./ott/lang_simple.ott  lines 805 - 810 
 [
  (StaticSet SGamma U)
  (SWellFormed (EnvExt x U SGamma))
  (StaticSet (EnvExt x U SGamma) V)
  ---------------------------------------- "StaticSetPi"
  (StaticSet SGamma (CanonicalPi x U V))]

)
(define-judgment-form L 
 
  #:mode (StaticCSynth I I O)
  #:contract (StaticCSynth SGamma rr U)

;; #source file ./ott/lang_simple.ott  lines 818 - 821 
 [
   (side-condition ,(> (term  i ) 0)) 
  --------------------------------------------------------------------------------- "StaticCSynthSet"
  (StaticCSynth SGamma (AtomicSet i) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 823 - 827 
 [
  
  (SWellFormed SGamma)
  (GVarLook x U SGamma)
  -------------------------------------------------------- "StaticCSynthVar"
  (StaticCSynth SGamma  (AtomicSpine  x  SpineEmpty)  U)]

;; #source file ./ott/lang_simple.ott  lines 831 - 837 
 [
  
  (StaticCSynth SGamma (AtomicSpine x e) (CanonicalPi y U_11 U_22))
  (StaticCCheck SGamma u U_11)
  (StaticHsub y U_11 u U_22 V)
  --------------------------------------------------------- "StaticCSynthApp"
  (StaticCSynth SGamma (AtomicSpine x (SpineCons e u)) V)]

)
(define-judgment-form L 
 
  #:mode (StaticCCheck I I I)
  #:contract (StaticCCheck SGamma u U)

;; #source file ./ott/lang_simple.ott  lines 845 - 848 
 [
  
  (StaticCSynth SGamma rr (CanonicalAtomic RR))
  ----------------------------------------------------------------- "StaticCCheckSynth"
  (StaticCCheck SGamma (CanonicalAtomic rr) (CanonicalAtomic RR))]

;; #source file ./ott/lang_simple.ott  lines 849 - 853 
 [
  
  (StaticCSynth SGamma rr (CanonicalAtomic (AtomicSet i)))
   (side-condition ,(and (< 0 (term  i )) (< (term  i ) (term  j )))) 
  ---------------------------------------------------------------------------- "StaticCCheckLevel"
  (StaticCCheck SGamma (CanonicalAtomic rr) (CanonicalAtomic (AtomicSet j)))]

;; #source file ./ott/lang_simple.ott  lines 855 - 859 
 [
  
  (SWellFormed (EnvExt x U SGamma))
  (StaticCCheck (EnvExt x U SGamma) u V)
  ---------------------------------------------------------------- "StaticCCheckLam"
  (StaticCCheck SGamma  (CanonicalLam x u)  (CanonicalPi x U V))]

;; #source file ./ott/lang_simple.ott  lines 860 - 865 
 [
  (StaticCCheck SGamma U (CanonicalAtomic (AtomicSet i)))
  (SWellFormed (EnvExt x U SGamma))
  (StaticCCheck (EnvExt x U SGamma) V (CanonicalAtomic (AtomicSet i)))
  --------------------------------------------------------------------------- "StaticCCheckPi"
  (StaticCCheck SGamma (CanonicalPi x U V) (CanonicalAtomic (AtomicSet i)))]
)

;;; definitions 

(define-judgment-form
  L
  #:mode (StaticSynth I I O)
  #:contract (StaticSynth SGamma t U)

;; #source file ./ott/lang_simple.ott  lines 875 - 879 
 [
  (StaticSetNorm SGamma V T)
  (StaticCheck SGamma t V)
  ---------------------------------------- "StaticSynthAnn"
  (StaticSynth SGamma  (TermAnn t T)  V)]

;; #source file ./ott/lang_simple.ott  lines 880 - 883 
 [
   (side-condition ,(> (term  i ) 0)) 
  ------------------------------------------------------------------------------ "StaticSynthSet"
  (StaticSynth SGamma (TermSet i) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 885 - 889 
 [
  
  (SWellFormed SGamma)
  (GVarLook x U SGamma)
  ------------------------------------ "StaticSynthVar"
  (StaticSynth SGamma x U)]

;; #source file ./ott/lang_simple.ott  lines 894 - 900 
 [
  
  (StaticSynth SGamma s (CanonicalPi x U V))
  (StaticNormCheck SGamma v t U)
  (StaticHsub x U v V V_^)
  ---------------------------------------- "StaticSynthApp"
  (StaticSynth SGamma (TermApp s t) V_^)]

)
(define-judgment-form L 
 
  #:mode (StaticCheck I I I)
  #:contract (StaticCheck SGamma t U)

;; #source file ./ott/lang_simple.ott  lines 907 - 910 
 [
  (StaticSynth SGamma t U)
  -------------------------- "StaticCheckSynth"
  (StaticCheck SGamma t U)]

;; #source file ./ott/lang_simple.ott  lines 911 - 915 
 [
  (StaticSynth SGamma t (CanonicalAtomic (AtomicSet i)))
   (side-condition ,(and (< 0 (term  i )) (< (term  i ) (term  j )))) 
  -------------------------------------------------------- "StaticCheckLevel"
  (StaticCheck SGamma t (CanonicalAtomic (AtomicSet j)))]

;; #source file ./ott/lang_simple.ott  lines 916 - 921 
 [
  (StaticNormCheck SGamma U S (CanonicalAtomic (AtomicSet i)))
  (SWellFormed (EnvExt x U SGamma))
  (StaticCheck (EnvExt x U SGamma) T (CanonicalAtomic (AtomicSet i)))
  --------------------------------------------------------------------- "StaticCheckPi"
  (StaticCheck SGamma (TermPi x S T) (CanonicalAtomic (AtomicSet i)))]

;; #source file ./ott/lang_simple.ott  lines 923 - 927 
 [
  (SWellFormed (EnvExt x U SGamma))
  (StaticCheck (EnvExt x U SGamma) t V)
  ---------------------------------------------------------- "StaticCheckLam"
  (StaticCheck SGamma  (TermLam x t)  (CanonicalPi x U V))]

)
(define-judgment-form L 
 
  #:mode (StaticSetNorm I O I)
  #:contract (StaticSetNorm SGamma U S)

;; #source file ./ott/lang_simple.ott  lines 938 - 941 
 [
  (StaticNormSynth SGamma S U (CanonicalAtomic (AtomicSet i)))
  ---------------------------- "StaticSetNormSynth"
  (StaticSetNorm SGamma U S)]

;; #source file ./ott/lang_simple.ott  lines 942 - 946 
 [
  (StaticSetNorm SGamma U S)
  (StaticSetNorm (EnvExt x U SGamma) V T)
  ----------------------------------------------------------- "StaticSetNormPi"
  (StaticSetNorm SGamma (CanonicalPi x U V) (TermPi x S T))]

)
(define-judgment-form L 
 
  #:mode (StaticNormSynth I I O O)
  #:contract (StaticNormSynth SGamma t v U)

;; #source file ./ott/lang_simple.ott  lines 952 - 956 
 [
  (StaticSetNorm SGamma V T)
  (StaticNormCheck SGamma v t V)
  ---------------------------------------------- "StaticNormSynthAnn"
  (StaticNormSynth SGamma  (TermAnn t T)  v V)]

;; #source file ./ott/lang_simple.ott  lines 957 - 960 
 [
   (side-condition ,(> (term  i ) 0)) 
  ------------------------------------------------------------------------------------------------------------------ "StaticNormSynthSet"
  (StaticNormSynth SGamma (TermSet i) (CanonicalAtomic (AtomicSet i)) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 962 - 967 
 [
  (SWellFormed SGamma)
  (GVarLook x U SGamma)
  (EtaExpand  (AtomicSpine  x  SpineEmpty)  v U)
  ------------------------------------------ "StaticNormSynthVar"
  (StaticNormSynth SGamma x v U)]

;; #source file ./ott/lang_simple.ott  lines 972 - 978 
 [
  
  (StaticNormSynth SGamma s  (CanonicalLam x u)  (CanonicalPi x U_11 U_22))
  (StaticNormCheck SGamma v t U_11)
  (StaticHsub x U_11 v u v_^)
  (StaticHsub x U_11 v U_22 V)
  ---------------------------------------------- "StaticNormSynthApp"
  (StaticNormSynth SGamma (TermApp s t) v_^ V)]

)
(define-judgment-form L 
 
  #:mode (StaticNormCheck I O I I)
  #:contract (StaticNormCheck SGamma v t U)

;; #source file ./ott/lang_simple.ott  lines 987 - 990 
 [
  (StaticNormSynth SGamma t v U)
  -------------------------------- "StaticNormCheckSynth"
  (StaticNormCheck SGamma v t U)]

;; #source file ./ott/lang_simple.ott  lines 991 - 995 
 [
  (StaticNormSynth SGamma t v (CanonicalAtomic (AtomicSet i)))
   (side-condition ,(and (< 0 (term  i )) (< (term  i ) (term  j )))) 
  -------------------------------------------------------------- "StaticNormCheckLevel"
  (StaticNormCheck SGamma v t (CanonicalAtomic (AtomicSet j)))]

;; #source file ./ott/lang_simple.ott  lines 997 - 1002 
 [
  (StaticNormCheck SGamma U S (CanonicalAtomic (AtomicSet i)))
  (SWellFormed (EnvExt x U SGamma))
  (StaticNormCheck (EnvExt x U SGamma) V T (CanonicalAtomic (AtomicSet i)))
  --------------------------------------------------------------------------------------------- "StaticNormCheckPi"
  (StaticNormCheck SGamma (CanonicalPi x U V) (TermPi x S T) (CanonicalAtomic (AtomicSet i)))]

;; #source file ./ott/lang_simple.ott  lines 1003 - 1007 
 [
  (SWellFormed (EnvExt x U SGamma))
  (StaticNormCheck (EnvExt x U SGamma) v t V)
  ----------------------------------------------------------------------------------- "StaticNormCheckLam"
  (StaticNormCheck SGamma  (CanonicalLam x v)   (TermLam x t)  (CanonicalPi x U V))]

)
(define-judgment-form L 
 
  #:mode (EtaExpand I O I)
  #:contract (EtaExpand rr v V)

;; #source file ./ott/lang_simple.ott  lines 1013 - 1015 
 [
  ---------------------------------------------------------- "EtaExpandAtomic"
  (EtaExpand rr (CanonicalAtomic rr) (CanonicalAtomic RR))]

;; #source file ./ott/lang_simple.ott  lines 1017 - 1021 
 [
  
  (EtaExpand  (AtomicSpine  y  SpineEmpty)  u U)
  (EtaExpand (AtomicSpine x (SpineCons e u)) v V)
  ------------------------------------------------------------------------ "EtaExpandPi"
  (EtaExpand (AtomicSpine x e)  (CanonicalLam y v)  (CanonicalPi y U V))]
)

;;; definitions 

(define-judgment-form
  L
  #:mode (Domain I O)
  #:contract (Domain gU gV)

;; #source file ./ott/lang_simple.ott  lines 1039 - 1041 
 [----------------------------------- "DomainPi"
  (Domain (CanonicalPi x gU gV) gU)]

;; #source file ./ott/lang_simple.ott  lines 1042 - 1044 
 [------------------------------------ "DomainDyn"
  (Domain CanonicalDyn CanonicalDyn)]

)
(define-judgment-form L 
 
  #:mode (GradualEnvSub I I I I O)
  #:contract (GradualEnvSub x gU gu Gamma Gamma_^)

;; #source file ./ott/lang_simple.ott  lines 1050 - 1052 
 [------------------------------------------- "GradualEnvSubEmpty"
  (GradualEnvSub x gU gu EnvEmpty EnvEmpty)]

;; #source file ./ott/lang_simple.ott  lines 1053 - 1058 
 [
  
   (side-condition ,(not (alpha-equivalent? (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  (GradualHsub x gU gu gU gU_^)
  (GradualEnvSub x gU gu Gamma Gamma_^)
  --------------------------------------------------------------------- "GradualEnvSubVarDiff"
  (GradualEnvSub x gU gu (EnvExt y gU Gamma) (EnvExt y gU_^ Gamma_^))]

;; #source file ./ott/lang_simple.ott  lines 1059 - 1062 
 [
  
  (GradualEnvSub x gU gu Gamma Gamma_^)
  ----------------------------------------------------- "GradualEnvSubVarSame"
  (GradualEnvSub x gU gu (EnvExt x gU Gamma) Gamma_^)]

)
(define-judgment-form L 
 
  #:mode (GradualHsub I I I I O)
  #:contract (GradualHsub x gU gu gu_^ gv)

;; #source file ./ott/lang_simple.ott  lines 1069 - 1071 
 [--------------------------------------------------------------------------------------- "GradualHsubSet"
  (GradualHsub x gU gu (CanonicalAtomic (AtomicSet i)) (CanonicalAtomic (AtomicSet i)))]

;; #source file ./ott/lang_simple.ott  lines 1073 - 1075 
 [------------------------------------------------- "GradualHsubDyn"
  (GradualHsub x gU gu CanonicalDyn CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 1076 - 1081 
 [ (side-condition ,(not (alpha-equivalent? (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  (GradualHsub x gU gu gV_11 gV_11^)
  (GradualHsub x gU gu gV_22 gV_22^)
  --------------------------------------------------------------------------------- "GradualHsubPi"
  (GradualHsub x gU gu (CanonicalPi y gV_11 gV_22) (CanonicalPi y gV_11^ gV_22^))]

;; #source file ./ott/lang_simple.ott  lines 1082 - 1086 
 [ (where   y  ,(gensym)) 
  (GradualHsub x gU gu (CanonicalPi y gU  (substitute  gV   x   y ) ) gV_^)
  -------------------------------------------------- "GradualHsubPiAlpha"
  (GradualHsub x gU gu (CanonicalPi x gU gV) gV_^)]

;; #source file ./ott/lang_simple.ott  lines 1088 - 1092 
 [ (side-condition ,(not (alpha-equivalent? (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  (GradualHsub x gU gu gv gv_^)
  --------------------------------------------------------------------- "GradualHsubLam"
  (GradualHsub x gU gu  (CanonicalLam y gv)   (CanonicalLam y gv_^) )]

;; #source file ./ott/lang_simple.ott  lines 1093 - 1097 
 [ (where   y  ,(gensym)) 
  (GradualHsub x gU gu  (CanonicalLam y  (substitute  gv   x   y ) )  gv_^)
  -------------------------------------------------- "GradualHsubLamAlpha"
  (GradualHsub x gU gu  (CanonicalLam x gv)  gv_^)]

;; #source file ./ott/lang_simple.ott  lines 1098 - 1101 
 [ (side-condition ,(not (alpha-equivalent? (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  ------------------------------------------------------------------------------------------------------------------------- "GradualHsubDiffNil"
  (GradualHsub x gU gu (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ))]

;; #source file ./ott/lang_simple.ott  lines 1102 - 1107 
 [ (side-condition ,(not (alpha-equivalent? (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  (GradualHsub x gU gu (CanonicalAtomic (AtomicSpine y ge)) (CanonicalAtomic (AtomicSpine y ge_^)))
  (GradualHsub x gU gu gv gv_^)
  ----------------------------------------------------------------------------------------------------------------------------------- "GradualHsubDiffCons"
  (GradualHsub x gU gu (CanonicalAtomic (AtomicSpine y (SpineCons ge gv))) (CanonicalAtomic (AtomicSpine y (SpineCons ge_^ gv_^))))]

;; #source file ./ott/lang_simple.ott  lines 1110 - 1113 
 [(GradualHsubR x gU gu ge gv gV)
  --------------------------------------------------------------- "GradualHsubSpine"
  (GradualHsub x gU gu (CanonicalAtomic (AtomicSpine x ge)) gv)]

)
(define-judgment-form L 
 
  #:mode (GradualHsubR I I I I O O)
  #:contract (GradualHsubR x gU gu ge gv gV)

;; #source file ./ott/lang_simple.ott  lines 1133 - 1135 
 [----------------------------------------- "GradualHsubRHead"
  (GradualHsubR x gU gu SpineEmpty gu gU)]

;; #source file ./ott/lang_simple.ott  lines 1136 - 1141 
 [(GradualHsubR x gU gu_11 ge gv_11 CanonicalDyn)
  -------------------------------------------------------------------------- "GradualHsubRDynType"
  (GradualHsubR x gU gu_11 (SpineCons ge gu_22) CanonicalDyn CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 1143 - 1152 
 [(GradualHsubR x gU gu ge  (CanonicalLam y gu_22)  (CanonicalPi y gU_11 gU_22))
  (GradualHsub x gU gu gv_11 gv_22)
  (GradualHsub y gU_11 gv_22 gu_22 gv_33)
  (GradualHsub y gU_11 gv_22 gU_22 gV)
  (GEtaExpandC gv_33 gv_44 gV)
  ------------------------------------------------------ "GradualHsubRLamSpine"
  (GradualHsubR x gU gu (SpineCons ge gv_11) gv_44 gV)]

;; #source file ./ott/lang_simple.ott  lines 1153 - 1162 
 [(GradualHsubR x gU gu ge  (CanonicalLam y_11 gu_22)  (CanonicalPi y_22 gU_11 gU_22))
   (side-condition ,(not (alpha-equivalent? (term  (CanonicalAtomic  (AtomicSpine  y_11  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y_22  SpineEmpty) ) )))) 
  (GradualHsub x gU gu gv_11 gv_22)
  (GradualHsub y_11 gU_11 gv_22 gu_22 gv_33)
  (GradualHsub y_22 gU_11 gv_22 gU_22 gV)
  (GEtaExpandC gv_33 gv_44 gV)
  ------------------------------------------------------ "GradualHsubRLamSpineAlpha"
  (GradualHsubR x gU gu (SpineCons ge gv_11) gv_44 gV)]

;; #source file ./ott/lang_simple.ott  lines 1164 - 1170 
 [(GradualHsubR x gU gu ge CanonicalDyn (CanonicalPi y gU_11 gU_22))
  (GradualHsub x gU gu gv gv_22)
  (GradualHsub y gU_11 gv gU_22 gV)
  ---------------------------------------------------------- "GradualHsubRDynSpine"
  (GradualHsubR x gU gu (SpineCons ge gv) CanonicalDyn gV)]

)
(define-judgment-form L 
 
  #:mode (CodSub I I I O)
  #:contract (CodSub gU gu gu_^ gv)

;; #source file ./ott/lang_simple.ott  lines 1177 - 1180 
 [(GradualHsub x gU gu gV gV_^)
  ------------------------------------------- "CodSubPi"
  (CodSub gU gu (CanonicalPi x gU gV) gV_^)]

;; #source file ./ott/lang_simple.ott  lines 1181 - 1183 
 [------------------------------------------ "CodSubDyn"
  (CodSub gU gu CanonicalDyn CanonicalDyn)]

)
(define-judgment-form L 
 
  #:mode (BodySub I I I O)
  #:contract (BodySub gU gu gu_^ gv)

;; #source file ./ott/lang_simple.ott  lines 1189 - 1192 
 [(GradualHsub x gU gu gv gv_^)
  -------------------------------------------- "BodySubPi"
  (BodySub gU gu  (CanonicalLam x gv)  gv_^)]

;; #source file ./ott/lang_simple.ott  lines 1193 - 1195 
 [------------------------------------------- "BodySubDyn"
  (BodySub gU gu CanonicalDyn CanonicalDyn)]
)

;;; definitions 

(define-judgment-form
  L
  #:mode (GradualSet I I)
  #:contract (GradualSet Gamma gU)

;; #source file ./ott/lang_simple.ott  lines 1204 - 1207 
 [
  (GradualCSynth Gamma grr CanonicalDyn)
  ------------------------------------------ "GradualSetDynTy"
  (GradualSet Gamma (CanonicalAtomic grr))]

;; #source file ./ott/lang_simple.ott  lines 1208 - 1211 
 [
  (GradualCSynth Gamma grr (CanonicalAtomic (AtomicSet i)))
  ------------------------------------------ "GradualSetSet"
  (GradualSet Gamma (CanonicalAtomic grr))]

;; #source file ./ott/lang_simple.ott  lines 1214 - 1219 
 [
  (GradualSet Gamma gU_11)
    
  (GradualSet (EnvExt x gU_11 Gamma) gU_22)
  ------------------------------------------------ "GradualSetPi"
  (GradualSet Gamma (CanonicalPi x gU_11 gU_22))]

;; #source file ./ott/lang_simple.ott  lines 1221 - 1223 
 [
  --------------------------------- "GradualSetDynVal"
  (GradualSet Gamma CanonicalDyn)]

)
(define-judgment-form L 
 
  #:mode (WellFormed I)
  #:contract (WellFormed Gamma)

;; #source file ./ott/lang_simple.ott  lines 1229 - 1231 
 [----------------------- "WellFormedEmpty"
  (WellFormed EnvEmpty)]

;; #source file ./ott/lang_simple.ott  lines 1232 - 1237 
 [
  (WellFormed Gamma)
  (GradualSet Gamma gU)
  (GVarFree x Gamma)
  ---------------------------------- "WellFormedExt"
  (WellFormed (EnvExt x gU Gamma))]

)
(define-judgment-form L 
 
  #:mode (GradualCSynth I I O)
  #:contract (GradualCSynth Gamma grr gU)

;; #source file ./ott/lang_simple.ott  lines 1243 - 1246 
 [
   (side-condition ,(> (term  i ) 0)) 
  --------------------------------------------------------------------------------- "GradualCSynthSet"
  (GradualCSynth Gamma (AtomicSet i) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 1248 - 1252 
 [
    
  (GVarLook x gU Gamma)
  --------------------------------------------------------- "GradualCSynthVar"
  (GradualCSynth Gamma  (AtomicSpine  x  SpineEmpty)  gU)]

;; #source file ./ott/lang_simple.ott  lines 1256 - 1263 
 [
  (GradualCSynth Gamma (AtomicSpine x ge) gU)
  (Domain gU gV)
  (GradualCCheck Gamma gu gV)
  (CodSub gV gu gU gV_^)
  -------------------------------------------------------------- "GradualCSynthApp"
  (GradualCSynth Gamma (AtomicSpine x (SpineCons ge gu)) gV_^)]

)
(define-judgment-form L 
 
  #:mode (GradualCCheck I I I)
  #:contract (GradualCCheck Gamma gu gU)

;; #source file ./ott/lang_simple.ott  lines 1270 - 1274 
 [
  (GradualCSynth Gamma grr gU)
  (Consistent gU gV)
  ------------------------------------------------ "GradualCCheckSynth"
  (GradualCCheck Gamma (CanonicalAtomic grr) gV)]

;; #source file ./ott/lang_simple.ott  lines 1275 - 1279 
 [
  (GradualCSynth Gamma grr (CanonicalAtomic (AtomicSet i)))
   (side-condition ,(and (< 0 (term  i )) (< (term  i ) (term  j )))) 
  ----------------------------------------------------------------------------- "GradualCCheckLevel"
  (GradualCCheck Gamma (CanonicalAtomic grr) (CanonicalAtomic (AtomicSet j)))]

;; #source file ./ott/lang_simple.ott  lines 1281 - 1285 
 [
    
  (GradualCCheck (EnvExt x gU Gamma) gu gV)
  ------------------------------------------------------------------- "GradualCCheckLamPi"
  (GradualCCheck Gamma  (CanonicalLam x gu)  (CanonicalPi x gU gV))]

;; #source file ./ott/lang_simple.ott  lines 1286 - 1292 
 [
   (side-condition ,(not (alpha-equivalent? (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
   (where   z  ,(gensym)) 
    
  (GradualCCheck (EnvExt z gU Gamma)  (substitute  gu   x   z )   (substitute  gV   y   z ) )
  ------------------------------------------------------------------- "GradualCCheckLamPiAlpha"
  (GradualCCheck Gamma  (CanonicalLam x gu)  (CanonicalPi y gU gV))]

;; #source file ./ott/lang_simple.ott  lines 1293 - 1297 
 [
    
  (GradualCCheck (EnvExt x CanonicalDyn Gamma) gu CanonicalDyn)
  ---------------------------------------------------------- "GradualCCheckLamDyn"
  (GradualCCheck Gamma  (CanonicalLam x gu)  CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 1298 - 1304 
 [
  (ConsistentSet gV)
  (GradualCCheck Gamma gU_11 gV)
    
  (GradualCCheck (EnvExt x gU_11 Gamma) gU_22 gV)
  ------------------------------------------------------ "GradualCCheckPi"
  (GradualCCheck Gamma (CanonicalPi x gU_11 gU_22) gV)]

;; #source file ./ott/lang_simple.ott  lines 1306 - 1309 
 [
  (GradualSet Gamma gU)
  --------------------------------------- "GradualCCheckDyn"
  (GradualCCheck Gamma CanonicalDyn gU)]

)
(define-judgment-form L 
 
  #:mode (ConsistentSet I)
  #:contract (ConsistentSet gU)

;; #source file ./ott/lang_simple.ott  lines 1317 - 1319 
 [------------------------------------------------- "ConsistentSetSet"
  (ConsistentSet (CanonicalAtomic (AtomicSet i)))]

;; #source file ./ott/lang_simple.ott  lines 1320 - 1322 
 [------------------------------ "ConsistentSetDyn"
  (ConsistentSet CanonicalDyn)]

)
(define-judgment-form L 
 
  #:mode (Consistent I I)
  #:contract (Consistent gU gV)

;; #source file ./ott/lang_simple.ott  lines 1330 - 1332 
 [------------------------------ "ConsistentDynL"
  (Consistent CanonicalDyn gv)]

;; #source file ./ott/lang_simple.ott  lines 1333 - 1335 
 [------------------------------ "ConsistentDynR"
  (Consistent gu CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 1336 - 1338 
 [-------------------- "ConsistentEq"
  (Consistent gu gu)]

;; #source file ./ott/lang_simple.ott  lines 1339 - 1343 
 [(Consistent gU gU_^)
  (Consistent gV gV_^)
  -------------------------------------------------------------- "ConsistentPi"
  (Consistent (CanonicalPi x gU gV) (CanonicalPi x gU_^ gV_^))]

;; #source file ./ott/lang_simple.ott  lines 1344 - 1350 
 [ (side-condition ,(not (alpha-equivalent? (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
   (where   z  ,(gensym)) 
  (Consistent gU gU_^)
  (Consistent  (substitute  gV   x   z )   (substitute  gV_^   y   z ) )
  -------------------------------------------------------------- "ConsistentPiAlpha"
  (Consistent (CanonicalPi x gU gV) (CanonicalPi y gU_^ gV_^))]

;; #source file ./ott/lang_simple.ott  lines 1351 - 1354 
 [(Consistent gu gv)
  ---------------------------------------------------------- "ConsistentLam"
  (Consistent  (CanonicalLam x gu)   (CanonicalLam x gv) )]

;; #source file ./ott/lang_simple.ott  lines 1355 - 1360 
 [ (side-condition ,(not (alpha-equivalent? (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
   (where   z  ,(gensym)) 
  (Consistent  (substitute  gu   x   z )   (substitute  gv   y   z ) )
  ---------------------------------------------------------- "ConsistentLamAlpha"
  (Consistent  (CanonicalLam x gu)   (CanonicalLam y gv) )]

;; #source file ./ott/lang_simple.ott  lines 1361 - 1365 
 [(Consistent (CanonicalAtomic (AtomicSpine x ge)) (CanonicalAtomic (AtomicSpine x ge_^)))
  (Consistent gu gv)
  ------------------------------------------------------------------------------------------------------------------------ "ConsistentApp"
  (Consistent (CanonicalAtomic (AtomicSpine x (SpineCons ge gu))) (CanonicalAtomic (AtomicSpine x (SpineCons ge_^ gv))))]
)

;;; definitions 

(define-judgment-form
  L
  #:mode (Meet I I O)
  #:contract (Meet gU gV gU_^)

;; #source file ./ott/lang_simple.ott  lines 1376 - 1380 
 [(Meet gU gU_^ gU_^^)
  (Meet gV gV_^ gV_^^)
  ------------------------------------------------------------------------------------ "MeetPi"
  (Meet (CanonicalPi x gU gV) (CanonicalPi x gU_^ gV_^) (CanonicalPi x gU_^^ gV_^^))]

;; #source file ./ott/lang_simple.ott  lines 1381 - 1387 
 [ (side-condition ,(not (alpha-equivalent? (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
   (where   z  ,(gensym)) 
  (Meet gU gU_^ gU_^^)
  (Meet  (substitute  gV   x   z )   (substitute  gV_^   y   z )  gV_^^)
  ------------------------------------------------------------------------------------ "MeetPiAlpha"
  (Meet (CanonicalPi x gU gV) (CanonicalPi y gU_^ gV_^) (CanonicalPi z gU_^^ gV_^^))]

;; #source file ./ott/lang_simple.ott  lines 1388 - 1391 
 [(Meet gu gu_^ gv)
  ---------------------------------------------------------------------- "MeetLam"
  (Meet (CanonicalLam x gu) (CanonicalLam x gu_^) (CanonicalLam x gv))]

;; #source file ./ott/lang_simple.ott  lines 1392 - 1397 
 [ (side-condition ,(not (alpha-equivalent? (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
   (where   z  ,(gensym)) 
  (Meet  (substitute  gu   x   z )   (substitute  gu_^   y   z )  gv)
  ---------------------------------------------------------------------- "MeetLamAlpha"
  (Meet (CanonicalLam x gu) (CanonicalLam y gu_^) (CanonicalLam z gv))]

;; #source file ./ott/lang_simple.ott  lines 1398 - 1402 
 [(Meet gu gu_^ gu_^^)
  (Meet (CanonicalAtomic (AtomicSpine x ge)) (CanonicalAtomic (AtomicSpine x ge_^)) (CanonicalAtomic (AtomicSpine x ge_^^)))
  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ "MeetApp"
  (Meet (CanonicalAtomic (AtomicSpine x (SpineCons ge gu))) (CanonicalAtomic (AtomicSpine x (SpineCons ge_^ gu_^))) (CanonicalAtomic (AtomicSpine x (SpineCons ge_^^ gu_^^))))]

;; #source file ./ott/lang_simple.ott  lines 1403 - 1405 
 [--------------------------- "MeetDynL"
  (Meet CanonicalDyn gU gU)]

;; #source file ./ott/lang_simple.ott  lines 1406 - 1409 
 [ (side-condition ,(not (alpha-equivalent? (term  gV ) (term  CanonicalDyn )))) 
  --------------------------- "MeetDynR"
  (Meet gV CanonicalDyn gV)]

;; #source file ./ott/lang_simple.ott  lines 1410 - 1414 
 [ (side-condition ,(not (alpha-equivalent? (term  gU ) (term  CanonicalDyn )))) 
   (side-condition ,(not (alpha-equivalent? (term  gV ) (term  CanonicalDyn )))) 
  ----------------- "MeetRefl"
  (Meet gu gu gu)]

)
(define-judgment-form L 
 
  #:mode (MorePrecise I I)
  #:contract (MorePrecise gU gV)

;; #source file ./ott/lang_simple.ott  lines 1422 - 1425 
 [(Meet gU gV gU)
  --------------------- "MorePreciseDef"
  (MorePrecise gU gV)]

)
(define-judgment-form L 
 
  #:mode (EvConsistent I I I)
  #:contract (EvConsistent ep gU gV)

;; #source file ./ott/lang_simple.ott  lines 1432 - 1437 
 [
  (Meet gV_11 gV_22 gV_33)
  (MorePrecise gU_11 gV_33)
  (MorePrecise gU_22 gV_33)
  ----------------------------------------------------------- "EvConsistentDef"
  (EvConsistent (EvidenceEv Gamma gU_11 gU_22) gV_11 gV_22)]
)

;;; definitions 

(define-judgment-form
  L
  #:mode (GradualSynth I I O)
  #:contract (GradualSynth Gamma gt gU)

;; #source file ./ott/lang_simple.ott  lines 1451 - 1455 
 [
  
  (GradualSetNorm Gamma gV gT)
  (GradualCheck Gamma gt gV)
  ------------------------------------------- "GradualSynthAnn"
  (GradualSynth Gamma  (TermAnn gt gT)  gV)]

;; #source file ./ott/lang_simple.ott  lines 1456 - 1459 
 [
   (side-condition ,(> (term  i ) 0)) 
  ------------------------------------------------------------------------------ "GradualSynthSet"
  (GradualSynth Gamma (TermSet i) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 1461 - 1465 
 [
  (GVarLook x gU Gamma)
    
  ------------------------------------- "GradualSynthVar"
  (GradualSynth Gamma x gU)]

;; #source file ./ott/lang_simple.ott  lines 1470 - 1476 
 [
  
  (GradualSynth Gamma gs gV)
  (Domain gV gV_11)
  (GradualNormCheck Gamma gv gt gV_11)
  (CodSub gV_11 gv gV gV_22)
  -------------------------------------------- "GradualSynthApp"
  (GradualSynth Gamma (TermApp gs gt) gV_22)]

)
(define-judgment-form L 
 
  #:mode (GradualCheck I I I)
  #:contract (GradualCheck Gamma gt gU)

;; #source file ./ott/lang_simple.ott  lines 1485 - 1489 
 [
  (GradualSynth Gamma gt gU)
  (Consistent gU gV)
  ---------------------------- "GradualCheckSynth"
  (GradualCheck Gamma gt gV)]

;; #source file ./ott/lang_simple.ott  lines 1490 - 1494 
 [
  (GradualSynth Gamma gt (CanonicalAtomic (AtomicSet i)))
   (side-condition ,(and (< 0 (term  i )) (< (term  i ) (term  j )))) 
  --------------------------------------------------------- "GradualCheckLevel"
  (GradualCheck Gamma gt (CanonicalAtomic (AtomicSet j)))]

;; #source file ./ott/lang_simple.ott  lines 1495 - 1501 
 [
  
  (ConsistentSet gV)
  (GradualNormCheck Gamma gU gS gV)
    
  (GradualCheck (EnvExt x gU Gamma) gT gV)
  ------------------------------------------ "GradualCheckPi"
  (GradualCheck Gamma (TermPi x gS gT) gV)]

;; #source file ./ott/lang_simple.ott  lines 1503 - 1507 
 [
    
  (GradualCheck (EnvExt x gU Gamma) gt gV)
  ------------------------------------------------------------- "GradualCheckLamPi"
  (GradualCheck Gamma  (TermLam x gt)  (CanonicalPi x gU gV))]

;; #source file ./ott/lang_simple.ott  lines 1508 - 1514 
 [
   (side-condition ,(not (alpha-equivalent? (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
   (where   z  ,(gensym)) 
    
  (GradualCheck (EnvExt z gU Gamma)  (substitute  gt   x   z )   (substitute  gV   y   z ) )
  ------------------------------------------------------------- "GradualCheckLamPiAlpha"
  (GradualCheck Gamma  (TermLam x gt)  (CanonicalPi y gU gV))]

;; #source file ./ott/lang_simple.ott  lines 1516 - 1520 
 [
    
  (GradualCheck (EnvExt x CanonicalDyn Gamma) gt CanonicalDyn)
  ---------------------------------------------------- "GradualCheckLamDyn"
  (GradualCheck Gamma  (TermLam x gt)  CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 1521 - 1524 
 [
  (GradualSet Gamma gU)
  --------------------------------- "GradualCheckDyn"
  (GradualCheck Gamma TermDyn gU)]

)
(define-judgment-form L 
 
  #:mode (GradualSetNorm I O I)
  #:contract (GradualSetNorm Gamma gU TT)

;; #source file ./ott/lang_simple.ott  lines 1535 - 1538 
 [
  (GradualNormSynth Gamma TT gU (CanonicalAtomic (AtomicSet i)))
  ------------------------------ "GradualSetNormSynth"
  (GradualSetNorm Gamma gU TT)]

;; #source file ./ott/lang_simple.ott  lines 1540 - 1544 
 [
  (GradualSetNorm Gamma gU SS)
  (GradualSetNorm (EnvExt x gU Gamma) gV TT)
  --------------------------------------------------------------- "GradualSetNormPi"
  (GradualSetNorm Gamma (CanonicalPi x gU gV) (TermPi x SS TT))]

;; #source file ./ott/lang_simple.ott  lines 1551 - 1553 
 [
  --------------------------------------------- "GradualSetNormDyn"
  (GradualSetNorm Gamma CanonicalDyn TermDyn)]

)
(define-judgment-form L 
 
  #:mode (GEtaLong I I)
  #:contract (GEtaLong gv gV)

;; #source file ./ott/lang_simple.ott  lines 1559 - 1561 
 [-------------------------------------------------------- "GEtaLongAtomic"
  (GEtaLong (CanonicalAtomic grr) (CanonicalAtomic gRR))]

;; #source file ./ott/lang_simple.ott  lines 1562 - 1564 
 [----------------------------------------------- "GEtaLongAtomicDyn"
  (GEtaLong (CanonicalAtomic grr) CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 1566 - 1570 
 [ (where   z  ,(gensym)) 
  (GEtaLong  (substitute  gu   x   z )   (substitute  gV   y   z ) )
  -------------------------------------------------------- "GEtaLongLamAlpha"
  (GEtaLong  (CanonicalLam x gu)  (CanonicalPi y gU gV))]

;; #source file ./ott/lang_simple.ott  lines 1571 - 1573 
 [---------------------------- "GEtaLongDyn"
  (GEtaLong CanonicalDyn gU)]

;; #source file ./ott/lang_simple.ott  lines 1574 - 1576 
 [--------------------------------------- "GEtaLongPi"
  (GEtaLong (CanonicalPi x gU gV) gV_^)]

)
(define-judgment-form L 
 
  #:mode (GEtaExpand I O I)
  #:contract (GEtaExpand grr gv gV)

;; #source file ./ott/lang_simple.ott  lines 1582 - 1584 
 [-------------------------------------------------------------- "GEtaExpandAtomic"
  (GEtaExpand grr (CanonicalAtomic grr) (CanonicalAtomic gRR))]

;; #source file ./ott/lang_simple.ott  lines 1585 - 1587 
 [----------------------------------------------------- "GEtaExpandDyn"
  (GEtaExpand grr (CanonicalAtomic grr) CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 1589 - 1593 
 [(GEtaExpand  (AtomicSpine  y  SpineEmpty)  gu gU)
  (GEtaExpand (AtomicSpine x (SpineCons ge gu)) gv gV)
  ----------------------------------------------------------------------------- "GEtaExpandPi"
  (GEtaExpand (AtomicSpine x ge)  (CanonicalLam y gv)  (CanonicalPi y gU gV))]

)
(define-judgment-form L 
 
  #:mode (GEtaExpandC I O I)
  #:contract (GEtaExpandC gu gv gV)

;; #source file ./ott/lang_simple.ott  lines 1599 - 1602 
 [(GEtaExpand grr gv gV)
  ------------------------------------------- "GEtaExpandCAtomic"
  (GEtaExpandC (CanonicalAtomic grr) gv gV)]

;; #source file ./ott/lang_simple.ott  lines 1603 - 1606 
 [(GEtaExpandC gu gv gV)
  --------------------------------------------------------------------------------- "GEtaExpandCLam"
  (GEtaExpandC  (CanonicalLam x gu)   (CanonicalLam x gv)  (CanonicalPi x gU gV))]

;; #source file ./ott/lang_simple.ott  lines 1607 - 1611 
 [ (where   z  ,(gensym)) 
  (GEtaExpandC  (substitute  gu   x   z )  gv  (substitute  gV   x   z ) )
  --------------------------------------------------------------------------------- "GEtaExpandCLamAlpha"
  (GEtaExpandC  (CanonicalLam x gu)   (CanonicalLam z gv)  (CanonicalPi y gU gV))]

;; #source file ./ott/lang_simple.ott  lines 1612 - 1616 
 [(GEtaExpandC gU gU_^ gV_^^)
  (GEtaExpandC gV gV_^ gV_^^)
  --------------------------------------------------------------------- "GEtaExpandCPi"
  (GEtaExpandC (CanonicalPi x gU gV) (CanonicalPi x gU_^ gV_^) gV_^^)]

;; #source file ./ott/lang_simple.ott  lines 1618 - 1620 
 [-------------------------------------------- "GEtaExpandCDyn"
  (GEtaExpandC CanonicalDyn CanonicalDyn gV)]

;; #source file ./ott/lang_simple.ott  lines 1621 - 1623 
 [---------------------------------- "GEtaExpandCDynType"
  (GEtaExpandC gu gu CanonicalDyn)]

)
(define-judgment-form L 
 
  #:mode (FEtaExpandC I O I)
  #:contract (FEtaExpandC gu gv gV)

;; #source file ./ott/lang_simple.ott  lines 1629 - 1632 
 [(GEtaExpandC gu gv (CanonicalPi x gU gV))
  ------------------------------------------- "FEtaExpandCPi"
  (FEtaExpandC gu gv (CanonicalPi x gU gV))]

;; #source file ./ott/lang_simple.ott  lines 1633 - 1636 
 [ (where   x  ,(gensym)) 
  -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- "FEtaExpandCDyn"
  (FEtaExpandC (CanonicalAtomic (AtomicSpine y ge))  (CanonicalLam x (CanonicalAtomic (AtomicSpine y (SpineCons ge (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) )))))  CanonicalDyn)]

)
(define-judgment-form L 
 
  #:mode (GradualNormSynth I I O O)
  #:contract (GradualNormSynth Gamma tt gv gU)

;; #source file ./ott/lang_simple.ott  lines 1644 - 1648 
 [
  (GradualSetNorm Gamma gV TT)
  (GradualNormCheck Gamma gv tt gV)
  -------------------------------------------------- "GradualNormSynthAnn"
  (GradualNormSynth Gamma  (TermAnn tt TT)  gv gV)]

;; #source file ./ott/lang_simple.ott  lines 1649 - 1652 
 [
   (side-condition ,(> (term  i ) 0)) 
  ------------------------------------------------------------------------------------------------------------------ "GradualNormSynthSet"
  (GradualNormSynth Gamma (TermSet i) (CanonicalAtomic (AtomicSet i)) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 1654 - 1659 
 [
    
  (GVarLook x gU Gamma)
  (GEtaExpand  (AtomicSpine  x  SpineEmpty)  gv gU)
  -------------------------------------------- "GradualNormSynthVar"
  (GradualNormSynth Gamma x gv gU)]

;; #source file ./ott/lang_simple.ott  lines 1663 - 1672 
 [
  (GradualNormSynth Gamma ss gu gV)
  (FEtaExpandC gu gu_^ gV)
  (Domain gV gV_11)
  (GradualNormCheck Gamma gv tt gV_11)
  (BodySub gV_11 gv gu_^ gv_^)
  (CodSub gV_11 gv gV gV_22)
  (GEtaExpandC gv_^ gv_^^ gV_22)
  ------------------------------------------------------ "GradualNormSynthApp"
  (GradualNormSynth Gamma (TermApp ss tt) gv_^^ gV_22)]

)
(define-judgment-form L 
 
  #:mode (GradualNormCheck I O I I)
  #:contract (GradualNormCheck Gamma gv tt gU)

;; #source file ./ott/lang_simple.ott  lines 1681 - 1685 
 [
  (GradualNormSynth Gamma tt gv gV)
  (MorePrecise gV gU)
  ----------------------------------- "GradualNormCheckSynthUp"
  (GradualNormCheck Gamma gv tt gU)]

;; #source file ./ott/lang_simple.ott  lines 1686 - 1692 
 [
  (GradualNormSynth Gamma tt gv gV)
  (Consistent gU gV)
  (Meet gU gV gU_^)
   (side-condition ,(not (alpha-equivalent? (term  gU_^ ) (term  gV )))) 
  --------------------------------------------- "GradualNormCheckSynthDown"
  (GradualNormCheck Gamma CanonicalDyn tt gU)]

;; #source file ./ott/lang_simple.ott  lines 1693 - 1697 
 [
  (GradualNormSynth Gamma tt gv (CanonicalAtomic (AtomicSet i)))
   (side-condition ,(and (< 0 (term  i )) (< (term  i ) (term  j )))) 
  ---------------------------------------------------------------- "GradualNormCheckLevel"
  (GradualNormCheck Gamma gv tt (CanonicalAtomic (AtomicSet j)))]

;; #source file ./ott/lang_simple.ott  lines 1699 - 1707 
 [
  (ConsistentSet gV)
  (GradualNormCheck Gamma gU_11 SS gV)
    
  (GradualNormCheck (EnvExt x gU_11 Gamma) gU_22 TT gV)
  -------------------------------------------------------------------------- "GradualNormCheckPi"
  (GradualNormCheck Gamma (CanonicalPi x gU_11 gU_22) (TermPi x SS TT) gV)]

;; #source file ./ott/lang_simple.ott  lines 1708 - 1712 
 [
    
  (GradualNormCheck (EnvExt x gU Gamma) gv tt gV)
  --------------------------------------------------------------------------------------- "GradualNormCheckLamPi"
  (GradualNormCheck Gamma  (CanonicalLam x gv)   (TermLam x tt)  (CanonicalPi x gU gV))]

;; #source file ./ott/lang_simple.ott  lines 1713 - 1719 
 [
   (side-condition ,(not (alpha-equivalent? (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
   (where   z  ,(gensym)) 
    
  (GradualNormCheck (EnvExt z gU Gamma) gv  (substitute  tt   x   z )   (substitute  gV   y   z ) )
  --------------------------------------------------------------------------------------- "GradualNormCheckLamPiAlpha"
  (GradualNormCheck Gamma  (CanonicalLam z gv)   (TermLam x tt)  (CanonicalPi y gU gV))]

;; #source file ./ott/lang_simple.ott  lines 1720 - 1724 
 [
    
  (GradualNormCheck (EnvExt x CanonicalDyn Gamma) gv tt CanonicalDyn)
  ------------------------------------------------------------------------------ "GradualNormCheckLamDyn"
  (GradualNormCheck Gamma  (CanonicalLam x gv)   (TermLam x tt)  CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 1725 - 1728 
 [
  (GradualSet Gamma gU)
  -------------------------------------------------- "GradualNormCheckDyn"
  (GradualNormCheck Gamma CanonicalDyn TermDyn gU)]

;; #source file ./ott/lang_simple.ott  lines 1730 - 1735 
 [
  (GradualNormSynth Gamma ett gv gV)
  (Meet gU gV gV)
  ------------------------------------------------ "GradualNormCheckEvUp"
  (GradualNormCheck Gamma gv (TermEp ep ett) gU)]

;; #source file ./ott/lang_simple.ott  lines 1736 - 1742 
 [
  (GradualNormSynth Gamma ett gv gV)
  (Meet gU gV gU_^)
   (side-condition ,(not (alpha-equivalent? (term  gU_^ ) (term  gV )))) 
  ---------------------------------------------------------- "GradualNormCheckEvDown"
  (GradualNormCheck Gamma CanonicalDyn (TermEp ep ett) gU)]

;; #source file ./ott/lang_simple.ott  lines 1744 - 1746 
 [
  ---------------------------------------------------------------- "GradualNormCheckDynAnn"
  (GradualNormCheck Gamma CanonicalDyn (TermDynAnn Gamma gU) gU)]

)
(define-judgment-form L 
 
  #:mode (GradualElabSynth I I O O)
  #:contract (GradualElabSynth Gamma gt et gU)

;; #source file ./ott/lang_simple.ott  lines 1753 - 1757 
 [
  
  (GradualSetNorm Gamma gV gT)
  (GradualElabCheck Gamma et gt gV)
  -------------------------------------------------- "GradualElabSynthAnn"
  (GradualElabSynth Gamma  (TermAnn gt gT)  et gV)]

;; #source file ./ott/lang_simple.ott  lines 1758 - 1761 
 [
   (side-condition ,(> (term  i ) 0)) 
  ---------------------------------------------------------------------------------------------- "GradualElabSynthSet"
  (GradualElabSynth Gamma (TermSet i) (TermSet i) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 1763 - 1767 
 [
    
  (GVarLook x gU Gamma)
  ----------------------------------------------------- "GradualElabSynthVar"
  (GradualElabSynth Gamma x x gU)]

;; #source file ./ott/lang_simple.ott  lines 1771 - 1778 
 [
  
  (GradualElabSynth Gamma gs es gV)
  (Domain gV gV_11)
  (GradualElabCheck Gamma et gt gV_11)
  (GradualNormCheck Gamma gv gt gV_11)
  (CodSub gV_11 gv gV gV_22)
  ---------------------------------------------------------------- "GradualElabSynthApp"
  (GradualElabSynth Gamma (TermApp gs gt) (TermApp es et) gV_22)]

)
(define-judgment-form L 
 
  #:mode (GradualElabCheck I O I I)
  #:contract (GradualElabCheck Gamma et gt gU)

;; #source file ./ott/lang_simple.ott  lines 1787 - 1791 
 [
  (GradualElabSynth Gamma gt et gV_^)
   (side-condition , (alpha-equivalent? (term  gV_^ ) (term  gV ))) 
  ----------------------------------- "GradualElabCheckSynthEq"
  (GradualElabCheck Gamma et gt gV)]

;; #source file ./ott/lang_simple.ott  lines 1792 - 1797 
 [
  (GradualElabSynth Gamma gt et gV)
   (side-condition ,(not (alpha-equivalent? (term  gU ) (term  gV )))) 
  (Meet gU gV gV_^)
  ------------------------------------------------------------------------- "GradualElabCheckSynth"
  (GradualElabCheck Gamma (TermEp (EvidenceEv Gamma gV_^ gV_^) et) gt gU)]

;; #source file ./ott/lang_simple.ott  lines 1799 - 1803 
 [
  (GradualElabSynth Gamma gt et (CanonicalAtomic (AtomicSet i)))
   (side-condition ,(and (< 0 (term  i )) (< (term  i ) (term  j )))) 
  ---------------------------------------------------------------- "GradualElabCheckLevel"
  (GradualElabCheck Gamma et gt (CanonicalAtomic (AtomicSet j)))]

;; #source file ./ott/lang_simple.ott  lines 1805 - 1814 
 [
  
  (ConsistentSet gV)
  (GradualElabCheck Gamma eS gS gV)
  (GradualNormCheck Gamma gU gS gV)
    
  (GradualElabCheck (EnvExt x gU Gamma) eT gT gV)
  --------------------------------------------------------------- "GradualElabCheckPi"
  (GradualElabCheck Gamma (TermPi x eS eT) (TermPi x gS gT) gV)]

;; #source file ./ott/lang_simple.ott  lines 1815 - 1819 
 [
    
  (GradualElabCheck (EnvExt x gU Gamma) et gt gV)
  ---------------------------------------------------------------------------------- "GradualElabCheckLamPi"
  (GradualElabCheck Gamma  (TermLam x et)   (TermLam x gt)  (CanonicalPi x gU gV))]

;; #source file ./ott/lang_simple.ott  lines 1820 - 1826 
 [
   (side-condition ,(not (alpha-equivalent? (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
   (where   z  ,(gensym)) 
    
  (GradualElabCheck (EnvExt z gU Gamma) et  (substitute  gt   x   z )   (substitute  gV   y   z ) )
  ---------------------------------------------------------------------------------- "GradualElabCheckLamPiAlpha"
  (GradualElabCheck Gamma  (TermLam z et)   (TermLam x gt)  (CanonicalPi y gU gV))]

;; #source file ./ott/lang_simple.ott  lines 1827 - 1831 
 [
    
  (GradualElabCheck (EnvExt x CanonicalDyn Gamma) et gt CanonicalDyn)
  ------------------------------------------------------------------------- "GradualElabCheckLamDyn"
  (GradualElabCheck Gamma  (TermLam x et)   (TermLam x gt)  CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 1832 - 1835 
 [
  (GradualSet Gamma gU)
  ----------------------------------------------------------- "GradualElabCheckDyn"
  (GradualElabCheck Gamma (TermDynAnn Gamma gU) TermDyn gU)]
)

;;; definitions 

(define-judgment-form
  L
  #:mode (EvSynth I I O)
  #:contract (EvSynth Gamma et gU)

;; #source file ./ott/lang_simple.ott  lines 1848 - 1851 
 [
   (side-condition ,(> (term  i ) 0)) 
  ------------------------------------------------------------------------- "EvSynthSet"
  (EvSynth Gamma (TermSet i) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 1853 - 1857 
 [
    
  (GVarLook x gU Gamma)
  -------------------------------- "EvSynthVar"
  (EvSynth Gamma x gU)]

;; #source file ./ott/lang_simple.ott  lines 1861 - 1867 
 [
  
  (EvSynth Gamma es gV)
  (Domain gV gU)
  (GradualNormCheck Gamma gv et gU)
  (CodSub gU gv gV gV_22)
  --------------------------------------- "EvSynthApp"
  (EvSynth Gamma (TermApp es et) gV_22)]

)
(define-judgment-form L 
 
  #:mode (EvCheck I I I)
  #:contract (EvCheck Gamma et gU)

;; #source file ./ott/lang_simple.ott  lines 1874 - 1878 
 [
  (EvSynth Gamma et gU)
  (EvConsistent ep gU gV)
  ----------------------------------- "EvCheckEv"
  (EvCheck Gamma (TermEp ep et) gV)]

;; #source file ./ott/lang_simple.ott  lines 1879 - 1885 
 [
  
  (ConsistentSet gV)
  (GradualNormCheck Gamma gU eS gV)
    
  (EvCheck (EnvExt x gU Gamma) eT gV)
  ------------------------------------- "EvCheckPi"
  (EvCheck Gamma (TermPi x eS eT) gV)]

;; #source file ./ott/lang_simple.ott  lines 1888 - 1892 
 [
    
  (EvCheck (EnvExt x gU Gamma) et gV)
  -------------------------------------------------------- "EvCheckLamPi"
  (EvCheck Gamma  (TermLam x et)  (CanonicalPi x gU gV))]

;; #source file ./ott/lang_simple.ott  lines 1894 - 1898 
 [
    
  (EvCheck (EnvExt x CanonicalDyn Gamma) et CanonicalDyn)
  ----------------------------------------------- "EvCheckLamDyn"
  (EvCheck Gamma  (TermLam x et)  CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 1899 - 1902 
 [
  (GradualSet Gamma gU)
  ------------------------------------------ "EvCheckDyn"
  (EvCheck Gamma (TermDynAnn Gamma gU) gU)]

)
(define-judgment-form L 
 
  #:mode (SimpleSmallStep I O)
  #:contract (SimpleSmallStep s t)

;; #source file ./ott/lang_simple.ott  lines 1918 - 1920 
 [
  --------------------------------------- "SimpleSmallStepAnn"
  (SimpleSmallStep  (TermAnn sv T)  sv)]

;; #source file ./ott/lang_simple.ott  lines 1921 - 1923 
 [
  ------------------------------------------------------------------------ "SimpleSmallStepApp"
  (SimpleSmallStep (TermApp  (TermLam x t)  sv)  (esubst  t   x   sv ) )]

;; #source file ./ott/lang_simple.ott  lines 1925 - 1928 
 [
  (SimpleSmallStep s t)
  ------------------------------------------------------------- "SimpleSmallStepContext"
  (SimpleSmallStep  (in-hole  SC   s )   (in-hole  SC   t ) )]

)
(define-judgment-form L 
 
  #:mode (SmallStep I O)
  #:contract (SmallStep es et)

;; #source file ./ott/lang_simple.ott  lines 1936 - 1939 
 [
  (ConsistentTrans ep_11 ep_22 ep_33)
  ------------------------------------------------------------------ "SmallStepAscr"
  (SmallStep (TermEp ep_11  (TermEp ep_22 rv) ) (TermEp ep_33 rv))]

;; #source file ./ott/lang_simple.ott  lines 1942 - 1945 
 [
   (side-condition ,(empty? (judgment-holds (ConsistentTrans  ep_11   ep_22  ep_9999) ep_9999))) 
  ---------------------------------------------------------- "SmallStepAscrFail"
  (SmallStep (TermEp ep_11  (TermEp ep_22 rv) ) TermError)]

;; #source file ./ott/lang_simple.ott  lines 1949 - 1951 
 [
  -------------------------------------------------------------------- "SmallStepApp"
  (SmallStep (TermApp  (TermLam x et)  ev)  (esubst  et   x   ev ) )]

;; #source file ./ott/lang_simple.ott  lines 1952 - 1957 
 [
  (Domain gU gV_11)
  (GradualNormCheck EnvEmpty gv ev gV_11)
  (CodSub gV_11 gv gU gV_22)
  ------------------------------------------------------------------------------- "SmallStepAppDyn"
  (SmallStep (TermApp (TermDynAnn EnvEmpty gU) ev) (TermDynAnn EnvEmpty gV_22))]

;; #source file ./ott/lang_simple.ott  lines 1958 - 1963 
 [
  (EvDom ep_11 ep_33)
  (ConsistentTrans ep_22 ep_33 ep_44)
  (EvCod rv ep_11 ep_55)
  -------------------------------------------------------------------------------------------------------------------------------------- "SmallStepAppEv"
  (SmallStep (TermApp  (TermEp ep_11  (TermLam x et) )   (TermEp ep_22 rv) ) (TermEp ep_55   (esubst  et   x   (TermEp ep_44 rv) )  ))]

;; #source file ./ott/lang_simple.ott  lines 1964 - 1977 
 [
  (Domain gV_11 gV_11^)
  (Domain gV_22 gV_22^)
  (Domain gV_33 gV_33^)
  (ConsistentTrans ep_11 (EvidenceEv EnvEmpty gV_11^ gV_22^) ep_22)
  (GradualNormCheck EnvEmpty gv_11 (TermEp ep_11 rv) gV_11^)
  (GradualNormCheck EnvEmpty gv_22 (TermEp ep_11 rv) gV_22^)
  (GradualNormCheck EnvEmpty gv_33 (TermEp ep_11 rv) gV_33^)
  (CodSub gV_11^ gv_11 gV_11 gV_11^^)
  (CodSub gV_22^ gv_22 gV_22 gV_22^^)
  (CodSub gV_33^ gv_33 gV_33 gV_33^^)
  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- "SmallStepAppEvDyn"
  (SmallStep (TermApp  (TermEp (EvidenceEv EnvEmpty gV_11 gV_22) (TermDynAnn EnvEmpty gV_33))   (TermEp ep_11 rv) ) (TermEp (EvidenceEv EnvEmpty gV_11^^ gV_22^^) (TermDynAnn EnvEmpty gV_33^^)))]

;; #source file ./ott/lang_simple.ott  lines 1978 - 1981 
 [
  
  (SmallStep (TermApp  (TermEp ep_11 rv)   (TermEp (EvidenceEv EnvEmpty CanonicalDyn CanonicalDyn) rv) ) es)
  ------------------------------------------------- "SmallStepAppEvRaw"
  (SmallStep (TermApp  (TermEp ep_11 rv)  rv) es)]

;; #source file ./ott/lang_simple.ott  lines 1982 - 1986 
 [
  
  (EvDom ep_11 ep_33)
   (side-condition ,(empty? (judgment-holds (ConsistentTrans  ep_22   ep_33  ep_9999) ep_9999))) 
  ------------------------------------------------------------------------- "SmallStepAppFailTrans"
  (SmallStep (TermApp  (TermEp ep_11 ru)   (TermEp ep_22 rv) ) TermError)]

;; #source file ./ott/lang_simple.ott  lines 1987 - 1990 
 [
  
   (side-condition ,(empty? (judgment-holds (EvDom  ep_11  ep_9999) ep_9999))) 
  -------------------------------------------------------- "SmallStepAppFailDom"
  (SmallStep (TermApp  (TermEp ep_11 rv)  ev) TermError)]

;; #source file ./ott/lang_simple.ott  lines 1996 - 1999 
 [
   (side-condition ,(empty? (judgment-holds (Domain  gU  gV_9999) gV_9999))) 
  ------------------------------------------------------------------------------ "SmallStepAppDynFail"
  (SmallStep (TermApp  (TermEp ep_11 (TermDynAnn EnvEmpty gU))  ev) TermError)]

;; #source file ./ott/lang_simple.ott  lines 2002 - 2007 
 [
  (SmallStep es et)
   (side-condition ,(not (alpha-equivalent? (term  es ) (term TermError)))) 
   (side-condition ,(not (alpha-equivalent? (term  et ) (term TermError)))) 
  --------------------------------------------------------- "SmallStepContext"
  (SmallStep  (in-hole  EC   es )   (in-hole  EC   et ) )]

;; #source file ./ott/lang_simple.ott  lines 2008 - 2011 
 [
  (SmallStep es TermError)
  --------------------------------------------- "SmallStepContextErr"
  (SmallStep  (in-hole  EC   es )  TermError)]

)
(define-judgment-form L 
 
  #:mode (ConsistentTrans I I O)
  #:contract (ConsistentTrans ep_11 ep_22 ep_33)

;; #source file ./ott/lang_simple.ott  lines 2017 - 2021 
 [
  (Meet gU_11 gU_22 gU_33)
  (Meet gV_11 gV_22 gV_33)
  ---------------------------------------------------------------------------------------------------------------- "ConsistentTransDef"
  (ConsistentTrans (EvidenceEv Gamma gU_11 gV_11) (EvidenceEv Gamma gU_22 gV_22) (EvidenceEv Gamma gU_33 gV_33))]

)
(define-judgment-form L 
 
  #:mode (EvDom I O)
  #:contract (EvDom ep_11 ep_22)

;; #source file ./ott/lang_simple.ott  lines 2027 - 2031 
 [
  (Domain gU gU_^)
  (Domain gV gV_^)
  --------------------------------------------------------------- "EvDomPair"
  (EvDom (EvidenceEv Gamma gU gV) (EvidenceEv Gamma gU_^ gV_^))]

)
(define-judgment-form L 
 
  #:mode (EvCod I I O)
  #:contract (EvCod ev ep_11 ep_22)

;; #source file ./ott/lang_simple.ott  lines 2038 - 2046 
 [
  
  (Domain gU gU_11)
  (Domain gV gV_11)
  (GradualNormCheck EnvEmpty gu ev gU_11)
  (GradualNormCheck EnvEmpty gv ev gV_11)
  (CodSub gU_11 gu gU gU_22)
  (CodSub gV_11 gv gV gV_22)
  -------------------------------------------------------------------- "EvCodPair"
  (EvCod ev (EvidenceEv Gamma gU gV) (EvidenceEv Gamma gU_22 gV_22))]
)
;; #source file ./ott/lang_simple.ott  lines 2061 - 2137 
(define-judgment-form
  L
  #:mode (ElabAndType I I O)
  ; #:contract (ElabAndType gs esgU)
  [ (GradualElabSynth Gamma gs es gU)
  ---------------------------------
  (ElabAndType gs Gamma (ElabTypePair es gU))]

)

(define-judgment-form
  L
  #:mode (GetElab I O)
  [
  ---------------------------------
  (GetElab (ElabTypePair es gU) es)]
)

(define-judgment-form
  L
  #:mode (GetType I O)
  [
  ---------------------------------
  (GetType (ElabTypePair es gU) gU)]
)

(define (typePairToRealPair pr) 
  (cons 
    (first (judgment-holds (GetElab ,pr es) es) )
    (first (judgment-holds (GetType ,pr gU) gU) )
  ))

(define red
  (reduction-relation
   L
   (--> es et
        (judgment-holds
         (SmallStep es et)
         )
      )
   )
  )

(define (progress-holds? e)
  (if (types? e)
      (or (v? e)
          (reduces? e))
      #t))

(define (preservation-holds? e)
  (let
      ([reductions
        (apply-reduction-relation
               red
               (term (,e)))])
(if (types? e)
    (andmap types? reductions)
    #t
    )))

(define (types? es)
  (not (null? (append 
  (judgment-holds (EvCheck EnvEmpty ,es gU)
                              gU)
(judgment-holds (EvSynth EnvEmpty ,es gU)
                            gU)
                              ))))
 
(define v? (redex-match L ev))
 
(define (reduces? e)
  (not (null? (apply-reduction-relation
               red
               (term (,e))))))

