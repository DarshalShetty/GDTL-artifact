;; #source  
;;; generated by Ott 0.28 from: ./ott/lang_simple.ott

#lang racket
(require redex/reduction-semantics)

;; #source file ./ott/lang_simple.ott  lines 4 - 6 
;; #source file ./ott/lang_simple.ott  lines 8 - 13 
(provide (all-defined-out))

(define currently-defined-vars 
  (make-hasheq))

;; #source file ./ott/lang_simple.ott  lines 15 - 91 
;; #source file ./ott/lang_simple.ott  lines 96 - 98 
;; #source file ./ott/lang_simple.ott  lines 101 - 101 
;; #source file ./ott/lang_simple.ott  lines 107 - 115 and file ./ott/lang_simple.ott  lines 120 - 146 and file ./ott/lang_simple.ott  lines 151 - 160 and file ./ott/lang_simple.ott  lines 169 - 174 and file ./ott/lang_simple.ott  lines 177 - 182 and file ./ott/lang_simple.ott  lines 184 - 186 and file ./ott/lang_simple.ott  lines 191 - 214 and file ./ott/lang_simple.ott  lines 219 - 233 and file ./ott/lang_simple.ott  lines 236 - 241 and file ./ott/lang_simple.ott  lines 243 - 246 and file ./ott/lang_simple.ott  lines 254 - 256 and file ./ott/lang_simple.ott  lines 264 - 275 and file ./ott/lang_simple.ott  lines 279 - 285 and file ./ott/lang_simple.ott  lines 288 - 293 and file ./ott/lang_simple.ott  lines 295 - 303 and file ./ott/lang_simple.ott  lines 307 - 309 and file ./ott/lang_simple.ott  lines 320 - 325 and file ./ott/lang_simple.ott  lines 327 - 333 and file ./ott/lang_simple.ott  lines 379 - 382 and file ./ott/lang_simple.ott  lines 384 - 388 and file ./ott/lang_simple.ott  lines 390 - 394 and file ./ott/lang_simple.ott  lines 514 - 519 and file ./ott/lang_simple.ott  lines 522 - 524 and file ./ott/lang_simple.ott  lines 526 - 528 and file ./ott/lang_simple.ott  lines 530 - 531 
(define-language L  

(level i j ::= natural)

;; #source file ./ott/lang_simple.ott  lines 219 - 233 
  (canonical gu gU ::= 
    (CanonicalLam var gu)
    CanonicalDyn
    (CanonicalAtomic grr)
    (CanonicalPi var gU_11 gU_22))
  ;grammar_pp, 2817: and 
;; #source file ./ott/lang_simple.ott  lines 236 - 241 
  (atomic grr gRR ::= 
    (AtomicSpine var ge)
    (AtomicSet i))
  ;grammar_pp, 2817: and 
;; #source file ./ott/lang_simple.ott  lines 243 - 246 
  (spine ge ::= 
    SpineEmpty
    (SpineCons ge gu))

;; #source file ./ott/lang_simple.ott  lines 390 - 394 
  (Env ::= 
    EnvEmpty
    (EnvExt var gU Env)
    (Envconcat Env_11 Env_22))

;; #source file ./ott/lang_simple.ott  lines 254 - 256 
  (epsilon ep ::= 
    (EvidenceEv Gamma gU))

;; #source file ./ott/lang_simple.ott  lines 120 - 146 
  (term tt ett TT ::= 
    (TermLam var tt)
    (TermApp tt_11 tt_22)
    var
    (TermSet i)
    (TermPi var TT_11 TT_22)
    (TermAnn tt TT)
    (TermEp ep tt)
    TermDyn
    TermError)

(iinf ::= number)

;; #source file ./ott/lang_simple.ott  lines 526 - 528 
  (iinfs jinfs ::= 
    (UniverseMultiSetSingleton iinf)
    (UniverseMultiSetSum iinfs jinfs))

;; #source file ./ott/lang_simple.ott  lines 530 - 531 
  (ent ::= 
    (ENTTriple et gu gU))

;; #source file ./ott/lang_simple.ott  lines 320 - 325 
  (simpleContext SC ::= 
    (TermPi x hole T)
    (TermApp hole t)
    (TermApp sv hole)
    (TermAnn hole T))

;; #source file ./ott/lang_simple.ott  lines 522 - 524 
  (is js ::= 
    (LevelMultiSetSingleton i)
    (LevelMultiSetSum is js))

;; #source file ./ott/lang_simple.ott  lines 307 - 309 
  (dummyev dummyeV ::= 
    (DummyEvidenceValueEv ep rv)
    (DummyEvidenceValueRaw rv))

;; #source file ./ott/lang_simple.ott  lines 327 - 333 
  (evalContext EC ::= 
    (TermPi x hole eT)
    (TermApp hole et)
    (TermApp ev hole)
    (TermEp ep hole))

;; #source file ./ott/lang_simple.ott  lines 379 - 382 
  (SGamma ::= 
    EnvEmpty
    (EnvExt var U SGamma)
    (Envconcat SGamma_11 SGamma_22))

;; #source file ./ott/lang_simple.ott  lines 279 - 285 
  (rv rV ::= 
    (TermPi var eV_11 eV_22)
    (TermLam var et)
    (TermSet i)
    TermDyn)

;; #source file ./ott/lang_simple.ott  lines 177 - 182 
  (rr RR ::= 
    (AtomicSpine var e)
    (AtomicSet i))

;; #source file ./ott/lang_simple.ott  lines 191 - 214 
  (gt gT ::= 
    (TermLam var gt)
    (TermApp gt_11 gt_22)
    var
    (TermSet i)
    (TermPi var gT_11 gT_22)
    (TermAnn gt gT)
    TermDyn)

;; #source file ./ott/lang_simple.ott  lines 169 - 174 
  (u U ::= 
    (CanonicalLam var u)
    (CanonicalAtomic rr)
    (CanonicalPi var U_11 U_22))

;; #source file ./ott/lang_simple.ott  lines 264 - 275 
  (et eT ::= 
    (TermPi var eT_11 eT_22)
    (TermLam var et)
    var
    (TermApp et_11 et_22)
    TermDyn
    (TermSet i)
    (TermEp ep et)
    TermError)

;; #source file ./ott/lang_simple.ott  lines 295 - 303 
  (ev eV ::= 
    (TermEp ep rv)
    (TermPi var eV eT)
    (TermLam var et)
    (TermSet i)
    TermDyn)

;; #source file ./ott/lang_simple.ott  lines 288 - 293 
  (simpleValue sv sV ::= 
    (TermPi var sV T)
    (TermLam var t)
    (TermSet i))

;; #source file ./ott/lang_simple.ott  lines 384 - 388 
  (Gamma ::= 
    EnvEmpty
    (EnvExt var gU Gamma)
    (Envconcat Gamma_11 Gamma_22))

;; #source file ./ott/lang_simple.ott  lines 151 - 160 
  (t T ::= 
    (TermLam var t)
    (TermApp t_11 t_22)
    var
    (TermPi var T_11 T_22)
    (TermSet i)
    (TermAnn t T))

;; #source file ./ott/lang_simple.ott  lines 184 - 186 
  (e ::= 
    SpineEmpty
    (SpineCons e u))
   (var x y z X Y Z ::= variable-not-otherwise-mentioned)

    #:binding-forms

    (TermLam x tt #:refers-to (shadow x))
    (TermPi x TT_11 TT_22 #:refers-to (shadow x))
    (StaticTermLam x t #:refers-to (shadow x))
    (StaticTermPi x T_11 T_22)
    (SCanonicalLam x u #:refers-to (shadow x))

    (GradualTermLam x gt #:refers-to (shadow x))
    (GradualTermPi x gT_11 gT_22)
    (CanonicalLam x gu #:refers-to (shadow x))
    (CanonicalPi x gU_11 gU_22 #:refers-to (shadow x))

    (EvidenceTermPi x eT_11 eT_22 #:refers-to (shadow x))
    (EvidenceTermLam x et #:refers-to (shadow x))
    (RawValueLam x et #:refers-to (shadow x))
    (SimpleValuePi x sV T #:refers-to (shadow x))
    (SimpleValueLam x t #:refers-to (shadow x))
    (EvidenceValuePi x eV eT #:refers-to (shadow x))
    (EvidenceValueLam x et #:refers-to (shadow x))

)

;;;; subrules 
;; #source file ./ott/lang_simple.ott  lines 545 - 545 and file ./ott/lang_simple.ott  lines 546 - 546 and file ./ott/lang_simple.ott  lines 549 - 549 and file ./ott/lang_simple.ott  lines 550 - 550 and file ./ott/lang_simple.ott  lines 551 - 551 and file ./ott/lang_simple.ott  lines 552 - 552 and file ./ott/lang_simple.ott  lines 553 - 553 and file ./ott/lang_simple.ott  lines 555 - 555 and file ./ott/lang_simple.ott  lines 556 - 556 and file ./ott/lang_simple.ott  lines 561 - 561 and file ./ott/lang_simple.ott  lines 562 - 562 and file ./ott/lang_simple.ott  lines 563 - 563 and file ./ott/lang_simple.ott  lines 566 - 566 
;; #source file ./ott/lang_simple.ott  lines 577 - 588 
;; #source file ./ott/lang_simple.ott  lines 590 - 675 

(define-metafunction L 
  succ : i -> i
  [(succ i) ,(+ (term i) 1)])
  
  (define-metafunction L 
  pred : i -> i
  [(pred i) ,(- (term i) 1)])

(define-metafunction L 
  esubst : et var et -> et 
  [(esubst x_old x_old et_new) et_new ]
  [(esubst x_old y et_new) y ]
  [(esubst (TermPi y eS eT) x_old et_new) 
    (TermPi z (esubst eS x_old et_new) (esubst (substitute eT x z) x_old et_new ))
    (where   z  ,(gensym)) ] 
  [(esubst (TermLam y es) x_old et_new) 
    (TermLam z (esubst (substitute es x z) x_old et_new ))
    (where   z  ,(gensym)) ]
  [(esubst (TermApp es et)) (TermApp (esubst es x_old et_new) (esubst et x_old et_new))]
  [(esubst (TermEp (EvidenceEv Gamma gU_1 gU_2) es) x_old et_new) (TermEp (EvidenceEv Gamma_1 gU_3 gU_4) (esubst es x_old et_new))
    (judgment-holds (GVarLook x_old gV Gamma))
    (judgment-holds (GNormCheck Gamma gu_esnorm es gV))
    (judgment-holds (GradualEnvSub Gamma x_old gV gu_esnorm Gamma_1))
    (judgment-holds (GHsub  x_old gV gu_esnorm gU_1 gU_3))
    (judgment-holds (GHsub  x_old gV gu_esnorm gU_2 gU_4))]
  ;; TODO get rid of types on ? or add Gamma
  [(esubst es x_old et_new) es] 
)

(define-metafunction L 
 is-check-only : term -> boolean
 [(is-check-only TermDyn) #t]
 [(is-check-only (TermPi x SS TT)) #t]
 [(is-check-only (TermLam x tt)) #t]
 [(is-check-only tt) #f] 
)

(define-metafunction L 
 is-check-pair : term gU -> boolean
 [(is-check-pair TermDyn gU) #t]
 [(is-check-pair (TermPi x SS TT) (CanonicalAtomic (AtomicDyn))) #t]
 [(is-check-pair (TermPi x SS TT) (CanonicalAtomic (AtomicSet i))) #t]
 [(is-check-pair (TermLam x tt) (CanonicalAtomic (AtomicDyn))) #t]
 [(is-check-pair (TermLam x tt) (CanonicalPi y gU gV)) #t]
 [(is-check-pair tt gU) #f] 
)

(define-metafunction L 
 is-set-pair : gU gV -> boolean
 [(is-set-pair (CanonicalAtomic (AtomicSet i)) (CanonicalAtomic (AtomicSet j))) #t (side-condition (< (term i) (term j)))]
 [(is-set-pair gU gV) #f] 
)

(define (pt tm)
  (with-handlers ([exn:fail:redex?
                   (lambda (exn) (format "~a" tm))])
    (pretty-term tm)
    ))

(define pretty-term
    (term-match/single L
    [x (symbol->string (term x))]
    [(TermLam x tt) (string-append "(λ " (pt (term x)) " . " (pt (term tt)) ")")]
    [(TermPi x SS TT) (string-append "(( " (pt (term x)) " : " (pt (term SS)) ") -> " (pt (term TT)) ")")]
    [(TermSet i) (string-append "Set" (number->string (term i)))]
    [(TermApp ss tt) (string-append "(" (pt (term ss)) " " (pt (term tt)) ")")]
    [TermDyn "?"]
    [TermError "⊥"]
    [(TermAnn ss tt) (string-append (pt (term ss)) " :: " (pt (term tt)))]
    [(TermDynAnn gU) (string-append "?" (pt (term gU)))]
    [(TermEp (EvidenceEv Gamma gU gV) tt) (string-append "〈" (pt (term gU)) "〉" (pt (term tt)))]
    [(CanonicalAtomic grr) (pt (term grr))]
    [(CanonicalLam x gu) (string-append "(λ " (pt (term x)) " . " (pt (term gu)) ")")]
    [(CanonicalPi x gU gV) (string-append "(( " (pt (term x)) " : " (pt (term gU)) ") -> " (pt (term gV)) ")")]
    [(AtomicSet i) (string-append "Set" (number->string (term i)))]
    [CanonicalDyn "?"]
    [(AtomicSpine x ge) (string-append "(" (pt (term x)) " " (pt (term ge)) ")")]
    [SpineEmpty ""]
    [(SpineCons ge gu) (string-append (pt (term ge)) " " (pt (term gu)))]
    
    ))

(define (printEvType ep)
 (term-let ([(EvidenceEv Gamma gU gV) ep]) (pt (term gU))))

;;; definitions 

(define-judgment-form
  L
  #:mode (GVarLook I O I)
  #:contract (GVarLook x gU Gamma)

;; #source file ./ott/lang_simple.ott  lines 684 - 686 
 [
  ------------------------------------- "GVarLookHead"
  (GVarLook x gU (EnvExt x gU Gamma))]

;; #source file ./ott/lang_simple.ott  lines 687 - 691 
 [
   (side-condition ,(not (alpha-equivalent? L (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  (GVarLook x gU_11 Gamma)
  ------------------------------------------- "GVarLookTail"
  (GVarLook x gU_11 (EnvExt y gU_22 Gamma))]

)
(define-judgment-form L 
 
  #:mode (GVarFree I I)
  #:contract (GVarFree x Gamma)

;; #source file ./ott/lang_simple.ott  lines 695 - 697 
 [----------------------- "GFreeLookNil"
  (GVarFree x EnvEmpty)]

;; #source file ./ott/lang_simple.ott  lines 698 - 702 
 [
   (side-condition ,(not (alpha-equivalent? L (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  (GVarFree x Gamma)
  ---------------------------------- "GFreeLookCons"
  (GVarFree x (EnvExt y gU Gamma))]
)

;;; definitions 

(define-judgment-form
  L
  #:mode (Universe I I O)
  #:contract (Universe Gamma gu iinf)

;; #source file ./ott/lang_simple.ott  lines 723 - 726 
 [
   (side-condition ,(> (term  i ) 0)) 
  ----------------------------------------------------------------- "UniverseSet"
  (Universe Gamma (CanonicalAtomic (AtomicSet i))   (succ  i )  )]

;; #source file ./ott/lang_simple.ott  lines 727 - 732 
 [
  (GVarLook x gU Gamma)
  (Universe Gamma gU  i )
   (side-condition ,(> (term  i ) 0)) 
  ---------------------------------------------------------------------------------- "UniverseVar"
  (Universe Gamma (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) )   (pred  i )  )]

;; #source file ./ott/lang_simple.ott  lines 733 - 737 
 [
  (Universe Gamma gU_11  i )
  (Universe (EnvExt x gU_11 Gamma) gU_22  j )
  ------------------------------------------------------------------ "UniversePi"
  (Universe Gamma (CanonicalPi x gU_11 gU_22)  (max   i     j  ) )]

;; #source file ./ott/lang_simple.ott  lines 738 - 741 
 [
  (Universe Gamma gu  i )
  -------------------------------------------- "UniverseLam"
  (Universe Gamma  (CanonicalLam x gu)   i )]

;; #source file ./ott/lang_simple.ott  lines 742 - 746 
 [
  (Universe Gamma (CanonicalAtomic (AtomicSpine x ge))  i )
  (Universe Gamma gu  j )
  ------------------------------------------------------------------------------------------ "UniverseSpine"
  (Universe Gamma (CanonicalAtomic (AtomicSpine x (SpineCons ge gu)))  (max   i     j  ) )]

;; #source file ./ott/lang_simple.ott  lines 747 - 749 
 [
  ---------------------------------------- "UniverseDyn"
  (Universe Gamma CanonicalDyn  +inf.0 )]

)
(define-judgment-form L 
 
  #:mode (SUniverse I I O)
  #:contract (SUniverse SGamma u i)

;; #source file ./ott/lang_simple.ott  lines 755 - 758 
 [
   (side-condition ,(> (term  i ) 0)) 
  ----------------------------------------------------------------- "SUniverseSet"
  (SUniverse SGamma (CanonicalAtomic (AtomicSet i))  (succ  i ) )]

;; #source file ./ott/lang_simple.ott  lines 759 - 764 
 [
  (GVarLook x U SGamma)
  (SUniverse SGamma U i)
   (side-condition ,(> (term  i ) 0)) 
  ---------------------------------------------------------------------------------- "SUniverseVar"
  (SUniverse SGamma (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) )  (pred  i ) )]

;; #source file ./ott/lang_simple.ott  lines 766 - 770 
 [
  (SUniverse SGamma U_11 i)
  (SUniverse (EnvExt x U_11 SGamma) U_22 j)
  -------------------------------------------------------------- "SUniversePi"
  (SUniverse SGamma (CanonicalPi x U_11 U_22)  (max  i   j ) )]

;; #source file ./ott/lang_simple.ott  lines 771 - 773 
 [
  
  --------------------------------------------- "SUniverseLam"
  (SUniverse SGamma  (CanonicalLam x u)   0 )]

;; #source file ./ott/lang_simple.ott  lines 774 - 778 
 [
  
  (SUniverse SGamma (CanonicalAtomic (AtomicSpine x e)) i)
  (SUniverse SGamma u j)
  -------------------------------------------------------------------------------------- "SUniverseSpine"
  (SUniverse SGamma (CanonicalAtomic (AtomicSpine x (SpineCons e u)))  (max  i   j ) )]
)
;; #source file ./ott/lang_simple.ott  lines 780 - 782 
#|

;; #source file ./ott/lang_simple.ott  lines 800 - 802 
|#

;;; definitions 

(define-judgment-form
  L
  #:mode (SHsub I I I I O)
  #:contract (SHsub x U u_11 u_22 u_33)

;; #source file ./ott/lang_simple.ott  lines 821 - 826 
 [
  (SHsub x U u U_11 U_11^)
  (SHsub x U u U_22 U_22^)
   (side-condition ,(not (alpha-equivalent? L (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  --------------------------------------------------------------------- "SHsubPi"
  (SHsub x U u (CanonicalPi y U_11 U_22) (CanonicalPi y U_11^ U_22^))]

;; #source file ./ott/lang_simple.ott  lines 828 - 831 
 [
   (side-condition ,(not (alpha-equivalent? L (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  ----------------------------------------------------------------------------------------------------------------- "SHsubDiffNil"
  (SHsub x U u (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ))]

;; #source file ./ott/lang_simple.ott  lines 832 - 837 
 [
  
   (side-condition ,(not (alpha-equivalent? L (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  (SHsub x U u (CanonicalAtomic (AtomicSpine y e)) (CanonicalAtomic (AtomicSpine y e_^)))
  (SHsub x U u u_22 u_33)
  --------------------------------------------------------------------------------------------------------------------------- "SHsubDiffCons"
  (SHsub x U u (CanonicalAtomic (AtomicSpine y (SpineCons e u_22))) (CanonicalAtomic (AtomicSpine y (SpineCons e_^ u_33))))]

;; #source file ./ott/lang_simple.ott  lines 840 - 842 
 [
  ------------------------------------------------------------------------------- "SHsubSet"
  (SHsub x U u (CanonicalAtomic (AtomicSet i)) (CanonicalAtomic (AtomicSet i)))]

;; #source file ./ott/lang_simple.ott  lines 844 - 848 
 [
  
  (SHsub x U u u_22 u_33)
   (side-condition ,(not (alpha-equivalent? L (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  --------------------------------------------------------------- "SHsubLam"
  (SHsub x U u  (CanonicalLam y u_22)   (CanonicalLam y u_33) )]

;; #source file ./ott/lang_simple.ott  lines 853 - 856 
 [
  
  (SHsubR x U u_11 (SpineCons e u_22) u_33 U_^)
  ---------------------------------------------------------------------------- "SHsubSpine"
  (SHsub x U u_11 (CanonicalAtomic (AtomicSpine x (SpineCons e u_22))) u_33)]

)
(define-judgment-form L 
 
  #:mode (SHsubR I I I I O O)
  #:contract (SHsubR x U u e u_^ U_^)

;; #source file ./ott/lang_simple.ott  lines 867 - 869 
 [
  ------------------------------- "SHsubRHead"
  (SHsubR x U u SpineEmpty u U)]

;; #source file ./ott/lang_simple.ott  lines 870 - 877 
 [
  
   (SHsubR x U u_11 e  (CanonicalLam y u_11^)  (CanonicalPi y U_11^ U_22^))   (SHsub x U u_11 u_22 u_33) 
   (SHsub y U_11^ u_33 u_11^ u_22^)   (SHsub y U_11^ u_33 U_22^ U_33^) 
  -------------------------------------------------- "SHsubRSpine"
  (SHsubR x U u_11 (SpineCons e u_22) u_22^ U_33^)]
)

;;; definitions 

(define-judgment-form
  L
  #:mode (SWF I)
  #:contract (SWF SGamma)

;; #source file ./ott/lang_simple.ott  lines 887 - 889 
 [---------------- "SWFEmpty"
  (SWF EnvEmpty)]

;; #source file ./ott/lang_simple.ott  lines 890 - 893 
 [
    (SWF SGamma)   (StaticSet SGamma U)    (GVarFree x SGamma) 
  --------------------------- "SWFExt"
  (SWF (EnvExt x U SGamma))]

)
(define-judgment-form L 
 
  #:mode (StaticSet I I)
  #:contract (StaticSet SGamma U)

;; #source file ./ott/lang_simple.ott  lines 902 - 905 
 [
  
  (SCSynth SGamma rr (CanonicalAtomic (AtomicSet i)))
  ----------------------------------------- "StaticSetSet"
  (StaticSet SGamma (CanonicalAtomic rr))]

;; #source file ./ott/lang_simple.ott  lines 908 - 913 
 [
  (StaticSet SGamma U_11)
  (SWF (EnvExt x U_11 SGamma))
  (StaticSet (EnvExt x U_11 SGamma) U_22)
  ---------------------------------------------- "StaticSetPi"
  (StaticSet SGamma (CanonicalPi x U_11 U_22))]

)
(define-judgment-form L 
 
  #:mode (SCSynth I I O)
  #:contract (SCSynth SGamma rr U)

;; #source file ./ott/lang_simple.ott  lines 921 - 924 
 [
   (side-condition ,(> (term  i ) 0)) 
  ---------------------------------------------------------------------------- "SCSynthSet"
  (SCSynth SGamma (AtomicSet i) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 926 - 930 
 [
  
  (SWF SGamma)
  (GVarLook x U SGamma)
  --------------------------------------------------- "SCSynthVar"
  (SCSynth SGamma  (AtomicSpine  x  SpineEmpty)  U)]

;; #source file ./ott/lang_simple.ott  lines 934 - 938 
 [
  
  (SCSynth SGamma (AtomicSpine x e) (CanonicalPi y U_11 U_22))
   (SCCheck SGamma u U_11)   (SHsub y U_11 u U_22 U_33) 
  ------------------------------------------------------- "SCSynthApp"
  (SCSynth SGamma (AtomicSpine x (SpineCons e u)) U_33)]

)
(define-judgment-form L 
 
  #:mode (SCCheck I I I)
  #:contract (SCCheck SGamma u U)

;; #source file ./ott/lang_simple.ott  lines 946 - 949 
 [
  
  (SCSynth SGamma rr (CanonicalAtomic RR))
  ------------------------------------------------------------ "SCCheckSynth"
  (SCCheck SGamma (CanonicalAtomic rr) (CanonicalAtomic RR))]

;; #source file ./ott/lang_simple.ott  lines 950 - 954 
 [
  
  (SCSynth SGamma rr (CanonicalAtomic (AtomicSet i)))
   (side-condition ,(and (< 0 (term  i )) (< (term  i ) (term  j )))) 
  ----------------------------------------------------------------------- "SCCheckLevel"
  (SCCheck SGamma (CanonicalAtomic rr) (CanonicalAtomic (AtomicSet j)))]

;; #source file ./ott/lang_simple.ott  lines 956 - 959 
 [
  
   (SWF (EnvExt x U_11 SGamma))   (SCCheck (EnvExt x U_11 SGamma) u U_22) 
  ----------------------------------------------------------------- "SCCheckLam"
  (SCCheck SGamma  (CanonicalLam x u)  (CanonicalPi x U_11 U_22))]

;; #source file ./ott/lang_simple.ott  lines 960 - 964 
 [
  (SCCheck SGamma U_11 (CanonicalAtomic (AtomicSet i)))
   (SWF (EnvExt x U_11 SGamma))   (SCCheck (EnvExt x U_11 SGamma) U_22 (CanonicalAtomic (AtomicSet i))) 
  ---------------------------------------------------------------------------- "SCCheckPi"
  (SCCheck SGamma (CanonicalPi x U_11 U_22) (CanonicalAtomic (AtomicSet i)))]
)

;;; definitions 

(define-judgment-form
  L
  #:mode (SSynth I I O)
  #:contract (SSynth SGamma t U)

;; #source file ./ott/lang_simple.ott  lines 974 - 978 
 [
  
  (StaticSetNorm SGamma U T)
  (SCheck SGamma t U)
  ----------------------------------- "SSynthAnn"
  (SSynth SGamma  (TermAnn t T)  U)]

;; #source file ./ott/lang_simple.ott  lines 979 - 982 
 [
   (side-condition ,(> (term  i ) 0)) 
  ------------------------------------------------------------------------- "SSynthSet"
  (SSynth SGamma (TermSet i) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 984 - 988 
 [
  
  (SWF SGamma)
  (GVarLook x U SGamma)
  ------------------------------- "SSynthVar"
  (SSynth SGamma x U)]

;; #source file ./ott/lang_simple.ott  lines 993 - 997 
 [
  
  (SSynth SGamma t_11 (CanonicalPi x U_11 U_22))
   (SNormCheck SGamma u t_22 U_11)   (SHsub x U_11 u U_22 U_33) 
  ------------------------------------------ "SSynthApp"
  (SSynth SGamma (TermApp t_11 t_22) U_33)]

)
(define-judgment-form L 
 
  #:mode (SCheck I I I)
  #:contract (SCheck SGamma t U)

;; #source file ./ott/lang_simple.ott  lines 1004 - 1007 
 [
  
  (SSynth SGamma t U)
  --------------------- "SCheckSynth"
  (SCheck SGamma t U)]

;; #source file ./ott/lang_simple.ott  lines 1008 - 1012 
 [
  
  (SSynth SGamma t (CanonicalAtomic (AtomicSet i)))
   (side-condition ,(and (< 0 (term  i )) (< (term  i ) (term  j )))) 
  --------------------------------------------------- "SCheckLevel"
  (SCheck SGamma t (CanonicalAtomic (AtomicSet j)))]

;; #source file ./ott/lang_simple.ott  lines 1013 - 1017 
 [
  (SNormCheck SGamma U T_11 (CanonicalAtomic (AtomicSet i)))
   (SWF (EnvExt x U SGamma))   (SCheck (EnvExt x U SGamma) T_22 (CanonicalAtomic (AtomicSet i))) 
  ---------------------------------------------------------------------- "SCheckPi"
  (SCheck SGamma (TermPi x T_11 T_22) (CanonicalAtomic (AtomicSet i)))]

;; #source file ./ott/lang_simple.ott  lines 1019 - 1023 
 [
  
  (SWF (EnvExt x U_11 SGamma))
  (SCheck (EnvExt x U_11 SGamma) t U_22)
  ----------------------------------------------------------- "SCheckLam"
  (SCheck SGamma  (TermLam x t)  (CanonicalPi x U_11 U_22))]

)
(define-judgment-form L 
 
  #:mode (StaticSetNorm I O I)
  #:contract (StaticSetNorm SGamma U T)

;; #source file ./ott/lang_simple.ott  lines 1034 - 1037 
 [
  (SNormSynth SGamma T U (CanonicalAtomic (AtomicSet i)))
  ---------------------------- "StaticSetNormSynth"
  (StaticSetNorm SGamma U T)]

;; #source file ./ott/lang_simple.ott  lines 1038 - 1042 
 [
  (StaticSetNorm SGamma U_11 T_11)
  (StaticSetNorm (EnvExt x U_11 SGamma) U_22 T_22)
  ----------------------------------------------------------------------- "StaticSetNormPi"
  (StaticSetNorm SGamma (CanonicalPi x U_11 U_22) (TermPi x T_11 T_22))]

)
(define-judgment-form L 
 
  #:mode (SNormSynth I I O O)
  #:contract (SNormSynth SGamma t u U)

;; #source file ./ott/lang_simple.ott  lines 1048 - 1052 
 [
  
  (StaticSetNorm SGamma U T)
  (SNormCheck SGamma u t U)
  ----------------------------------------- "SNormSynthAnn"
  (SNormSynth SGamma  (TermAnn t T)  u U)]

;; #source file ./ott/lang_simple.ott  lines 1053 - 1056 
 [
   (side-condition ,(> (term  i ) 0)) 
  ------------------------------------------------------------------------------------------------------------- "SNormSynthSet"
  (SNormSynth SGamma (TermSet i) (CanonicalAtomic (AtomicSet i)) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 1058 - 1063 
 [
  
  (SWF SGamma)
  (GVarLook x U SGamma)
  (EtaExpand  (AtomicSpine  x  SpineEmpty)  u U)
  ------------------------------------- "SNormSynthVar"
  (SNormSynth SGamma x u U)]

;; #source file ./ott/lang_simple.ott  lines 1068 - 1073 
 [
  
  (SNormSynth SGamma t_11  (CanonicalLam x u_11)  (CanonicalPi x U_11 U_22))
  (SNormCheck SGamma u_22 t_22 U_11)
   (SHsub x U_11 u_22 u_11 u_33)   (SHsub x U_11 u_22 U_22 U_33) 
  --------------------------------------------------- "SNormSynthApp"
  (SNormSynth SGamma (TermApp t_11 t_22) u_33 U_33)]

)
(define-judgment-form L 
 
  #:mode (SNormCheck I O I I)
  #:contract (SNormCheck SGamma u t U)

;; #source file ./ott/lang_simple.ott  lines 1082 - 1085 
 [
  
  (SNormSynth SGamma t u U)
  --------------------------- "SNormCheckSynth"
  (SNormCheck SGamma u t U)]

;; #source file ./ott/lang_simple.ott  lines 1086 - 1090 
 [
  
  (SNormSynth SGamma t u (CanonicalAtomic (AtomicSet i)))
   (side-condition ,(and (< 0 (term  i )) (< (term  i ) (term  j )))) 
  --------------------------------------------------------- "SNormCheckLevel"
  (SNormCheck SGamma u t (CanonicalAtomic (AtomicSet j)))]

;; #source file ./ott/lang_simple.ott  lines 1092 - 1097 
 [
  (SNormCheck SGamma U_11 T_11 (CanonicalAtomic (AtomicSet i)))
  (SWF (EnvExt x U_11 SGamma))
  (SNormCheck (EnvExt x U_11 SGamma) U_22 T_22 (CanonicalAtomic (AtomicSet i)))
  ---------------------------------------------------------------------------------------------------- "SNormCheckPi"
  (SNormCheck SGamma (CanonicalPi x U_11 U_22) (TermPi x T_11 T_22) (CanonicalAtomic (AtomicSet i)))]

;; #source file ./ott/lang_simple.ott  lines 1098 - 1102 
 [
  
  (SWF (EnvExt x U_11 SGamma))
  (SNormCheck (EnvExt x U_11 SGamma) u t U_22)
  ------------------------------------------------------------------------------------ "SNormCheckLam"
  (SNormCheck SGamma  (CanonicalLam x u)   (TermLam x t)  (CanonicalPi x U_11 U_22))]

)
(define-judgment-form L 
 
  #:mode (EtaExpand I O I)
  #:contract (EtaExpand rr u U)

;; #source file ./ott/lang_simple.ott  lines 1107 - 1109 
 [
  ---------------------------------------------------------- "EtaExpandAtomic"
  (EtaExpand rr (CanonicalAtomic rr) (CanonicalAtomic RR))]

;; #source file ./ott/lang_simple.ott  lines 1111 - 1114 
 [
  
   (EtaExpand  (AtomicSpine  y  SpineEmpty)  u U_11)   (EtaExpand (AtomicSpine x (SpineCons e u)) u U_22) 
  ------------------------------------------------------------------------------ "EtaExpandPi"
  (EtaExpand (AtomicSpine x e)  (CanonicalLam y u)  (CanonicalPi y U_11 U_22))]
)

;;; definitions 

(define-judgment-form
  L
  #:mode (Domain I O)
  #:contract (Domain gU_11 gU_22)

;; #source file ./ott/lang_simple.ott  lines 1132 - 1134 
 [-------------------------------------------- "DomainPi"
  (Domain (CanonicalPi x gU_11 gU_22) gU_11)]

;; #source file ./ott/lang_simple.ott  lines 1135 - 1137 
 [------------------------------------ "DomainDyn"
  (Domain CanonicalDyn CanonicalDyn)]

)
(define-judgment-form L 
 
  #:mode (GradualEnvSub I I I I O)
  #:contract (GradualEnvSub x gU gu Gamma Gamma_^)

;; #source file ./ott/lang_simple.ott  lines 1155 - 1157 
 [------------------------------------------- "GradualEnvSubEmpty"
  (GradualEnvSub x gU gu EnvEmpty EnvEmpty)]

;; #source file ./ott/lang_simple.ott  lines 1158 - 1163 
 [
  
   (side-condition ,(not (alpha-equivalent? L (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  (GHsub x gU gu gU gU_^)
  (GradualEnvSub x gU gu Gamma Gamma_^)
  --------------------------------------------------------------------- "GradualEnvSubVarDiff"
  (GradualEnvSub x gU gu (EnvExt y gU Gamma) (EnvExt y gU_^ Gamma_^))]

;; #source file ./ott/lang_simple.ott  lines 1164 - 1167 
 [
  
  (GradualEnvSub x gU gu Gamma Gamma_^)
  ----------------------------------------------------- "GradualEnvSubVarSame"
  (GradualEnvSub x gU gu (EnvExt x gU Gamma) Gamma_^)]

)
(define-judgment-form L 
 
  #:mode (GHsub I I I I O)
  #:contract (GHsub x gU gu_11 gu_22 gu_33)

;; #source file ./ott/lang_simple.ott  lines 1174 - 1176 
 [--------------------------------------------------------------------------------- "GHsubSet"
  (GHsub x gU gu (CanonicalAtomic (AtomicSet i)) (CanonicalAtomic (AtomicSet i)))]

;; #source file ./ott/lang_simple.ott  lines 1178 - 1180 
 [------------------------------------------- "GHsubDyn"
  (GHsub x gU gu CanonicalDyn CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 1181 - 1186 
 [ (side-condition ,(not (alpha-equivalent? L (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  (GHsub x gU gu gU_11 gU_11^)
  (GHsub x gU gu gU_22 gU_22^)
  --------------------------------------------------------------------------- "GHsubPi"
  (GHsub x gU gu (CanonicalPi y gU_11 gU_22) (CanonicalPi y gU_11^ gU_22^))]

;; #source file ./ott/lang_simple.ott  lines 1187 - 1191 
 [ (where   y  ,(gensym)) 
  (GHsub x gU gu (CanonicalPi y gU_11  (substitute  gU_22   x   y ) ) gU_33)
  --------------------------------------------------- "GHsubPiRdxAlpha"
  (GHsub x gU gu (CanonicalPi x gU_11 gU_22) gU_33)]

;; #source file ./ott/lang_simple.ott  lines 1193 - 1197 
 [ (side-condition ,(not (alpha-equivalent? L (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  (GHsub x gU gu gu_22 gu_33)
  ------------------------------------------------------------------- "GHsubLam"
  (GHsub x gU gu  (CanonicalLam y gu_22)   (CanonicalLam y gu_33) )]

;; #source file ./ott/lang_simple.ott  lines 1198 - 1202 
 [ (where   y  ,(gensym)) 
  (GHsub x gU gu  (CanonicalLam y  (substitute  gu_22   x   y ) )  gu_33)
  ------------------------------------------------ "GHsubLamRdxAlpha"
  (GHsub x gU gu  (CanonicalLam x gu_22)  gu_33)]

;; #source file ./ott/lang_simple.ott  lines 1203 - 1206 
 [ (side-condition ,(not (alpha-equivalent? L (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  ------------------------------------------------------------------------------------------------------------------- "GHsubDiffNil"
  (GHsub x gU gu (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ))]

;; #source file ./ott/lang_simple.ott  lines 1207 - 1212 
 [ (side-condition ,(not (alpha-equivalent? L (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  (GHsub x gU gu (CanonicalAtomic (AtomicSpine y ge)) (CanonicalAtomic (AtomicSpine y ge_^)))
  (GHsub x gU gu gu_22 gu_33)
  --------------------------------------------------------------------------------------------------------------------------------- "GHsubDiffCons"
  (GHsub x gU gu (CanonicalAtomic (AtomicSpine y (SpineCons ge gu_22))) (CanonicalAtomic (AtomicSpine y (SpineCons ge_^ gu_33))))]

;; #source file ./ott/lang_simple.ott  lines 1215 - 1218 
 [(GHsubR x gU gu ge gu_22 gU_22)
  ------------------------------------------------------------ "GHsubSpine"
  (GHsub x gU gu (CanonicalAtomic (AtomicSpine x ge)) gu_22)]

)
(define-judgment-form L 
 
  #:mode (GHsubR I I I I O O)
  #:contract (GHsubR x gU gu ge gu_22 gU_22)

;; #source file ./ott/lang_simple.ott  lines 1238 - 1240 
 [----------------------------------- "GHsubRHead"
  (GHsubR x gU gu SpineEmpty gu gU)]

;; #source file ./ott/lang_simple.ott  lines 1243 - 1247 
 [ (GHsubR x gU gu ge CanonicalDyn (CanonicalPi y gU_11 gU_22))   (GHsub y gU_11 gu_22 gU_22 gU_33) 
  ---------------------------------------------------------- "GHsubRDynSpine"
  (GHsubR x gU gu (SpineCons ge gu_22) CanonicalDyn gU_33)]

;; #source file ./ott/lang_simple.ott  lines 1248 - 1253 

;; #source file ./ott/lang_simple.ott  lines 1254 - 1259 
 [(GHsubR x gU gu_11 ge gu_22 CanonicalDyn)
  -------------------------------------------------------------------- "GHsubRDynType"
  (GHsubR x gU gu_11 (SpineCons ge gu_22) CanonicalDyn CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 1262 - 1268 
 [(GHsubR x gU gu ge  (CanonicalLam y_11 gu_22)  (CanonicalPi y_22 gU_11 gU_22))
   (GHsub x gU gu gu_11 gu_33)   (GHsub y_11 gU_11 gu_33 gu_22 gu_44) 
   (GHsub y_22 gU_11 gu_33 gU_22 gU_33)   (GEtaExpandC gu_44 gu_55 gU_33) 
  --------------------------------------------------- "GHsubRLamSpineRdxAlpha"
  (GHsubR x gU gu (SpineCons ge gu_11) gu_55 gU_33)]

)
(define-judgment-form L 
 
  #:mode (CodSub I I O)
  #:contract (CodSub gu gU gU_^)

;; #source file ./ott/lang_simple.ott  lines 1279 - 1282 
 [(GHsub x gU_11 gu gU_22 gU_22^)
  ------------------------------------------------ "CodSubPi"
  (CodSub gu (CanonicalPi x gU_11 gU_22) gU_22^)]

;; #source file ./ott/lang_simple.ott  lines 1283 - 1285 
 [--------------------------------------- "CodSubDyn"
  (CodSub gu CanonicalDyn CanonicalDyn)]

)
(define-judgment-form L 
 
  #:mode (BodySub I I I O)
  #:contract (BodySub gU gu gu_22 gu_33)

;; #source file ./ott/lang_simple.ott  lines 1311 - 1314 
 [(GHsub x gU gu gu_22 gu_22^)
  ------------------------------------------------- "BodySubPi"
  (BodySub gU gu  (CanonicalLam x gu_22)  gu_22^)]

;; #source file ./ott/lang_simple.ott  lines 1315 - 1317 
 [------------------------------------------- "BodySubDyn"
  (BodySub gU gu CanonicalDyn CanonicalDyn)]
)

;;; definitions 

(define-judgment-form
  L
  #:mode (GradualSet I I)
  #:contract (GradualSet Gamma gU)

;; #source file ./ott/lang_simple.ott  lines 1326 - 1329 
 [
  (GCSynth Gamma grr CanonicalDyn)
  ------------------------------------------ "GradualSetDynTy"
  (GradualSet Gamma (CanonicalAtomic grr))]

;; #source file ./ott/lang_simple.ott  lines 1330 - 1333 
 [
  (GCSynth Gamma grr (CanonicalAtomic (AtomicSet i)))
  ------------------------------------------ "GradualSetSet"
  (GradualSet Gamma (CanonicalAtomic grr))]

;; #source file ./ott/lang_simple.ott  lines 1336 - 1341 
 [
  (GradualSet Gamma gU_11)
    
  (GradualSet (EnvExt x gU_11 Gamma) gU_22)
  ------------------------------------------------ "GradualSetPi"
  (GradualSet Gamma (CanonicalPi x gU_11 gU_22))]

;; #source file ./ott/lang_simple.ott  lines 1343 - 1345 
 [
  --------------------------------- "GradualSetDynVal"
  (GradualSet Gamma CanonicalDyn)]

)
(define-judgment-form L 
 
  #:mode (WF I)
  #:contract (WF Gamma)

;; #source file ./ott/lang_simple.ott  lines 1351 - 1353 
 [--------------- "WFEmpty"
  (WF EnvEmpty)]

;; #source file ./ott/lang_simple.ott  lines 1354 - 1358 
 [
   (WF Gamma)   (GradualSet Gamma gU) 
  (GVarFree x Gamma)
  -------------------------- "WFExt"
  (WF (EnvExt x gU Gamma))]

)
(define-judgment-form L 
 
  #:mode (GCSynth I I O)
  #:contract (GCSynth Gamma grr gU)

;; #source file ./ott/lang_simple.ott  lines 1364 - 1367 
 [
   (side-condition ,(> (term  i ) 0)) 
  --------------------------------------------------------------------------- "GCSynthSet"
  (GCSynth Gamma (AtomicSet i) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 1369 - 1373 
 [
    
  (GVarLook x gU Gamma)
  --------------------------------------------------- "GCSynthVar"
  (GCSynth Gamma  (AtomicSpine  x  SpineEmpty)  gU)]

;; #source file ./ott/lang_simple.ott  lines 1377 - 1384 
 [
  (GCSynth Gamma (AtomicSpine x ge) gU)
  (Domain gU gU_22)
  (GCCheck Gamma gu gU_22)
  (CodSub gu gU gU_33)
  --------------------------------------------------------- "GCSynthApp"
  (GCSynth Gamma (AtomicSpine x (SpineCons ge gu)) gU_33)]

)
(define-judgment-form L 
 
  #:mode (GCCheck I I I)
  #:contract (GCCheck Gamma gu gU)

;; #source file ./ott/lang_simple.ott  lines 1391 - 1395 
 [
  (GCSynth Gamma grr gU)
  (Consistent gU gU_^)
  -------------------------------------------- "GCCheckSynth"
  (GCCheck Gamma (CanonicalAtomic grr) gU_^)]

;; #source file ./ott/lang_simple.ott  lines 1396 - 1400 
 [
  (GCSynth Gamma grr (CanonicalAtomic (AtomicSet i)))
   (side-condition ,(and (< 0 (term  i )) (< (term  i ) (term  j )))) 
  ----------------------------------------------------------------------- "GCCheckLevel"
  (GCCheck Gamma (CanonicalAtomic grr) (CanonicalAtomic (AtomicSet j)))]

;; #source file ./ott/lang_simple.ott  lines 1402 - 1406 

;; #source file ./ott/lang_simple.ott  lines 1408 - 1413 
 [
   (where   z  ,(gensym)) 
    
  (GCCheck (EnvExt z gU_11 Gamma)  (substitute  gu   x   z )   (substitute  gU_22   y   z ) )
  ------------------------------------------------------------------- "GCCheckLamPiRdxAlpha"
  (GCCheck Gamma  (CanonicalLam x gu)  (CanonicalPi y gU_11 gU_22))]

;; #source file ./ott/lang_simple.ott  lines 1414 - 1418 
 [
    
  (GCCheck (EnvExt x CanonicalDyn Gamma) gu CanonicalDyn)
  ---------------------------------------------------- "GCCheckLamDyn"
  (GCCheck Gamma  (CanonicalLam x gu)  CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 1419 - 1425 
 [
  (ConsistentSet gU_33)
  (GCCheck Gamma gU_11 gU_33)
    
  (GCCheck (EnvExt x gU_11 Gamma) gU_22 gU_33)
  --------------------------------------------------- "GCCheckPi"
  (GCCheck Gamma (CanonicalPi x gU_11 gU_22) gU_33)]

;; #source file ./ott/lang_simple.ott  lines 1427 - 1430 
 [
  (GradualSet Gamma gU)
  --------------------------------- "GCCheckDyn"
  (GCCheck Gamma CanonicalDyn gU)]

)
(define-judgment-form L 
 
  #:mode (ConsistentSet I)
  #:contract (ConsistentSet gU)

;; #source file ./ott/lang_simple.ott  lines 1438 - 1440 
 [------------------------------------------------- "ConsistentSetSet"
  (ConsistentSet (CanonicalAtomic (AtomicSet i)))]

;; #source file ./ott/lang_simple.ott  lines 1441 - 1443 
 [------------------------------ "ConsistentSetDyn"
  (ConsistentSet CanonicalDyn)]

)
(define-judgment-form L 
 
  #:mode (Consistent I I)
  #:contract (Consistent gU gU_^)

;; #source file ./ott/lang_simple.ott  lines 1453 - 1455 
 [-------------------- "ConsistentEq"
  (Consistent gu gu)]

;; #source file ./ott/lang_simple.ott  lines 1456 - 1460 

;; #source file ./ott/lang_simple.ott  lines 1462 - 1467 
 [ (where   z  ,(gensym)) 
  (Consistent gU_11 gU_11^)
  (Consistent  (substitute  gU_22   x   z )   (substitute  gU_22^   y   z ) )
  ------------------------------------------------------------------------ "ConsistentPiRdxAlpha"
  (Consistent (CanonicalPi x gU_11 gU_22) (CanonicalPi y gU_11^ gU_22^))]

;; #source file ./ott/lang_simple.ott  lines 1468 - 1471 

;; #source file ./ott/lang_simple.ott  lines 1473 - 1477 
 [ (where   z  ,(gensym)) 
  (Consistent  (substitute  gu   x   z )   (substitute  gu_^   y   z ) )
  ------------------------------------------------------------ "ConsistentLamRdxAlpha"
  (Consistent  (CanonicalLam x gu)   (CanonicalLam y gu_^) )]

;; #source file ./ott/lang_simple.ott  lines 1478 - 1482 
 [(Consistent (CanonicalAtomic (AtomicSpine x ge)) (CanonicalAtomic (AtomicSpine x ge_^)))
  (Consistent gu gu_^)
  -------------------------------------------------------------------------------------------------------------------------- "ConsistentApp"
  (Consistent (CanonicalAtomic (AtomicSpine x (SpineCons ge gu))) (CanonicalAtomic (AtomicSpine x (SpineCons ge_^ gu_^))))]

;; #source file ./ott/lang_simple.ott  lines 1483 - 1485 
 [------------------------------ "ConsistentDynL"
  (Consistent CanonicalDyn gu)]

;; #source file ./ott/lang_simple.ott  lines 1486 - 1488 
 [------------------------------ "ConsistentDynR"
  (Consistent gu CanonicalDyn)]
)

;;; definitions 

(define-judgment-form
  L
  #:mode (Meet I I O)
  #:contract (Meet gU_11 gU_22 gU_33)

;; #source file ./ott/lang_simple.ott  lines 1499 - 1503 

;; #source file ./ott/lang_simple.ott  lines 1505 - 1510 
 [ (where   z  ,(gensym)) 
  (Meet gU_11 gU_11^ gU_11^^)
  (Meet  (substitute  gU_22   x   z )   (substitute  gU_22^   y   z )  gU_22^^)
  -------------------------------------------------------------------------------------------------- "MeetPiRdxAlpha"
  (Meet (CanonicalPi x gU_11 gU_22) (CanonicalPi y gU_11^ gU_22^) (CanonicalPi z gU_11^^ gU_22^^))]

;; #source file ./ott/lang_simple.ott  lines 1511 - 1514 

;; #source file ./ott/lang_simple.ott  lines 1516 - 1520 
 [ (where   z  ,(gensym)) 
  (Meet  (substitute  gu   x   z )   (substitute  gu_^   y   z )  gu_^^)
  ------------------------------------------------------------------------- "MeetLamRdxAlpha"
  (Meet (CanonicalLam x gu) (CanonicalLam y gu_^) (CanonicalLam z gu_^^))]

;; #source file ./ott/lang_simple.ott  lines 1521 - 1525 
 [(Meet gu gu_^ gu_^^)
  (Meet (CanonicalAtomic (AtomicSpine x ge)) (CanonicalAtomic (AtomicSpine x ge_^)) (CanonicalAtomic (AtomicSpine x ge_^^)))
  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ "MeetApp"
  (Meet (CanonicalAtomic (AtomicSpine x (SpineCons ge gu))) (CanonicalAtomic (AtomicSpine x (SpineCons ge_^ gu_^))) (CanonicalAtomic (AtomicSpine x (SpineCons ge_^^ gu_^^))))]

;; #source file ./ott/lang_simple.ott  lines 1526 - 1528 
 [--------------------------- "MeetDynL"
  (Meet CanonicalDyn gU gU)]

;; #source file ./ott/lang_simple.ott  lines 1529 - 1532 
 [ (side-condition ,(not (alpha-equivalent? L (term  gU ) (term  CanonicalDyn )))) 
  --------------------------- "MeetDynR"
  (Meet gU CanonicalDyn gU)]

;; #source file ./ott/lang_simple.ott  lines 1533 - 1536 
 [ (side-condition ,(not (alpha-equivalent? L (term  gu ) (term  CanonicalDyn )))) 
  ----------------- "MeetRefl"
  (Meet gu gu gu)]

)
(define-judgment-form L 
 
  #:mode (MorePrecise I I)
  #:contract (MorePrecise gU gU_^)

;; #source file ./ott/lang_simple.ott  lines 1544 - 1547 
 [(Meet gU gU_^ gU)
  ----------------------- "MorePreciseDef"
  (MorePrecise gU gU_^)]

)
(define-judgment-form L 
 
  #:mode (EvConsistent I I I)
  #:contract (EvConsistent ep gU gU_^)

;; #source file ./ott/lang_simple.ott  lines 1554 - 1558 
 [
  (Meet gU_11 gU_22 gU_33)
  (MorePrecise gU gU_33)
  -------------------------------------------------- "EvConsistentDef"
  (EvConsistent (EvidenceEv Gamma gU) gU_11 gU_22)]
)

;;; definitions 

(define-judgment-form
  L
  #:mode (GSynth I I O)
  #:contract (GSynth Gamma gt gU)

;; #source file ./ott/lang_simple.ott  lines 1572 - 1576 
 [
  
  (GradualSetNorm Gamma gU gT)
  (GCheck Gamma gt gU)
  ------------------------------------- "GSynthAnn"
  (GSynth Gamma  (TermAnn gt gT)  gU)]

;; #source file ./ott/lang_simple.ott  lines 1577 - 1580 
 [
   (side-condition ,(> (term  i ) 0)) 
  ------------------------------------------------------------------------ "GSynthSet"
  (GSynth Gamma (TermSet i) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 1582 - 1586 
 [
  (GVarLook x gU Gamma)
    
  ------------------------------- "GSynthVar"
  (GSynth Gamma x gU)]

;; #source file ./ott/lang_simple.ott  lines 1591 - 1595 
 [
  
   (GSynth Gamma gt_11 gU)   (GNormCheck Gamma gu gt_22  (error "TODO") ) 
  (CodSub gu gU gU_22)
  -------------------------------------------- "GSynthApp"
  (GSynth Gamma (TermApp gt_11 gt_22) gU_22)]

)
(define-judgment-form L 
 
  #:mode (GCheck I I I)
  #:contract (GCheck Gamma gt gU)

;; #source file ./ott/lang_simple.ott  lines 1610 - 1615 
 [
  
  (GSynth Gamma gt gU_^)
  (Consistent gU_^ gU)
  ---------------------- "GCheckSynth"
  (GCheck Gamma gt gU)]

;; #source file ./ott/lang_simple.ott  lines 1616 - 1621 
 [
  
  (GSynth Gamma gt (CanonicalAtomic (AtomicSet i)))
   (side-condition ,(and (< 0 (term  i )) (< (term  i ) (term  j )))) 
  --------------------------------------------------- "GCheckLevel"
  (GCheck Gamma gt (CanonicalAtomic (AtomicSet j)))]

;; #source file ./ott/lang_simple.ott  lines 1630 - 1634 
 [
  
   (GNormCheck Gamma gU_^ gT_11 gU)   (ConsistentSet gU) 
        (GCheck (EnvExt x gU_^ Gamma) gT_22 gU) 
  ------------------------------------------ "GCheckPi"
  (GCheck Gamma (TermPi x gT_11 gT_22) gU)]

;; #source file ./ott/lang_simple.ott  lines 1636 - 1640 

;; #source file ./ott/lang_simple.ott  lines 1642 - 1647 
 [
  
   (where   z  ,(gensym)) 
    
  (GCheck (EnvExt z gU_11 Gamma)  (substitute  gt   x   z )   (substitute  gU_22   y   z ) )
  ------------------------------------------------------------- "GCheckLamPiRdxAlpha"
  (GCheck Gamma  (TermLam x gt)  (CanonicalPi y gU_11 gU_22))]

;; #source file ./ott/lang_simple.ott  lines 1649 - 1653 
 [
  
    
  (GCheck (EnvExt x CanonicalDyn Gamma) gt CanonicalDyn)
  ---------------------------------------------- "GCheckLamDyn"
  (GCheck Gamma  (TermLam x gt)  CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 1654 - 1657 
 [
  (GradualSet Gamma gU)
  --------------------------- "GCheckDyn"
  (GCheck Gamma TermDyn gU)]

)
(define-judgment-form L 
 
  #:mode (GradualSetNorm I O I)
  #:contract (GradualSetNorm Gamma gU TT)

;; #source file ./ott/lang_simple.ott  lines 1672 - 1675 
 [
  (GNormSynth Gamma TT gU (CanonicalAtomic (AtomicSet i)))
  ------------------------------ "GradualSetNormSynth"
  (GradualSetNorm Gamma gU TT)]

;; #source file ./ott/lang_simple.ott  lines 1677 - 1681 
 [
  (GradualSetNorm Gamma gU_11 (TermVar SS))
  (GradualSetNorm (EnvExt x gU_11 Gamma) gU_22 TT)
  ------------------------------------------------------------------------------- "GradualSetNormPi"
  (GradualSetNorm Gamma (CanonicalPi x gU_11 gU_22) (TermPi x (TermVar SS) TT))]

;; #source file ./ott/lang_simple.ott  lines 1683 - 1685 
 [
  --------------------------------------------- "GradualSetNormDyn"
  (GradualSetNorm Gamma CanonicalDyn TermDyn)]

)
(define-judgment-form L 
 
  #:mode (GEtaLong I I)
  #:contract (GEtaLong gu gU)

;; #source file ./ott/lang_simple.ott  lines 1691 - 1693 
 [-------------------------------------------------------- "GEtaLongAtomic"
  (GEtaLong (CanonicalAtomic grr) (CanonicalAtomic gRR))]

;; #source file ./ott/lang_simple.ott  lines 1694 - 1696 
 [----------------------------------------------- "GEtaLongAtomicDyn"
  (GEtaLong (CanonicalAtomic grr) CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 1698 - 1701 

;; #source file ./ott/lang_simple.ott  lines 1702 - 1706 
 [ (where   z  ,(gensym)) 
  (GEtaLong  (substitute  gu   x   z )   (substitute  gU   y   z ) )
  ---------------------------------------------------------- "GEtaLongLamRdxAlpha"
  (GEtaLong  (CanonicalLam x gu)  (CanonicalPi y gU_^ gU))]

;; #source file ./ott/lang_simple.ott  lines 1707 - 1709 
 [---------------------------- "GEtaLongDyn"
  (GEtaLong CanonicalDyn gU)]

;; #source file ./ott/lang_simple.ott  lines 1710 - 1712 
 [------------------------------------------ "GEtaLongPi"
  (GEtaLong (CanonicalPi x gU gU_^) gU_^^)]

)
(define-judgment-form L 
 
  #:mode (GEtaExpand I O I)
  #:contract (GEtaExpand grr gu gU)

;; #source file ./ott/lang_simple.ott  lines 1718 - 1720 
 [-------------------------------------------------------------- "GEtaExpandAtomic"
  (GEtaExpand grr (CanonicalAtomic grr) (CanonicalAtomic gRR))]

;; #source file ./ott/lang_simple.ott  lines 1721 - 1723 
 [----------------------------------------------------- "GEtaExpandDyn"
  (GEtaExpand grr (CanonicalAtomic grr) CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 1725 - 1729 
 [(GEtaExpand  (AtomicSpine  y  SpineEmpty)  gu gU_11)
  (GEtaExpand (AtomicSpine x (SpineCons ge gu)) gu_22 gU_22)
  -------------------------------------------------------------------------------------- "GEtaExpandPi"
  (GEtaExpand (AtomicSpine x ge)  (CanonicalLam y gu_22)  (CanonicalPi y gU_11 gU_22))]

)
(define-judgment-form L 
 
  #:mode (GEtaExpandC I O I)
  #:contract (GEtaExpandC gu gu_^ gU)

;; #source file ./ott/lang_simple.ott  lines 1736 - 1739 
 [(GEtaExpand grr gu gU)
  ------------------------------------------- "GEtaExpandCAtomic"
  (GEtaExpandC (CanonicalAtomic grr) gu gU)]

;; #source file ./ott/lang_simple.ott  lines 1740 - 1743 

;; #source file ./ott/lang_simple.ott  lines 1744 - 1748 
 [ (where   z  ,(gensym)) 
  (GEtaExpandC  (substitute  gu   x   z )  gu_^  (substitute  gU_22   x   z ) )
  ----------------------------------------------------------------------------------------- "GEtaExpandCLamRdxAlpha"
  (GEtaExpandC  (CanonicalLam x gu)   (CanonicalLam z gu_^)  (CanonicalPi y gU_11 gU_22))]

;; #source file ./ott/lang_simple.ott  lines 1749 - 1753 
 [(GEtaExpandC gU_11 gU_11^ gU_^^)
  (GEtaExpandC gU_22 gU_22^ gU_^^)
  ------------------------------------------------------------------------------- "GEtaExpandCPi"
  (GEtaExpandC (CanonicalPi x gU_11 gU_22) (CanonicalPi x gU_11^ gU_22^) gU_^^)]

;; #source file ./ott/lang_simple.ott  lines 1755 - 1757 
 [-------------------------------------------- "GEtaExpandCDyn"
  (GEtaExpandC CanonicalDyn CanonicalDyn gU)]

;; #source file ./ott/lang_simple.ott  lines 1758 - 1760 
 [---------------------------------- "GEtaExpandCDynType"
  (GEtaExpandC gu gu CanonicalDyn)]

)
(define-judgment-form L 
 
  #:mode (GNormSynth I I O O)
  #:contract (GNormSynth Gamma tt gu gU)

;; #source file ./ott/lang_simple.ott  lines 1781 - 1785 
 [
  (GradualSetNorm Gamma gU TT)
  (GNormCheck Gamma gu tt gU)
  -------------------------------------------- "GNormSynthAnn"
  (GNormSynth Gamma  (TermAnn tt TT)  gu gU)]

;; #source file ./ott/lang_simple.ott  lines 1786 - 1789 
 [
   (side-condition ,(> (term  i ) 0)) 
  ------------------------------------------------------------------------------------------------------------ "GNormSynthSet"
  (GNormSynth Gamma (TermSet i) (CanonicalAtomic (AtomicSet i)) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 1791 - 1797 
 [
   (side-condition ,(not (hash-has-key? currently-defined-vars (term  x )) )) 
    
  (GVarLook x gU Gamma)
  (GEtaExpand  (AtomicSpine  x  SpineEmpty)  gu gU)
  -------------------------------------- "GNormSynthVar"
  (GNormSynth Gamma x gu gU)]

;; #source file ./ott/lang_simple.ott  lines 1798 - 1801 
 [
  
   (where (ENTTriple  et   gu   gU ) ,(and (hash-has-key? currently-defined-vars (term  x ) ) (hash-ref currently-defined-vars (term  x )) )) 
  -------------------------------------- "GNormSynthVarLook"
  (GNormSynth Gamma x gu gU)]

;; #source file ./ott/lang_simple.ott  lines 1805 - 1809 
 [
     (GNormSynth Gamma (TermVar ss) gu gU)   (GEtaExpandC gu gu_^  (error "SIMPLEPI") )    (Domain gU gU_11)    (GNormCheck Gamma gu tt gU_11) 
    (BodySub gU_11 gu gu_^ gu_^)   (CodSub gu gU gU_22)    (GEtaExpandC gu_^ gu_^^ gU_22) 
  ---------------------------------------------------------- "GNormSynthApp"
  (GNormSynth Gamma (TermApp (TermVar ss) tt) gu_^^ gU_22)]

)
(define-judgment-form L 
 
  #:mode (GNormCheck I O I I)
  #:contract (GNormCheck Gamma gu tt gU)

;; #source file ./ott/lang_simple.ott  lines 1817 - 1821 
 [
  (GNormSynth Gamma tt gu gU_^)
  (GNormSynthCheck Gamma gu_^ tt gu gU_^ gU)
  ------------------------------- "GNormCheckSynthOpt"
  (GNormCheck Gamma gu_^ tt gU)]

;; #source file ./ott/lang_simple.ott  lines 1822 - 1828 

;; #source file ./ott/lang_simple.ott  lines 1830 - 1836 

;; #source file ./ott/lang_simple.ott  lines 1837 - 1842 

;; #source file ./ott/lang_simple.ott  lines 1844 - 1852 
 [
  (ConsistentSet gU_33)
  (GNormCheck Gamma gU_11 (TermVar SS) gU_33)
    
  (GNormCheck (EnvExt x gU_11 Gamma) gU_22 TT gU_33)
  --------------------------------------------------------------------------------- "GNormCheckPi"
  (GNormCheck Gamma (CanonicalPi x gU_11 gU_22) (TermPi x (TermVar SS) TT) gU_33)]

;; #source file ./ott/lang_simple.ott  lines 1853 - 1857 

;; #source file ./ott/lang_simple.ott  lines 1858 - 1863 
 [
   (where   z  ,(gensym)) 
    
  (GNormCheck (EnvExt z gU_11 Gamma) gu  (substitute  tt   x   z )   (substitute  gU_22   y   z ) )
  --------------------------------------------------------------------------------------- "GNormCheckLamPiRdxAlpha"
  (GNormCheck Gamma  (CanonicalLam z gu)   (TermLam x tt)  (CanonicalPi y gU_11 gU_22))]

;; #source file ./ott/lang_simple.ott  lines 1864 - 1868 
 [
    
  (GNormCheck (EnvExt x CanonicalDyn Gamma) gu tt CanonicalDyn)
  ------------------------------------------------------------------------ "GNormCheckLamDyn"
  (GNormCheck Gamma  (CanonicalLam x gu)   (TermLam x tt)  CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 1869 - 1872 
 [
  (GradualSet Gamma gU)
  -------------------------------------------- "GNormCheckDyn"
  (GNormCheck Gamma CanonicalDyn TermDyn gU)]

;; #source file ./ott/lang_simple.ott  lines 1874 - 1879 
 [
  (GNormSynth Gamma ett gu gU_^)
  (Consistent gU gU_^)
  (MorePrecise gU_^ gU)
  ------------------------------------------ "GNormCheckEvUp"
  (GNormCheck Gamma gu (TermEp ep ett) gU)]

;; #source file ./ott/lang_simple.ott  lines 1880 - 1886 
 [
  (GNormSynth Gamma ett gu gU_^)
  (Meet gU gU_^ gU_^^)
   (side-condition ,(not (alpha-equivalent? L (term  gU_^^ ) (term  gU_^ )))) 
  ---------------------------------------------------- "GNormCheckEvDown"
  (GNormCheck Gamma CanonicalDyn (TermEp ep ett) gU)]

;; #source file ./ott/lang_simple.ott  lines 1888 - 1890 
 [
  -------------------------------------------- "GNormCheckDynAnn"
  (GNormCheck Gamma CanonicalDyn TermDyn gU)]

)
(define-judgment-form L 
 
  #:mode (GNormSynthCheck I O I I I I)
  #:contract (GNormSynthCheck Gamma gu tt gu_^ gU_^ gU)

;; #source file ./ott/lang_simple.ott  lines 1896 - 1899 
 [
   (side-condition ,(and (< 0 (term  i )) (< (term  i ) (term  j )))) 
  -------------------------------------------------------------------------------------------------- "GNormSynthCheckLevel"
  (GNormSynthCheck Gamma gu tt gu (CanonicalAtomic (AtomicSet i)) (CanonicalAtomic (AtomicSet j)))]

;; #source file ./ott/lang_simple.ott  lines 1900 - 1904 
 [
  (Meet gU gU_^ gU_^^)
   (where  gu  ,(if (alpha-equivalent? (term  gU_^ ) (term  gU_^^ )) (term  gu ) (term  CanonicalDyn ))) 
  ------------------------------------------ "GNormSynthCheckConsistent"
  (GNormSynthCheck Gamma gu tt gu gU_^ gU)]

)
(define-judgment-form L 
 
  #:mode (GElabSynthCheck I O I I I I)
  #:contract (GElabSynthCheck Gamma et_^ tt et gU_^ gU)

;; #source file ./ott/lang_simple.ott  lines 1910 - 1913 
 [
  
   (side-condition ,(and (< 0 (term  i )) (< (term  i ) (term  j )))) 
  -------------------------------------------------------------------------------------------------- "GElabSynthCheckLevel"
  (GElabSynthCheck Gamma et tt et (CanonicalAtomic (AtomicSet i)) (CanonicalAtomic (AtomicSet j)))]

;; #source file ./ott/lang_simple.ott  lines 1917 - 1921 
 [
  
  (Meet gU_^^ gU gU_^)
  ---------------------------------------------------------------------------- "GElabSynthCheckConsistent"
  (GElabSynthCheck Gamma (TermEp (EvidenceEv Gamma gU_^) et) tt et gU gU_^^)]

)
(define-judgment-form L 
 
  #:mode (GradualNESynthCheck I O O I I I I I)
  #:contract (GradualNESynthCheck Gamma gu et_11 gt gu_^ et gU_^ gU)

;; #source file ./ott/lang_simple.ott  lines 1927 - 1930 
 [
  
   (side-condition ,(and (< 0 (term  i )) (< (term  i ) (term  j )))) 
  ------------------------------------------------------------------------------------------------------------ "GradualNESynthCheckLevel"
  (GradualNESynthCheck Gamma gu et gt gu et (CanonicalAtomic (AtomicSet i)) (CanonicalAtomic (AtomicSet j)))]

;; #source file ./ott/lang_simple.ott  lines 1936 - 1940 
 [
  
  (Meet gU_^^ gU gU_^)
   (where  gu  ,(if (alpha-equivalent? (term  gU ) (term  gU_^ )) (term  gu ) (term  CanonicalDyn ))) 
  -------------------------------------------------------------------------------------- "GradualNESynthCheckConsistent"
  (GradualNESynthCheck Gamma gu (TermEp (EvidenceEv Gamma gU_^) et) gt gu et gU gU_^^)]

)
(define-judgment-form L 
 
  #:mode (GElabSynth I I O O)
  #:contract (GElabSynth Gamma gt et gU)

;; #source file ./ott/lang_simple.ott  lines 1946 - 1950 
 [
  
  (GradualSetNorm Gamma gU gT)
  (GElabCheck Gamma et gt gU)
  -------------------------------------------- "GElabSynthAnn"
  (GElabSynth Gamma  (TermAnn gt gT)  et gU)]

;; #source file ./ott/lang_simple.ott  lines 1951 - 1954 
 [
   (side-condition ,(> (term  i ) 0)) 
  ---------------------------------------------------------------------------------------- "GElabSynthSet"
  (GElabSynth Gamma (TermSet i) (TermSet i) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 1956 - 1961 
 [
   (side-condition ,(not (hash-has-key? currently-defined-vars (term  x )) )) 
    
  (GVarLook x gU Gamma)
  ----------------------------------------------- "GElabSynthVar"
  (GElabSynth Gamma x x gU)]

;; #source file ./ott/lang_simple.ott  lines 1962 - 1965 
 [
  
   (where (ENTTriple  et   gu   gU ) ,(and (hash-has-key? currently-defined-vars (term  x ) ) (hash-ref currently-defined-vars (term  x )) )) 
  -------------------------------------- "GElabSynthVarLook"
  (GElabSynth Gamma x et gU)]

;; #source file ./ott/lang_simple.ott  lines 1969 - 1975 
 [
  
  (GElabSynth Gamma gt_11 et_11 gU)
  (Domain gU gU_11)
  (GradualNECheck Gamma gu et_22 gt_22 gU_11)
  (CodSub gu gU gU_22)
  ---------------------------------------------------------------------- "GElabSynthApp"
  (GElabSynth Gamma (TermApp gt_11 gt_22) (TermApp et_11 et_22) gU_22)]

)
(define-judgment-form L 
 
  #:mode (GElabCheck I O I I)
  #:contract (GElabCheck Gamma et gt gU)

;; #source file ./ott/lang_simple.ott  lines 1993 - 1997 
 [
  
  (GElabSynth Gamma gt et gU_^)
  (GElabSynthCheck Gamma et gt et gU_^ gU)
  ----------------------------- "GElabCheckSynthOpt"
  (GElabCheck Gamma et gt gU)]

;; #source file ./ott/lang_simple.ott  lines 1998 - 2004 

;; #source file ./ott/lang_simple.ott  lines 2005 - 2010 

;; #source file ./ott/lang_simple.ott  lines 2020 - 2028 
 [
  (ConsistentSet gU)
  (GradualNECheck Gamma gU_11 eT_11 gT_11 gU)
    
  (GElabCheck (EnvExt x gU_11 Gamma) eT_22 gT_22 gU)
  --------------------------------------------------------------------- "GElabCheckPi"
  (GElabCheck Gamma (TermPi x eT_11 eT_22) (TermPi x gT_11 gT_22) gU)]

;; #source file ./ott/lang_simple.ott  lines 2029 - 2033 

;; #source file ./ott/lang_simple.ott  lines 2034 - 2039 
 [
  
   (where   z  ,(gensym)) 
    
  (GElabCheck (EnvExt z gU_11 Gamma) et  (substitute  gt   x   z )   (substitute  gU_22   y   z ) )
  ---------------------------------------------------------------------------------- "GElabCheckLamPiRdxAlpha"
  (GElabCheck Gamma  (TermLam z et)   (TermLam x gt)  (CanonicalPi y gU_11 gU_22))]

;; #source file ./ott/lang_simple.ott  lines 2040 - 2044 
 [
  
    
  (GElabCheck (EnvExt x CanonicalDyn Gamma) et gt CanonicalDyn)
  ------------------------------------------------------------------- "GElabCheckLamDyn"
  (GElabCheck Gamma  (TermLam x et)   (TermLam x gt)  CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 2045 - 2048 
 [
  (GradualSet Gamma gU)
  ---------------------------------------------------------------------- "GElabCheckDyn"
  (GElabCheck Gamma (TermEp (EvidenceEv Gamma gU) TermDyn) TermDyn gU)]

)
(define-judgment-form L 
 
  #:mode (GradualNESynth I I O O O)
  #:contract (GradualNESynth Gamma gt et gu gU)

;; #source file ./ott/lang_simple.ott  lines 2062 - 2066 
 [
  
  (GradualSetNorm Gamma gU gT)
  (GradualNECheck Gamma gu et gt gU)
  --------------------------------------------------- "GradualNESynthAnn"
  (GradualNESynth Gamma  (TermAnn gt gT)  et gu gU)]

;; #source file ./ott/lang_simple.ott  lines 2067 - 2070 
 [
   (side-condition ,(> (term  i ) 0)) 
  ---------------------------------------------------------------------------------------------------------------------------- "GradualNESynthSet"
  (GradualNESynth Gamma (TermSet i) (TermSet i) (CanonicalAtomic (AtomicSet i)) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 2072 - 2078 
 [
   (side-condition ,(not (hash-has-key? currently-defined-vars (term  x )) )) 
    
  (GVarLook x gU Gamma)
  (GEtaExpand  (AtomicSpine  x  SpineEmpty)  gu gU)
  ------------------------------------------------------ "GradualNESynthVar"
  (GradualNESynth Gamma x x gu gU)]

;; #source file ./ott/lang_simple.ott  lines 2079 - 2082 
 [
  
   (where (ENTTriple  et   gu   gU ) ,(and (hash-has-key? currently-defined-vars (term  x ) ) (hash-ref currently-defined-vars (term  x )) )) 
  --------------------------------------------- "GradualNESynthVarLook"
  (GradualNESynth Gamma x et gu gU)]

;; #source file ./ott/lang_simple.ott  lines 2086 - 2095 
 [
  
  (GradualNESynth Gamma gt_11 et_11 gu gU)
  (GEtaExpandC gu gu_^  (error "SIMPLEPI") )
  (Domain gU gU_11)
  (GradualNECheck Gamma gu_^ et_22 gt_22 gU_11)
  (BodySub gU_11 gu_^ gu_^ gu_^^)
  (CodSub gu_^ gU gU_22)
  (GEtaExpandC gu_^^ gu_^^^ gU_22)
  --------------------------------------------------------------------------------- "GradualNESynthApp"
  (GradualNESynth Gamma (TermApp gt_11 gt_22) (TermApp et_11 et_22) gu_^^^ gU_22)]

)
(define-judgment-form L 
 
  #:mode (GradualNECheck I O O I I)
  #:contract (GradualNECheck Gamma gu et gt gU)

;; #source file ./ott/lang_simple.ott  lines 2114 - 2118 
 [
  
  (GradualNESynth Gamma gt et gu gU_^)
  (GradualNESynthCheck Gamma gu_^ et_^ gt gu et gU_^ gU)
  ---------------------------------------- "GradualNECheckSynthOpt"
  (GradualNECheck Gamma gu_^ et_^ gt gU)]

;; #source file ./ott/lang_simple.ott  lines 2119 - 2126 

;; #source file ./ott/lang_simple.ott  lines 2127 - 2132 

;; #source file ./ott/lang_simple.ott  lines 2142 - 2150 
 [
  (ConsistentSet gU_^^)
  (GradualNECheck Gamma gU_11 eT_11 gT_22 gU_^^)
    
  (GradualNECheck (EnvExt x gU_11 Gamma) gU_22 eT_22 gT_22 gU_^^)
  -------------------------------------------------------------------------------------------------------- "GradualNECheckPi"
  (GradualNECheck Gamma (CanonicalPi x gU_11 gU_22) (TermPi x eT_11 eT_22) (TermPi x gT_11 gT_22) gU_^^)]

;; #source file ./ott/lang_simple.ott  lines 2151 - 2155 

;; #source file ./ott/lang_simple.ott  lines 2156 - 2161 
 [
  
   (where   z  ,(gensym)) 
    
  (GradualNECheck (EnvExt z gU_11 Gamma) gu et  (substitute  gt   x   z )   (substitute  gU_22   y   z ) )
  ------------------------------------------------------------------------------------------------------------ "GradualNECheckLamPiRdxAlpha"
  (GradualNECheck Gamma  (CanonicalLam z gu)   (TermLam z et)   (TermLam x gt)  (CanonicalPi y gU_11 gU_22))]

;; #source file ./ott/lang_simple.ott  lines 2162 - 2166 
 [
  
    
  (GradualNECheck (EnvExt x CanonicalDyn Gamma) gu et gt CanonicalDyn)
  --------------------------------------------------------------------------------------------- "GradualNECheckLamDyn"
  (GradualNECheck Gamma  (CanonicalLam x gu)   (TermLam x et)   (TermLam x gt)  CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 2167 - 2170 
 [
  (GradualSet Gamma gU)
  --------------------------------------------------------------------------------------- "GradualNECheckDyn"
  (GradualNECheck Gamma CanonicalDyn (TermEp (EvidenceEv Gamma gU) TermDyn) TermDyn gU)]
)
;; #source file ./ott/lang_simple.ott  lines 2178 - 2178 
#| 

;;; definitions 

(define-judgment-form
  L
  #:mode (EvType I I I)
  #:contract (EvType Gamma et gU)

;; #source file ./ott/lang_simple.ott  lines 2191 - 2195 
 [
    
  (GVarLook x gU Gamma)
  ------------------------------- "EvTypeVar"
  (EvType Gamma x gU)]

;; #source file ./ott/lang_simple.ott  lines 2199 - 2204 
 [
  
  (EvType Gamma et_22 gU)
  (EvType Gamma et_22  (error "TODO") )
  (EvCod et_22 gU gU_22)
  -------------------------------------------- "EvTypeApp"
  (EvType Gamma (TermApp et_11 et_22) gU_22)]

;; #source file ./ott/lang_simple.ott  lines 2210 - 2216 
 [
  
  (ConsistentSet gU)
  (GNormCheck Gamma gU_^ eT_11 gU)
    
  (EvType (EnvExt x gU_^ Gamma) eT_22 U)
  ------------------------------------------ "EvTypePi"
  (EvType Gamma (TermPi x eT_11 eT_22) gU)]

;; #source file ./ott/lang_simple.ott  lines 2217 - 2220 
 [
   (side-condition ,(> (term  i ) 0)) 
  ------------------------------------------------------------------------ "EvTypeSet"
  (EvType Gamma (TermSet i) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 2222 - 2226 
 [
  
  (EvType Gamma et gU_^)
  (EvConsistent ep gU_^ gU)
  ---------------------------------- "EvTypeEv"
  (EvType Gamma (TermEp ep et) gU)]

;; #source file ./ott/lang_simple.ott  lines 2227 - 2231 
 [
  
  (EvType Gamma et (CanonicalAtomic (AtomicSet i)))
   (side-condition ,(and (< 0 (term  i )) (< (term  i ) (term  j )))) 
  --------------------------------------------------- "EvTypeLevel"
  (EvType Gamma et (CanonicalAtomic (AtomicSet j)))]

;; #source file ./ott/lang_simple.ott  lines 2236 - 2240 
 [
  
    
  (EvType (EnvExt x gU_11 Gamma) et gU_22)
  ------------------------------------------------------------- "EvTypeLamPi"
  (EvType Gamma  (TermLam x et)  (CanonicalPi x gU_11 gU_22))]

;; #source file ./ott/lang_simple.ott  lines 2242 - 2246 
 [
  
    
  (EvType (EnvExt x CanonicalDyn Gamma) et CanonicalDyn)
  ---------------------------------------------- "EvTypeLamDyn"
  (EvType Gamma  (TermLam x et)  CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 2247 - 2251 
 [
  (GradualSet Gamma gU)
  (EvConsistent ep gU gU)
  --------------------------------------- "EvTypeDyn"
  (EvType Gamma (TermEp ep TermDyn) gU)]
)
;; #source file ./ott/lang_simple.ott  lines 2254 - 2254 
|# 

;;; definitions 

(define-judgment-form
  L
  #:mode (SimpleStep I O)
  #:contract (SimpleStep t_11 t_22)

;; #source file ./ott/lang_simple.ott  lines 2268 - 2270 
 [
  ---------------------------------- "SimpleStepAnn"
  (SimpleStep  (TermAnn sv T)  sv)]

;; #source file ./ott/lang_simple.ott  lines 2271 - 2273 
 [
  
  ------------------------------------------------------------------- "SimpleStepApp"
  (SimpleStep (TermApp  (TermLam x t)  sv)  (esubst  t   x   sv ) )]

;; #source file ./ott/lang_simple.ott  lines 2275 - 2278 
 [
  
  (SimpleStep t_11 t_22)
  -------------------------------------------------------------- "SimpleStepContext"
  (SimpleStep  (in-hole  SC   t_11 )   (in-hole  SC   t_22 ) )]

)
(define-judgment-form L 
 
  #:mode (Step I O)
  #:contract (Step et_11 et_22)

;; #source file ./ott/lang_simple.ott  lines 2286 - 2289 
 [
  (Meet gU_11 gU_22 gU_33)
  ------------------------------------------------------------------------------------------------------------------------------------------- "StepAscr"
  (Step (TermEp  (EvidenceEv EnvEmpty  gU_11 )   (TermEp  (EvidenceEv EnvEmpty  gU_22 )  rv) ) (TermEp  (EvidenceEv EnvEmpty  gU_33 )  rv))]

;; #source file ./ott/lang_simple.ott  lines 2292 - 2296 
 [
   (side-condition ,(empty? (judgment-holds (Meet  gU_11   gU_22  ep_9999) ep_9999))) 
   (side-condition ,(error 'RuntimeError "Can't cast:\n    ~a\nto\n   ~a\nin term ~a" (printEvType (term  ep_11 )) (printEvType (term  ep_22 )) (pt (term  rv )) )) 
  --------------------------------------------------------------------------------------------------------- "StepAscrFail"
  (Step (TermEp  (EvidenceEv EnvEmpty  gU_11 )   (TermEp  (EvidenceEv EnvEmpty  gU_22 )  rv) ) TermError)]

;; #source file ./ott/lang_simple.ott  lines 2300 - 2302 
 [
  
  --------------------------------------------------------------- "StepApp"
  (Step (TermApp  (TermLam x et)  ev)  (esubst  et   x   ev ) )]

;; #source file ./ott/lang_simple.ott  lines 2309 - 2312 
 [
  
    (Domain gU_11 gU_33)   (Meet gU_22 gU_33 gU_44)    (EvCod rv gU_11 gU_55) 
  ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- "StepAppEv"
  (Step (TermApp  (TermEp  (EvidenceEv EnvEmpty  gU_11 )   (TermLam x et) )   (TermEp  (EvidenceEv EnvEmpty  gU_22 )  rv) ) (TermEp  (EvidenceEv EnvEmpty  gU_55 )    (esubst  et   x   (TermEp  (EvidenceEv EnvEmpty  gU_44 )  rv) )  ))]

;; #source file ./ott/lang_simple.ott  lines 2315 - 2318 
 [
  (EvCod ev gU_11 gU_22)
  ------------------------------------------------------------------------------------------------------------------------- "StepAppDyn"
  (Step (TermApp  (TermEp  (EvidenceEv EnvEmpty  gU_11 )  TermDyn)  ev) (TermEp  (EvidenceEv EnvEmpty  gU_22 )  TermDyn))]

;; #source file ./ott/lang_simple.ott  lines 2319 - 2323 
 [
  
   (Domain gU_11 gU_22)   (EvCod rv gU_11 gU_33) 
  ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- "StepAppEvRaw"
  (Step (TermApp  (TermEp  (EvidenceEv EnvEmpty  gU_11 )   (TermLam x et) )  rv) (TermEp  (EvidenceEv EnvEmpty  gU_33 )    (esubst  et   x   (TermEp  (EvidenceEv EnvEmpty  gU_22 )  rv) )  ))]

;; #source file ./ott/lang_simple.ott  lines 2325 - 2329 
 [
  
   (side-condition ,(empty? (judgment-holds (Meet    (error "TODO")     gU_22  ep_9999) ep_9999))) 
   (side-condition ,(error 'RuntimeError "Can't cast:\n    ~a\nto\n   ~a\nin term ~a" (printEvType (term  ep_33 )) (printEvType (term  ep_22 )) (pt (term   (TermApp rv_11 rv_22)  )) )) 
  ------------------------------------------------------------------------------------------------------------------------------ "StepAppFailTrans"
  (Step (TermApp  (TermEp  (EvidenceEv EnvEmpty  gU_11 )  rv_11)   (TermEp  (EvidenceEv EnvEmpty  gU_22 )  rv_22) ) TermError)]

;; #source file ./ott/lang_simple.ott  lines 2335 - 2339 
 [
  
   (side-condition ,(empty? (judgment-holds (Domain  gU  gU_9999) gU_9999))) 
   (side-condition ,(error 'RuntimeError "Can't cast:\n    ~a\nto\n   ~a\nin term ~a" (printEvType (term  ep_11 )) (printEvType (term   (EvidenceEv EnvEmpty  (CanonicalPi x CanonicalDyn CanonicalDyn) )  )) (pt (term   (TermApp rv ev)  )) )) 
  -------------------------------------------------------------------------- "StepAppFailDom"
  (Step (TermApp  (TermEp  (EvidenceEv EnvEmpty  gU )  rv)  ev) TermError)]

;; #source file ./ott/lang_simple.ott  lines 2352 - 2356 
 [
  
  (Step et_11 et_22)
   (side-condition ,(not (or (alpha-equivalent? L (term  et_11 ) (term TermError)) (alpha-equivalent? L (term  et_22 ) (term TermError)) ))) 
  ---------------------------------------------------------- "StepContext"
  (Step  (in-hole  EC   et_11 )   (in-hole  EC   et_22 ) )]

;; #source file ./ott/lang_simple.ott  lines 2357 - 2360 
 [
  (Step et TermError)
  ---------------------------------------- "StepContextErr"
  (Step  (in-hole  EC   et )  TermError)]

)
(define-judgment-form L 
 
  #:mode (EvCod I I O)
  #:contract (EvCod et gU_11 gU_22)

;; #source file ./ott/lang_simple.ott  lines 2401 - 2405 
 [
  (GNormCheck EnvEmpty gu et  (error "TODO") )
  (CodSub gu gU gU_22)
  --------------------- "EvCodSub"
  (EvCod et gU gU_22)]
)
;; #source file ./ott/lang_simple.ott  lines 2421 - 2435 
(define-judgment-form
  L
  #:mode (ElabNormType I I O)
  [ (GradualNESynth Gamma gt es gu gU)
  ---------------------------------
  (ElabNormType Gamma gt (ENTTriple es gu gU))]

)

