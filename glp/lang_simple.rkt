;; #source  
;;; generated by Ott 0.28 from: ./ott/lang_simple.ott

#lang racket
(require redex/reduction-semantics)

;; #source file ./ott/lang_simple.ott  lines 4 - 6 
;; #source file ./ott/lang_simple.ott  lines 8 - 13 
(provide (all-defined-out))

(define currently-defined-vars 
  (make-hasheq))

;; #source file ./ott/lang_simple.ott  lines 15 - 86 
;; #source file ./ott/lang_simple.ott  lines 91 - 93 
;; #source file ./ott/lang_simple.ott  lines 96 - 96 
;; #source file ./ott/lang_simple.ott  lines 102 - 110 and file ./ott/lang_simple.ott  lines 115 - 141 and file ./ott/lang_simple.ott  lines 146 - 155 and file ./ott/lang_simple.ott  lines 157 - 162 and file ./ott/lang_simple.ott  lines 164 - 169 and file ./ott/lang_simple.ott  lines 172 - 177 and file ./ott/lang_simple.ott  lines 179 - 181 and file ./ott/lang_simple.ott  lines 186 - 209 and file ./ott/lang_simple.ott  lines 214 - 227 and file ./ott/lang_simple.ott  lines 230 - 235 and file ./ott/lang_simple.ott  lines 237 - 240 and file ./ott/lang_simple.ott  lines 248 - 250 and file ./ott/lang_simple.ott  lines 258 - 269 and file ./ott/lang_simple.ott  lines 273 - 279 and file ./ott/lang_simple.ott  lines 282 - 287 and file ./ott/lang_simple.ott  lines 289 - 297 and file ./ott/lang_simple.ott  lines 301 - 303 and file ./ott/lang_simple.ott  lines 314 - 320 and file ./ott/lang_simple.ott  lines 322 - 328 and file ./ott/lang_simple.ott  lines 374 - 377 and file ./ott/lang_simple.ott  lines 379 - 383 and file ./ott/lang_simple.ott  lines 385 - 389 and file ./ott/lang_simple.ott  lines 509 - 514 and file ./ott/lang_simple.ott  lines 517 - 519 and file ./ott/lang_simple.ott  lines 521 - 523 and file ./ott/lang_simple.ott  lines 525 - 526 
(define-language L  

(level i j ::= natural)

;; #source file ./ott/lang_simple.ott  lines 214 - 227 
  (canonical gu gv gU gV ::= 
    (CanonicalLam var gu)
    CanonicalDyn
    (CanonicalAtomic grr)
    (CanonicalPi var gU gV))
  ;grammar_pp, 2817: and 
;; #source file ./ott/lang_simple.ott  lines 230 - 235 
  (atomic grr gRR ::= 
    (AtomicSpine var ge)
    (AtomicSet i))
  ;grammar_pp, 2817: and 
;; #source file ./ott/lang_simple.ott  lines 237 - 240 
  (spine ge ::= 
    SpineEmpty
    (SpineCons ge gu))

;; #source file ./ott/lang_simple.ott  lines 385 - 389 
  (Env ::= 
    EnvEmpty
    (EnvExt var gU Env)
    (Envconcat Env_11 Env_22))

;; #source file ./ott/lang_simple.ott  lines 248 - 250 
  (epsilon ep ::= 
    (EvidenceEv Gamma gV))

;; #source file ./ott/lang_simple.ott  lines 115 - 141 
  (term tt ett TT ::= 
    (TermLam var tt)
    (TermApp tt_11 tt_22)
    var
    (TermSet i)
    (TermPi var TT_11 TT_22)
    (TermAnn tt TT)
    (TermEp ep tt)
    TermDyn
    TermError)

(iinf ::= number)

;; #source file ./ott/lang_simple.ott  lines 525 - 526 
  (ent ::= 
    (ENTTriple es gu gU))

;; #source file ./ott/lang_simple.ott  lines 314 - 320 
  (simpleContext SC ::= 
    (TermPi x hole T)
    (TermPi x sV hole)
    (TermApp hole t)
    (TermApp sv hole)
    (TermAnn hole T))

;; #source file ./ott/lang_simple.ott  lines 521 - 523 
  (iinfs jinfs ::= 
    (UniverseMultiSetSingleton iinf)
    (UniverseMultiSetSum iinfs jinfs))

;; #source file ./ott/lang_simple.ott  lines 517 - 519 
  (is js ::= 
    (LevelMultiSetSingleton i)
    (LevelMultiSetSum is js))

;; #source file ./ott/lang_simple.ott  lines 301 - 303 
  (dummyeu dummyev dummyeueU dummyeueV ::= 
    (DummyEvidenceValueEv ep rv)
    (DummyEvidenceValueRaw rv))

;; #source file ./ott/lang_simple.ott  lines 322 - 328 
  (evalContext EC ::= 
    (TermPi x hole eT)
    (TermApp hole et)
    (TermApp ev hole)
    (TermEp ep hole))

;; #source file ./ott/lang_simple.ott  lines 186 - 209 
  (gs gt gS gT ::= 
    (TermLam var gt)
    (TermApp gs gt)
    var
    (TermSet i)
    (TermPi var gS gT)
    (TermAnn gt gT)
    TermDyn)

;; #source file ./ott/lang_simple.ott  lines 289 - 297 
  (eu ev eU eV ::= 
    (TermEp ep rv)
    (TermPi var eU eT)
    (TermLam var et)
    (TermSet i)
    TermDyn)

;; #source file ./ott/lang_simple.ott  lines 379 - 383 
  (Gamma ::= 
    EnvEmpty
    (EnvExt var gU Gamma)
    (Envconcat Gamma_11 Gamma_22))

;; #source file ./ott/lang_simple.ott  lines 273 - 279 
  (ru rv rU rV ::= 
    (TermPi var eU eV)
    (TermLam var et)
    (TermSet i)
    TermDyn)

;; #source file ./ott/lang_simple.ott  lines 172 - 177 
  (rr RR ::= 
    (AtomicSpine var e)
    (AtomicSet i))

;; #source file ./ott/lang_simple.ott  lines 179 - 181 
  (e ::= 
    SpineEmpty
    (SpineCons e u))

;; #source file ./ott/lang_simple.ott  lines 282 - 287 
  (simpleValue su sv sU sV ::= 
    (TermPi var sU sV)
    (TermLam var ta)
    (TermSet i))

;; #source file ./ott/lang_simple.ott  lines 374 - 377 
  (SGamma ::= 
    EnvEmpty
    (EnvExt var U SGamma)
    (Envconcat SGamma_11 SGamma_22))

;; #source file ./ott/lang_simple.ott  lines 164 - 169 
  (u v U V ::= 
    (CanonicalLam var u)
    (CanonicalAtomic rr)
    (CanonicalPi var U V))

;; #source file ./ott/lang_simple.ott  lines 258 - 269 
  (es et eS eT ::= 
    (TermPi var eS eT)
    (TermLam var et)
    var
    (TermApp es et)
    TermDyn
    (TermSet i)
    (TermEp ep es)
    TermError)

;; #source file ./ott/lang_simple.ott  lines 157 - 162 
  (sa ta Sa Ta ::= 
    (TermLam var ta)
    (TermApp sa ta)
    var
    (TermPi var Sa Ta)
    (TermSet i))

;; #source file ./ott/lang_simple.ott  lines 146 - 155 
  (t T ::= 
    (TermLam var t)
    (TermApp t_11 t_22)
    var
    (TermPi var T_11 T_22)
    (TermSet i)
    (TermAnn t T))
   (var x y z X Y Z ::= variable-not-otherwise-mentioned)

    #:binding-forms

    (TermLam x tt #:refers-to (shadow x))
    (TermPi x TT_11 TT_22 #:refers-to (shadow x))
    (StaticTermLam x t #:refers-to (shadow x))
    (StaticTermPi x T_11 T_22)
    (StaticTermNoAnnLam x ta #:refers-to (shadow x))
    (StaticTermNoAnnPi x Sa Ta #:refers-to (shadow x))
    (SCanonicalLam x u #:refers-to (shadow x))

    (GradualTermLam x gt #:refers-to (shadow x))
    (GradualTermPi x gS gT #:refers-to (shadow x))
    (CanonicalLam x gu #:refers-to (shadow x))
    (CanonicalPi x gU gV #:refers-to (shadow x))

    (EvidenceTermPi x eS eT #:refers-to (shadow x))
    (EvidenceTermLam x et #:refers-to (shadow x))
    (RawValueLam x et #:refers-to (shadow x))
    (SimpleValuePi x sU sV #:refers-to (shadow x))
    (SimpleValueLam x ta)
    (EvidenceValuePi x eU eT #:refers-to (shadow x))
    (EvidenceValueLam x et #:refers-to (shadow x))

)

;;;; subrules 
;; #source file ./ott/lang_simple.ott  lines 540 - 540 and file ./ott/lang_simple.ott  lines 541 - 541 and file ./ott/lang_simple.ott  lines 544 - 544 and file ./ott/lang_simple.ott  lines 545 - 545 and file ./ott/lang_simple.ott  lines 546 - 546 and file ./ott/lang_simple.ott  lines 547 - 547 and file ./ott/lang_simple.ott  lines 548 - 548 and file ./ott/lang_simple.ott  lines 550 - 550 and file ./ott/lang_simple.ott  lines 551 - 551 and file ./ott/lang_simple.ott  lines 552 - 552 and file ./ott/lang_simple.ott  lines 553 - 553 and file ./ott/lang_simple.ott  lines 554 - 554 and file ./ott/lang_simple.ott  lines 556 - 556 and file ./ott/lang_simple.ott  lines 557 - 557 and file ./ott/lang_simple.ott  lines 558 - 558 and file ./ott/lang_simple.ott  lines 561 - 561 
;; #source file ./ott/lang_simple.ott  lines 572 - 583 
;; #source file ./ott/lang_simple.ott  lines 585 - 670 

(define-metafunction L 
  succ : i -> i
  [(succ i) ,(+ (term i) 1)])
  
  (define-metafunction L 
  pred : i -> i
  [(pred i) ,(- (term i) 1)])

(define-metafunction L 
  esubst : et var et -> et 
  [(esubst x_old x_old et_new) et_new ]
  [(esubst x_old y et_new) y ]
  [(esubst (TermPi y eS eT) x_old et_new) 
    (TermPi z (esubst eS x_old et_new) (esubst (substitute eT x z) x_old et_new ))
    (where   z  ,(gensym)) ] 
  [(esubst (TermLam y es) x_old et_new) 
    (TermLam z (esubst (substitute es x z) x_old et_new ))
    (where   z  ,(gensym)) ]
  [(esubst (TermApp es et)) (TermApp (esubst es x_old et_new) (esubst et x_old et_new))]
  [(esubst (TermEp (EvidenceEv Gamma gU_1 gU_2) es) x_old et_new) (TermEp (EvidenceEv Gamma_1 gU_3 gU_4) (esubst es x_old et_new))
    (judgment-holds (GVarLook x_old gV Gamma))
    (judgment-holds (GNormCheck Gamma gu_esnorm es gV))
    (judgment-holds (GradualEnvSub Gamma x_old gV gu_esnorm Gamma_1))
    (judgment-holds (GHsub  x_old gV gu_esnorm gU_1 gU_3))
    (judgment-holds (GHsub  x_old gV gu_esnorm gU_2 gU_4))]
  ;; TODO get rid of types on ? or add Gamma
  [(esubst es x_old et_new) es] 
)

(define-metafunction L 
 is-check-only : term -> boolean
 [(is-check-only TermDyn) #t]
 [(is-check-only (TermPi x SS TT)) #t]
 [(is-check-only (TermLam x tt)) #t]
 [(is-check-only tt) #f] 
)

(define-metafunction L 
 is-check-pair : term gU -> boolean
 [(is-check-pair TermDyn gU) #t]
 [(is-check-pair (TermPi x SS TT) (CanonicalAtomic (AtomicDyn))) #t]
 [(is-check-pair (TermPi x SS TT) (CanonicalAtomic (AtomicSet i))) #t]
 [(is-check-pair (TermLam x tt) (CanonicalAtomic (AtomicDyn))) #t]
 [(is-check-pair (TermLam x tt) (CanonicalPi y gU gV)) #t]
 [(is-check-pair tt gU) #f] 
)

(define-metafunction L 
 is-set-pair : gU gV -> boolean
 [(is-set-pair (CanonicalAtomic (AtomicSet i)) (CanonicalAtomic (AtomicSet j))) #t (side-condition (< (term i) (term j)))]
 [(is-set-pair gU gV) #f] 
)

(define (pt tm)
  (with-handlers ([exn:fail:redex?
                   (lambda (exn) (format "~a" tm))])
    (pretty-term tm)
    ))

(define pretty-term
    (term-match/single L
    [x (symbol->string (term x))]
    [(TermLam x tt) (string-append "(λ " (pt (term x)) " . " (pt (term tt)) ")")]
    [(TermPi x SS TT) (string-append "(( " (pt (term x)) " : " (pt (term SS)) ") -> " (pt (term TT)) ")")]
    [(TermSet i) (string-append "Set" (number->string (term i)))]
    [(TermApp ss tt) (string-append "(" (pt (term ss)) " " (pt (term tt)) ")")]
    [TermDyn "?"]
    [TermError "⊥"]
    [(TermAnn ss tt) (string-append (pt (term ss)) " :: " (pt (term tt)))]
    [(TermDynAnn gU) (string-append "?" (pt (term gU)))]
    [(TermEp (EvidenceEv Gamma gU gV) tt) (string-append "〈" (pt (term gU)) "〉" (pt (term tt)))]
    [(CanonicalAtomic grr) (pt (term grr))]
    [(CanonicalLam x gu) (string-append "(λ " (pt (term x)) " . " (pt (term gu)) ")")]
    [(CanonicalPi x gU gV) (string-append "(( " (pt (term x)) " : " (pt (term gU)) ") -> " (pt (term gV)) ")")]
    [(AtomicSet i) (string-append "Set" (number->string (term i)))]
    [CanonicalDyn "?"]
    [(AtomicSpine x ge) (string-append "(" (pt (term x)) " " (pt (term ge)) ")")]
    [SpineEmpty ""]
    [(SpineCons ge gu) (string-append (pt (term ge)) " " (pt (term gu)))]
    
    ))

(define (printEvType ep)
 (term-let ([(EvidenceEv Gamma gU gV) ep]) (pt (term gU))))

;;; definitions 

(define-judgment-form
  L
  #:mode (GVarLook I O I)
  #:contract (GVarLook x gU Gamma)

;; #source file ./ott/lang_simple.ott  lines 679 - 681 
 [
  ------------------------------------- "GVarLookHead"
  (GVarLook x gU (EnvExt x gU Gamma))]

;; #source file ./ott/lang_simple.ott  lines 682 - 686 
 [
   (side-condition ,(not (alpha-equivalent? L (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  (GVarLook x gU Gamma)
  ------------------------------------- "GVarLookTail"
  (GVarLook x gU (EnvExt y gV Gamma))]

)
(define-judgment-form L 
 
  #:mode (GVarFree I I)
  #:contract (GVarFree x Gamma)

;; #source file ./ott/lang_simple.ott  lines 690 - 692 
 [----------------------- "GFreeLookNil"
  (GVarFree x EnvEmpty)]

;; #source file ./ott/lang_simple.ott  lines 693 - 697 
 [
   (side-condition ,(not (alpha-equivalent? L (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  (GVarFree x Gamma)
  ---------------------------------- "GFreeLookCons"
  (GVarFree x (EnvExt y gU Gamma))]
)

;;; definitions 

(define-judgment-form
  L
  #:mode (Universe I I O)
  #:contract (Universe Gamma gu iinf)

;; #source file ./ott/lang_simple.ott  lines 718 - 721 
 [
   (side-condition ,(> (term  i ) 0)) 
  ----------------------------------------------------------------- "UniverseSet"
  (Universe Gamma (CanonicalAtomic (AtomicSet i))   (succ  i )  )]

;; #source file ./ott/lang_simple.ott  lines 722 - 727 
 [
  (GVarLook x gV Gamma)
  (Universe Gamma gV  i )
   (side-condition ,(> (term  i ) 0)) 
  ---------------------------------------------------------------------------------- "UniverseVar"
  (Universe Gamma (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) )   (pred  i )  )]

;; #source file ./ott/lang_simple.ott  lines 728 - 732 
 [
  (Universe Gamma gU  i )
  (Universe (EnvExt x gU Gamma) gV  j )
  ------------------------------------------------------------ "UniversePi"
  (Universe Gamma (CanonicalPi x gU gV)  (max   i     j  ) )]

;; #source file ./ott/lang_simple.ott  lines 733 - 736 
 [
  (Universe Gamma gu  i )
  -------------------------------------------- "UniverseLam"
  (Universe Gamma  (CanonicalLam x gu)   i )]

;; #source file ./ott/lang_simple.ott  lines 737 - 741 
 [
  (Universe Gamma (CanonicalAtomic (AtomicSpine x ge))  i )
  (Universe Gamma gv  j )
  ------------------------------------------------------------------------------------------ "UniverseSpine"
  (Universe Gamma (CanonicalAtomic (AtomicSpine x (SpineCons ge gv)))  (max   i     j  ) )]

;; #source file ./ott/lang_simple.ott  lines 742 - 744 
 [
  ---------------------------------------- "UniverseDyn"
  (Universe Gamma CanonicalDyn  +inf.0 )]

)
(define-judgment-form L 
 
  #:mode (SUniverse I I O)
  #:contract (SUniverse SGamma u i)

;; #source file ./ott/lang_simple.ott  lines 750 - 753 
 [
   (side-condition ,(> (term  i ) 0)) 
  ----------------------------------------------------------------- "SUniverseSet"
  (SUniverse SGamma (CanonicalAtomic (AtomicSet i))  (succ  i ) )]

;; #source file ./ott/lang_simple.ott  lines 754 - 759 
 [
  (GVarLook x V SGamma)
  (SUniverse SGamma V i)
   (side-condition ,(> (term  i ) 0)) 
  ---------------------------------------------------------------------------------- "SUniverseVar"
  (SUniverse SGamma (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) )  (pred  i ) )]

;; #source file ./ott/lang_simple.ott  lines 761 - 765 
 [
  (SUniverse SGamma U i)
  (SUniverse (EnvExt x U SGamma) V j)
  -------------------------------------------------------- "SUniversePi"
  (SUniverse SGamma (CanonicalPi x U V)  (max  i   j ) )]

;; #source file ./ott/lang_simple.ott  lines 766 - 768 
 [
  
  --------------------------------------------- "SUniverseLam"
  (SUniverse SGamma  (CanonicalLam x u)   0 )]

;; #source file ./ott/lang_simple.ott  lines 769 - 773 
 [
  
  (SUniverse SGamma (CanonicalAtomic (AtomicSpine x e)) i)
  (SUniverse SGamma v j)
  -------------------------------------------------------------------------------------- "SUniverseSpine"
  (SUniverse SGamma (CanonicalAtomic (AtomicSpine x (SpineCons e v)))  (max  i   j ) )]
)
;; #source file ./ott/lang_simple.ott  lines 775 - 777 
#|

;;; definitions 

(define-judgment-form
  L
  #:mode (LevelOrder I I I)
  #:contract (LevelOrder Gamma iinf jinf)

)
(define-judgment-form L 
 
  #:mode (TypeOrder I I I)
  #:contract (TypeOrder Gamma gU gV)

)
;; #source file ./ott/lang_simple.ott  lines 795 - 797 
|#

;;; definitions 

(define-judgment-form
  L
  #:mode (SHsub I I I I O)
  #:contract (SHsub x U u u_^ v)

;; #source file ./ott/lang_simple.ott  lines 816 - 821 
 [
  (SHsub x U u U U_^)
  (SHsub x U u V V_^)
   (side-condition ,(not (alpha-equivalent? L (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  ----------------------------------------------------------- "SHsubPi"
  (SHsub x U u (CanonicalPi y U V) (CanonicalPi y U_^ V_^))]

;; #source file ./ott/lang_simple.ott  lines 823 - 826 
 [
   (side-condition ,(not (alpha-equivalent? L (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  ----------------------------------------------------------------------------------------------------------------- "SHsubDiffNil"
  (SHsub x U u (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ))]

;; #source file ./ott/lang_simple.ott  lines 827 - 832 
 [
  
   (side-condition ,(not (alpha-equivalent? L (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  (SHsub x U u (CanonicalAtomic (AtomicSpine y e)) (CanonicalAtomic (AtomicSpine y e_^)))
  (SHsub x U u v v_^)
  ----------------------------------------------------------------------------------------------------------------------- "SHsubDiffCons"
  (SHsub x U u (CanonicalAtomic (AtomicSpine y (SpineCons e v))) (CanonicalAtomic (AtomicSpine y (SpineCons e_^ v_^))))]

;; #source file ./ott/lang_simple.ott  lines 835 - 837 
 [
  ------------------------------------------------------------------------------- "SHsubSet"
  (SHsub x U u (CanonicalAtomic (AtomicSet i)) (CanonicalAtomic (AtomicSet i)))]

;; #source file ./ott/lang_simple.ott  lines 839 - 843 
 [
  (SHsub x U u v v_^)
   (side-condition ,(not (alpha-equivalent? L (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  ----------------------------------------------------------- "SHsubLam"
  (SHsub x U u  (CanonicalLam y v)   (CanonicalLam y v_^) )]

;; #source file ./ott/lang_simple.ott  lines 848 - 851 
 [
  
  (SHsubR x U u_11 (AtomicSpine x (SpineCons e u_22)) v_22 V_^)
  ---------------------------------------------------------------------------- "SHsubSpine"
  (SHsub x U u_11 (CanonicalAtomic (AtomicSpine x (SpineCons e u_22))) v_22)]

)
(define-judgment-form L 
 
  #:mode (SHsubR I I I I O O)
  #:contract (SHsubR x U u rr v V)

;; #source file ./ott/lang_simple.ott  lines 862 - 864 
 [
  --------------------------------------------------- "SHsubRHead"
  (SHsubR x U u  (AtomicSpine  x  SpineEmpty)  u U)]

;; #source file ./ott/lang_simple.ott  lines 865 - 872 
 [
  
   (SHsubR x U u_11 (AtomicSpine x e)  (CanonicalLam y v_11)  (CanonicalPi y V_11 V_22))   (SHsub x U u_11 u_22 u_33) 
   (SHsub y V_11 u_33 v_11 v_22)   (SHsub y V_11 u_33 V_22 V_^) 
  ----------------------------------------------------------------- "SHsubRSpine"
  (SHsubR x U u_11  (AtomicSpine x (SpineCons e u_22))  v_22 V_^)]
)

;;; definitions 

(define-judgment-form
  L
  #:mode (SWF I)
  #:contract (SWF SGamma)

;; #source file ./ott/lang_simple.ott  lines 882 - 884 
 [---------------- "SWFEmpty"
  (SWF EnvEmpty)]

;; #source file ./ott/lang_simple.ott  lines 885 - 888 
 [
    (SWF SGamma)   (StaticSet SGamma U)    (GVarFree x SGamma) 
  --------------------------- "SWFExt"
  (SWF (EnvExt x U SGamma))]

)
(define-judgment-form L 
 
  #:mode (StaticSet I I)
  #:contract (StaticSet SGamma U)

;; #source file ./ott/lang_simple.ott  lines 897 - 900 
 [
  
  (SCSynth SGamma rr (CanonicalAtomic (AtomicSet i)))
  ----------------------------------------- "StaticSetSet"
  (StaticSet SGamma (CanonicalAtomic rr))]

;; #source file ./ott/lang_simple.ott  lines 903 - 908 
 [
  (StaticSet SGamma U)
  (SWF (EnvExt x U SGamma))
  (StaticSet (EnvExt x U SGamma) V)
  ---------------------------------------- "StaticSetPi"
  (StaticSet SGamma (CanonicalPi x U V))]

)
(define-judgment-form L 
 
  #:mode (SCSynth I I O)
  #:contract (SCSynth SGamma rr U)

;; #source file ./ott/lang_simple.ott  lines 916 - 919 
 [
   (side-condition ,(> (term  i ) 0)) 
  ---------------------------------------------------------------------------- "SCSynthSet"
  (SCSynth SGamma (AtomicSet i) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 921 - 925 
 [
  
  (SWF SGamma)
  (GVarLook x U SGamma)
  --------------------------------------------------- "SCSynthVar"
  (SCSynth SGamma  (AtomicSpine  x  SpineEmpty)  U)]

;; #source file ./ott/lang_simple.ott  lines 929 - 933 
 [
  
  (SCSynth SGamma (AtomicSpine x e) (CanonicalPi y U_11 U_22))
   (SCCheck SGamma u U_11)   (SHsub y U_11 u U_22 V) 
  ---------------------------------------------------- "SCSynthApp"
  (SCSynth SGamma (AtomicSpine x (SpineCons e u)) V)]

)
(define-judgment-form L 
 
  #:mode (SCCheck I I I)
  #:contract (SCCheck SGamma u U)

;; #source file ./ott/lang_simple.ott  lines 941 - 944 
 [
  
  (SCSynth SGamma rr (CanonicalAtomic RR))
  ------------------------------------------------------------ "SCCheckSynth"
  (SCCheck SGamma (CanonicalAtomic rr) (CanonicalAtomic RR))]

;; #source file ./ott/lang_simple.ott  lines 945 - 949 
 [
  
  (SCSynth SGamma rr (CanonicalAtomic (AtomicSet i)))
   (side-condition ,(and (< 0 (term  i )) (< (term  i ) (term  j )))) 
  ----------------------------------------------------------------------- "SCCheckLevel"
  (SCCheck SGamma (CanonicalAtomic rr) (CanonicalAtomic (AtomicSet j)))]

;; #source file ./ott/lang_simple.ott  lines 951 - 954 
 [
  
   (SWF (EnvExt x U SGamma))   (SCCheck (EnvExt x U SGamma) u V) 
  ----------------------------------------------------------- "SCCheckLam"
  (SCCheck SGamma  (CanonicalLam x u)  (CanonicalPi x U V))]

;; #source file ./ott/lang_simple.ott  lines 955 - 959 
 [
  (SCCheck SGamma U (CanonicalAtomic (AtomicSet i)))
   (SWF (EnvExt x U SGamma))   (SCCheck (EnvExt x U SGamma) V (CanonicalAtomic (AtomicSet i))) 
  ---------------------------------------------------------------------- "SCCheckPi"
  (SCCheck SGamma (CanonicalPi x U V) (CanonicalAtomic (AtomicSet i)))]
)

;;; definitions 

(define-judgment-form
  L
  #:mode (SSynth I I O)
  #:contract (SSynth SGamma t U)

;; #source file ./ott/lang_simple.ott  lines 969 - 973 
 [
  
  (StaticSetNorm SGamma V T)
  (SCheck SGamma t V)
  ----------------------------------- "SSynthAnn"
  (SSynth SGamma  (TermAnn t T)  V)]

;; #source file ./ott/lang_simple.ott  lines 974 - 977 
 [
   (side-condition ,(> (term  i ) 0)) 
  ------------------------------------------------------------------------- "SSynthSet"
  (SSynth SGamma (TermSet i) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 979 - 983 
 [
  
  (SWF SGamma)
  (GVarLook x U SGamma)
  ------------------------------- "SSynthVar"
  (SSynth SGamma x U)]

;; #source file ./ott/lang_simple.ott  lines 988 - 992 
 [
  
  (SSynth SGamma t_11 (CanonicalPi x U V))
   (SNormCheck SGamma v t_22 U)   (SHsub x U v V V_^) 
  ----------------------------------------- "SSynthApp"
  (SSynth SGamma (TermApp t_11 t_22) V_^)]

)
(define-judgment-form L 
 
  #:mode (SCheck I I I)
  #:contract (SCheck SGamma t U)

;; #source file ./ott/lang_simple.ott  lines 999 - 1002 
 [
  
  (SSynth SGamma t U)
  --------------------- "SCheckSynth"
  (SCheck SGamma t U)]

;; #source file ./ott/lang_simple.ott  lines 1003 - 1007 
 [
  
  (SSynth SGamma t (CanonicalAtomic (AtomicSet i)))
   (side-condition ,(and (< 0 (term  i )) (< (term  i ) (term  j )))) 
  --------------------------------------------------- "SCheckLevel"
  (SCheck SGamma t (CanonicalAtomic (AtomicSet j)))]

;; #source file ./ott/lang_simple.ott  lines 1008 - 1011 
 [
    (SNormCheck SGamma U T_11 (CanonicalAtomic (AtomicSet i)))   (SWF (EnvExt x U SGamma))    (SCheck (EnvExt x U SGamma) T_22 (CanonicalAtomic (AtomicSet i))) 
  ---------------------------------------------------------------------- "SCheckPi"
  (SCheck SGamma (TermPi x T_11 T_22) (CanonicalAtomic (AtomicSet i)))]

;; #source file ./ott/lang_simple.ott  lines 1013 - 1016 
 [
  
   (SWF (EnvExt x U SGamma))   (SCheck (EnvExt x U SGamma) t V) 
  ----------------------------------------------------- "SCheckLam"
  (SCheck SGamma  (TermLam x t)  (CanonicalPi x U V))]

)
(define-judgment-form L 
 
  #:mode (StaticSetNorm I O I)
  #:contract (StaticSetNorm SGamma U T)

;; #source file ./ott/lang_simple.ott  lines 1027 - 1030 
 [
  (SNormSynth SGamma T U (CanonicalAtomic (AtomicSet i)))
  ---------------------------- "StaticSetNormSynth"
  (StaticSetNorm SGamma U T)]

;; #source file ./ott/lang_simple.ott  lines 1031 - 1035 
 [
  (StaticSetNorm SGamma U T_11)
  (StaticSetNorm (EnvExt x U SGamma) V T_22)
  ----------------------------------------------------------------- "StaticSetNormPi"
  (StaticSetNorm SGamma (CanonicalPi x U V) (TermPi x T_11 T_22))]

)
(define-judgment-form L 
 
  #:mode (SNormSynth I I O O)
  #:contract (SNormSynth SGamma t v U)

;; #source file ./ott/lang_simple.ott  lines 1041 - 1045 
 [
  
  (StaticSetNorm SGamma V T)
  (SNormCheck SGamma v t V)
  ----------------------------------------- "SNormSynthAnn"
  (SNormSynth SGamma  (TermAnn t T)  v V)]

;; #source file ./ott/lang_simple.ott  lines 1046 - 1049 
 [
   (side-condition ,(> (term  i ) 0)) 
  ------------------------------------------------------------------------------------------------------------- "SNormSynthSet"
  (SNormSynth SGamma (TermSet i) (CanonicalAtomic (AtomicSet i)) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 1051 - 1056 
 [
  (SWF SGamma)
  (GVarLook x U SGamma)
  (EtaExpand  (AtomicSpine  x  SpineEmpty)  v U)
  ------------------------------------- "SNormSynthVar"
  (SNormSynth SGamma x v U)]

;; #source file ./ott/lang_simple.ott  lines 1061 - 1066 
 [
  
  (SNormSynth SGamma t_11  (CanonicalLam x u)  (CanonicalPi x U_11 U_22))
  (SNormCheck SGamma v t_22 U_11)
   (SHsub x U_11 v u v_^)   (SHsub x U_11 v U_22 V) 
  ----------------------------------------------- "SNormSynthApp"
  (SNormSynth SGamma (TermApp t_11 t_22) v_^ V)]

)
(define-judgment-form L 
 
  #:mode (SNormCheck I O I I)
  #:contract (SNormCheck SGamma v t U)

;; #source file ./ott/lang_simple.ott  lines 1075 - 1078 
 [
  
  (SNormSynth SGamma t v U)
  --------------------------- "SNormCheckSynth"
  (SNormCheck SGamma v t U)]

;; #source file ./ott/lang_simple.ott  lines 1079 - 1083 
 [
  
  (SNormSynth SGamma t v (CanonicalAtomic (AtomicSet i)))
   (side-condition ,(and (< 0 (term  i )) (< (term  i ) (term  j )))) 
  --------------------------------------------------------- "SNormCheckLevel"
  (SNormCheck SGamma v t (CanonicalAtomic (AtomicSet j)))]

;; #source file ./ott/lang_simple.ott  lines 1085 - 1090 
 [
  (SNormCheck SGamma U T_11 (CanonicalAtomic (AtomicSet i)))
  (SWF (EnvExt x U SGamma))
  (SNormCheck (EnvExt x U SGamma) V T_22 (CanonicalAtomic (AtomicSet i)))
  ---------------------------------------------------------------------------------------------- "SNormCheckPi"
  (SNormCheck SGamma (CanonicalPi x U V) (TermPi x T_11 T_22) (CanonicalAtomic (AtomicSet i)))]

;; #source file ./ott/lang_simple.ott  lines 1091 - 1095 
 [
  
  (SWF (EnvExt x U SGamma))
  (SNormCheck (EnvExt x U SGamma) v t V)
  ------------------------------------------------------------------------------ "SNormCheckLam"
  (SNormCheck SGamma  (CanonicalLam x v)   (TermLam x t)  (CanonicalPi x U V))]

)
(define-judgment-form L 
 
  #:mode (EtaExpand I O I)
  #:contract (EtaExpand rr v V)

;; #source file ./ott/lang_simple.ott  lines 1101 - 1103 
 [
  ---------------------------------------------------------- "EtaExpandAtomic"
  (EtaExpand rr (CanonicalAtomic rr) (CanonicalAtomic RR))]

;; #source file ./ott/lang_simple.ott  lines 1105 - 1108 
 [
  
   (EtaExpand  (AtomicSpine  y  SpineEmpty)  u U)   (EtaExpand (AtomicSpine x (SpineCons e u)) v V) 
  ------------------------------------------------------------------------ "EtaExpandPi"
  (EtaExpand (AtomicSpine x e)  (CanonicalLam y v)  (CanonicalPi y U V))]
)

;;; definitions 

(define-judgment-form
  L
  #:mode (Domain I O)
  #:contract (Domain gU gV)

;; #source file ./ott/lang_simple.ott  lines 1126 - 1128 
 [----------------------------------- "DomainPi"
  (Domain (CanonicalPi x gU gV) gU)]

;; #source file ./ott/lang_simple.ott  lines 1129 - 1131 
 [------------------------------------ "DomainDyn"
  (Domain CanonicalDyn CanonicalDyn)]

)
(define-judgment-form L 
 
  #:mode (CoDomain I O)
  #:contract (CoDomain gU gV)

;; #source file ./ott/lang_simple.ott  lines 1137 - 1139 
 [------------------------------------- "CoDomainPi"
  (CoDomain (CanonicalPi x gU gV) gV)]

;; #source file ./ott/lang_simple.ott  lines 1140 - 1142 
 [-------------------------------------- "CoDomainDyn"
  (CoDomain CanonicalDyn CanonicalDyn)]

)
(define-judgment-form L 
 
  #:mode (GradualEnvSub I I I I O)
  #:contract (GradualEnvSub x gU gu Gamma Gamma_^)

;; #source file ./ott/lang_simple.ott  lines 1149 - 1151 
 [------------------------------------------- "GradualEnvSubEmpty"
  (GradualEnvSub x gU gu EnvEmpty EnvEmpty)]

;; #source file ./ott/lang_simple.ott  lines 1152 - 1157 
 [
  
   (side-condition ,(not (alpha-equivalent? L (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  (GHsub x gU gu gU gU_^)
  (GradualEnvSub x gU gu Gamma Gamma_^)
  --------------------------------------------------------------------- "GradualEnvSubVarDiff"
  (GradualEnvSub x gU gu (EnvExt y gU Gamma) (EnvExt y gU_^ Gamma_^))]

;; #source file ./ott/lang_simple.ott  lines 1158 - 1161 
 [
  
  (GradualEnvSub x gU gu Gamma Gamma_^)
  ----------------------------------------------------- "GradualEnvSubVarSame"
  (GradualEnvSub x gU gu (EnvExt x gU Gamma) Gamma_^)]

)
(define-judgment-form L 
 
  #:mode (GHsub I I I I O)
  #:contract (GHsub x gU gu gu_^ gv)

;; #source file ./ott/lang_simple.ott  lines 1168 - 1170 
 [--------------------------------------------------------------------------------- "GHsubSet"
  (GHsub x gU gu (CanonicalAtomic (AtomicSet i)) (CanonicalAtomic (AtomicSet i)))]

;; #source file ./ott/lang_simple.ott  lines 1172 - 1174 
 [------------------------------------------- "GHsubDyn"
  (GHsub x gU gu CanonicalDyn CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 1175 - 1180 
 [ (side-condition ,(not (alpha-equivalent? L (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  (GHsub x gU gu gV_11 gV_11^)
  (GHsub x gU gu gV_22 gV_22^)
  --------------------------------------------------------------------------- "GHsubPi"
  (GHsub x gU gu (CanonicalPi y gV_11 gV_22) (CanonicalPi y gV_11^ gV_22^))]

;; #source file ./ott/lang_simple.ott  lines 1181 - 1185 
 [ (where   y  ,(gensym)) 
  (GHsub x gU gu (CanonicalPi y gU  (substitute  gV   x   y ) ) gV_^)
  -------------------------------------------- "GHsubPiRdxAlpha"
  (GHsub x gU gu (CanonicalPi x gU gV) gV_^)]

;; #source file ./ott/lang_simple.ott  lines 1187 - 1191 
 [ (side-condition ,(not (alpha-equivalent? L (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  (GHsub x gU gu gv gv_^)
  --------------------------------------------------------------- "GHsubLam"
  (GHsub x gU gu  (CanonicalLam y gv)   (CanonicalLam y gv_^) )]

;; #source file ./ott/lang_simple.ott  lines 1192 - 1196 
 [ (where   y  ,(gensym)) 
  (GHsub x gU gu  (CanonicalLam y  (substitute  gv   x   y ) )  gv_^)
  -------------------------------------------- "GHsubLamRdxAlpha"
  (GHsub x gU gu  (CanonicalLam x gv)  gv_^)]

;; #source file ./ott/lang_simple.ott  lines 1197 - 1200 
 [ (side-condition ,(not (alpha-equivalent? L (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  ------------------------------------------------------------------------------------------------------------------- "GHsubDiffNil"
  (GHsub x gU gu (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ))]

;; #source file ./ott/lang_simple.ott  lines 1201 - 1206 
 [ (side-condition ,(not (alpha-equivalent? L (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  (GHsub x gU gu (CanonicalAtomic (AtomicSpine y ge)) (CanonicalAtomic (AtomicSpine y ge_^)))
  (GHsub x gU gu gv gv_^)
  ----------------------------------------------------------------------------------------------------------------------------- "GHsubDiffCons"
  (GHsub x gU gu (CanonicalAtomic (AtomicSpine y (SpineCons ge gv))) (CanonicalAtomic (AtomicSpine y (SpineCons ge_^ gv_^))))]

;; #source file ./ott/lang_simple.ott  lines 1209 - 1212 
 [(GHsubR x gU gu ge gv gV)
  --------------------------------------------------------- "GHsubSpine"
  (GHsub x gU gu (CanonicalAtomic (AtomicSpine x ge)) gv)]

)
(define-judgment-form L 
 
  #:mode (GHsubR I I I I O O)
  #:contract (GHsubR x gU gu ge gv gV)

;; #source file ./ott/lang_simple.ott  lines 1232 - 1234 
 [----------------------------------- "GHsubRHead"
  (GHsubR x gU gu SpineEmpty gu gU)]

;; #source file ./ott/lang_simple.ott  lines 1237 - 1241 
 [ (GHsubR x gU gu ge CanonicalDyn (CanonicalPi y gU_11 gU_22))   (GHsub y gU_11 gv gU_22 gV) 
  ---------------------------------------------------- "GHsubRDynSpine"
  (GHsubR x gU gu (SpineCons ge gv) CanonicalDyn gV)]

;; #source file ./ott/lang_simple.ott  lines 1242 - 1247 

;; #source file ./ott/lang_simple.ott  lines 1248 - 1253 
 [(GHsubR x gU gu_11 ge gv_11 CanonicalDyn)
  -------------------------------------------------------------------- "GHsubRDynType"
  (GHsubR x gU gu_11 (SpineCons ge gu_22) CanonicalDyn CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 1256 - 1262 
 [(GHsubR x gU gu ge  (CanonicalLam y_11 gu_22)  (CanonicalPi y_22 gU_11 gU_22))
   (GHsub x gU gu gv_11 gv_22)   (GHsub y_11 gU_11 gv_22 gu_22 gv_33) 
   (GHsub y_22 gU_11 gv_22 gU_22 gV)   (GEtaExpandC gv_33 gv_44 gV) 
  ------------------------------------------------ "GHsubRLamSpineRdxAlpha"
  (GHsubR x gU gu (SpineCons ge gv_11) gv_44 gV)]

)
(define-judgment-form L 
 
  #:mode (CodSub I I O)
  #:contract (CodSub gu gu_^ gv)

;; #source file ./ott/lang_simple.ott  lines 1273 - 1276 
 [(GHsub x gU gu gV gV_^)
  ---------------------------------------- "CodSubPi"
  (CodSub gu (CanonicalPi x gU gV) gV_^)]

;; #source file ./ott/lang_simple.ott  lines 1277 - 1279 
 [--------------------------------------- "CodSubDyn"
  (CodSub gu CanonicalDyn CanonicalDyn)]

)
(define-judgment-form L 
 
  #:mode (BodySub I I I O)
  #:contract (BodySub gU gu gu_^ gv)

;; #source file ./ott/lang_simple.ott  lines 1305 - 1308 
 [(GHsub x gU gu gv gv_^)
  -------------------------------------------- "BodySubPi"
  (BodySub gU gu  (CanonicalLam x gv)  gv_^)]

;; #source file ./ott/lang_simple.ott  lines 1309 - 1311 
 [------------------------------------------- "BodySubDyn"
  (BodySub gU gu CanonicalDyn CanonicalDyn)]
)

;;; definitions 

(define-judgment-form
  L
  #:mode (GradualSet I I)
  #:contract (GradualSet Gamma gU)

;; #source file ./ott/lang_simple.ott  lines 1320 - 1323 
 [
  (GCSynth Gamma grr CanonicalDyn)
  ------------------------------------------ "GradualSetDynTy"
  (GradualSet Gamma (CanonicalAtomic grr))]

;; #source file ./ott/lang_simple.ott  lines 1324 - 1327 
 [
  (GCSynth Gamma grr (CanonicalAtomic (AtomicSet i)))
  ------------------------------------------ "GradualSetSet"
  (GradualSet Gamma (CanonicalAtomic grr))]

;; #source file ./ott/lang_simple.ott  lines 1330 - 1335 
 [
  (GradualSet Gamma gU_11)
    
  (GradualSet (EnvExt x gU_11 Gamma) gU_22)
  ------------------------------------------------ "GradualSetPi"
  (GradualSet Gamma (CanonicalPi x gU_11 gU_22))]

;; #source file ./ott/lang_simple.ott  lines 1337 - 1339 
 [
  --------------------------------- "GradualSetDynVal"
  (GradualSet Gamma CanonicalDyn)]

)
(define-judgment-form L 
 
  #:mode (WF I)
  #:contract (WF Gamma)

;; #source file ./ott/lang_simple.ott  lines 1345 - 1347 
 [--------------- "WFEmpty"
  (WF EnvEmpty)]

;; #source file ./ott/lang_simple.ott  lines 1348 - 1352 
 [
   (WF Gamma)   (GradualSet Gamma gU) 
  (GVarFree x Gamma)
  -------------------------- "WFExt"
  (WF (EnvExt x gU Gamma))]

)
(define-judgment-form L 
 
  #:mode (GCSynth I I O)
  #:contract (GCSynth Gamma grr gU)

;; #source file ./ott/lang_simple.ott  lines 1358 - 1361 
 [
   (side-condition ,(> (term  i ) 0)) 
  --------------------------------------------------------------------------- "GCSynthSet"
  (GCSynth Gamma (AtomicSet i) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 1363 - 1367 
 [
    
  (GVarLook x gU Gamma)
  --------------------------------------------------- "GCSynthVar"
  (GCSynth Gamma  (AtomicSpine  x  SpineEmpty)  gU)]

;; #source file ./ott/lang_simple.ott  lines 1371 - 1378 
 [
  (GCSynth Gamma (AtomicSpine x ge) gU)
  (Domain gU gV)
  (GCCheck Gamma gu gV)
  (CodSub gu gU gV_^)
  -------------------------------------------------------- "GCSynthApp"
  (GCSynth Gamma (AtomicSpine x (SpineCons ge gu)) gV_^)]

)
(define-judgment-form L 
 
  #:mode (GCCheck I I I)
  #:contract (GCCheck Gamma gu gU)

;; #source file ./ott/lang_simple.ott  lines 1385 - 1389 
 [
  (GCSynth Gamma grr gU)
  (Consistent gU gV)
  ------------------------------------------ "GCCheckSynth"
  (GCCheck Gamma (CanonicalAtomic grr) gV)]

;; #source file ./ott/lang_simple.ott  lines 1390 - 1394 
 [
  (GCSynth Gamma grr (CanonicalAtomic (AtomicSet i)))
   (side-condition ,(and (< 0 (term  i )) (< (term  i ) (term  j )))) 
  ----------------------------------------------------------------------- "GCCheckLevel"
  (GCCheck Gamma (CanonicalAtomic grr) (CanonicalAtomic (AtomicSet j)))]

;; #source file ./ott/lang_simple.ott  lines 1396 - 1400 

;; #source file ./ott/lang_simple.ott  lines 1402 - 1407 
 [
   (where   z  ,(gensym)) 
    
  (GCCheck (EnvExt z gU Gamma)  (substitute  gu   x   z )   (substitute  gV   y   z ) )
  ------------------------------------------------------------- "GCCheckLamPiRdxAlpha"
  (GCCheck Gamma  (CanonicalLam x gu)  (CanonicalPi y gU gV))]

;; #source file ./ott/lang_simple.ott  lines 1408 - 1412 
 [
    
  (GCCheck (EnvExt x CanonicalDyn Gamma) gu CanonicalDyn)
  ---------------------------------------------------- "GCCheckLamDyn"
  (GCCheck Gamma  (CanonicalLam x gu)  CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 1413 - 1419 
 [
  (ConsistentSet gV)
  (GCCheck Gamma gU_11 gV)
    
  (GCCheck (EnvExt x gU_11 Gamma) gU_22 gV)
  ------------------------------------------------ "GCCheckPi"
  (GCCheck Gamma (CanonicalPi x gU_11 gU_22) gV)]

;; #source file ./ott/lang_simple.ott  lines 1421 - 1424 
 [
  (GradualSet Gamma gU)
  --------------------------------- "GCCheckDyn"
  (GCCheck Gamma CanonicalDyn gU)]

)
(define-judgment-form L 
 
  #:mode (ConsistentSet I)
  #:contract (ConsistentSet gU)

;; #source file ./ott/lang_simple.ott  lines 1432 - 1434 
 [------------------------------------------------- "ConsistentSetSet"
  (ConsistentSet (CanonicalAtomic (AtomicSet i)))]

;; #source file ./ott/lang_simple.ott  lines 1435 - 1437 
 [------------------------------ "ConsistentSetDyn"
  (ConsistentSet CanonicalDyn)]

)
(define-judgment-form L 
 
  #:mode (Consistent I I)
  #:contract (Consistent gU gV)

;; #source file ./ott/lang_simple.ott  lines 1447 - 1449 
 [-------------------- "ConsistentEq"
  (Consistent gu gu)]

;; #source file ./ott/lang_simple.ott  lines 1450 - 1454 

;; #source file ./ott/lang_simple.ott  lines 1456 - 1461 
 [ (where   z  ,(gensym)) 
  (Consistent gU gU_^)
  (Consistent  (substitute  gV   x   z )   (substitute  gV_^   y   z ) )
  -------------------------------------------------------------- "ConsistentPiRdxAlpha"
  (Consistent (CanonicalPi x gU gV) (CanonicalPi y gU_^ gV_^))]

;; #source file ./ott/lang_simple.ott  lines 1462 - 1465 

;; #source file ./ott/lang_simple.ott  lines 1467 - 1471 
 [ (where   z  ,(gensym)) 
  (Consistent  (substitute  gu   x   z )   (substitute  gv   y   z ) )
  ---------------------------------------------------------- "ConsistentLamRdxAlpha"
  (Consistent  (CanonicalLam x gu)   (CanonicalLam y gv) )]

;; #source file ./ott/lang_simple.ott  lines 1472 - 1476 
 [(Consistent (CanonicalAtomic (AtomicSpine x ge)) (CanonicalAtomic (AtomicSpine x ge_^)))
  (Consistent gu gv)
  ------------------------------------------------------------------------------------------------------------------------ "ConsistentApp"
  (Consistent (CanonicalAtomic (AtomicSpine x (SpineCons ge gu))) (CanonicalAtomic (AtomicSpine x (SpineCons ge_^ gv))))]

;; #source file ./ott/lang_simple.ott  lines 1477 - 1479 
 [------------------------------ "ConsistentDynL"
  (Consistent CanonicalDyn gv)]

;; #source file ./ott/lang_simple.ott  lines 1480 - 1482 
 [------------------------------ "ConsistentDynR"
  (Consistent gu CanonicalDyn)]
)

;;; definitions 

(define-judgment-form
  L
  #:mode (Meet I I O)
  #:contract (Meet gU gV gU_^)

;; #source file ./ott/lang_simple.ott  lines 1493 - 1497 

;; #source file ./ott/lang_simple.ott  lines 1499 - 1504 
 [ (where   z  ,(gensym)) 
  (Meet gU gU_^ gU_^^)
  (Meet  (substitute  gV   x   z )   (substitute  gV_^   y   z )  gV_^^)
  ------------------------------------------------------------------------------------ "MeetPiRdxAlpha"
  (Meet (CanonicalPi x gU gV) (CanonicalPi y gU_^ gV_^) (CanonicalPi z gU_^^ gV_^^))]

;; #source file ./ott/lang_simple.ott  lines 1505 - 1508 

;; #source file ./ott/lang_simple.ott  lines 1510 - 1514 
 [ (where   z  ,(gensym)) 
  (Meet  (substitute  gu   x   z )   (substitute  gu_^   y   z )  gv)
  ---------------------------------------------------------------------- "MeetLamRdxAlpha"
  (Meet (CanonicalLam x gu) (CanonicalLam y gu_^) (CanonicalLam z gv))]

;; #source file ./ott/lang_simple.ott  lines 1515 - 1519 
 [(Meet gu gu_^ gu_^^)
  (Meet (CanonicalAtomic (AtomicSpine x ge)) (CanonicalAtomic (AtomicSpine x ge_^)) (CanonicalAtomic (AtomicSpine x ge_^^)))
  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ "MeetApp"
  (Meet (CanonicalAtomic (AtomicSpine x (SpineCons ge gu))) (CanonicalAtomic (AtomicSpine x (SpineCons ge_^ gu_^))) (CanonicalAtomic (AtomicSpine x (SpineCons ge_^^ gu_^^))))]

;; #source file ./ott/lang_simple.ott  lines 1520 - 1522 
 [--------------------------- "MeetDynL"
  (Meet CanonicalDyn gU gU)]

;; #source file ./ott/lang_simple.ott  lines 1523 - 1526 
 [ (side-condition ,(not (alpha-equivalent? L (term  gV ) (term  CanonicalDyn )))) 
  --------------------------- "MeetDynR"
  (Meet gV CanonicalDyn gV)]

;; #source file ./ott/lang_simple.ott  lines 1527 - 1531 
 [ (side-condition ,(not (alpha-equivalent? L (term  gU ) (term  CanonicalDyn )))) 
   (side-condition ,(not (alpha-equivalent? L (term  gV ) (term  CanonicalDyn )))) 
  ----------------- "MeetRefl"
  (Meet gu gu gu)]

)
(define-judgment-form L 
 
  #:mode (MorePrecise I I)
  #:contract (MorePrecise gU gV)

;; #source file ./ott/lang_simple.ott  lines 1539 - 1542 
 [(Meet gU gV gU)
  --------------------- "MorePreciseDef"
  (MorePrecise gU gV)]

)
(define-judgment-form L 
 
  #:mode (EvConsistent I I I)
  #:contract (EvConsistent ep gU gV)

;; #source file ./ott/lang_simple.ott  lines 1549 - 1553 
 [
  (Meet gV_11 gV_22 gV_33)
  (MorePrecise gU gV_33)
  -------------------------------------------------- "EvConsistentDef"
  (EvConsistent (EvidenceEv Gamma gU) gV_11 gV_22)]
)

;;; definitions 

(define-judgment-form
  L
  #:mode (GSynth I I O)
  #:contract (GSynth Gamma gt gU)

;; #source file ./ott/lang_simple.ott  lines 1567 - 1571 
 [
  
  (GradualSetNorm Gamma gV gT)
  (GCheck Gamma gt gV)
  ------------------------------------- "GSynthAnn"
  (GSynth Gamma  (TermAnn gt gT)  gV)]

;; #source file ./ott/lang_simple.ott  lines 1572 - 1575 
 [
   (side-condition ,(> (term  i ) 0)) 
  ------------------------------------------------------------------------ "GSynthSet"
  (GSynth Gamma (TermSet i) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 1577 - 1581 
 [
  (GVarLook x gU Gamma)
    
  ------------------------------- "GSynthVar"
  (GSynth Gamma x gU)]

;; #source file ./ott/lang_simple.ott  lines 1586 - 1590 
 [
  
   (GSynth Gamma gs gV)   (GNormCheck Gamma gv gt  (error "TODO") ) 
  (CodSub gv gV gV_22)
  -------------------------------------- "GSynthApp"
  (GSynth Gamma (TermApp gs gt) gV_22)]

)
(define-judgment-form L 
 
  #:mode (GCheck I I I)
  #:contract (GCheck Gamma gt gU)

;; #source file ./ott/lang_simple.ott  lines 1605 - 1610 
 [
  (GSynth Gamma gt gU)
  (Consistent gU gV)
  ---------------------- "GCheckSynth"
  (GCheck Gamma gt gV)]

;; #source file ./ott/lang_simple.ott  lines 1611 - 1616 
 [
  (GSynth Gamma gt (CanonicalAtomic (AtomicSet i)))
   (side-condition ,(and (< 0 (term  i )) (< (term  i ) (term  j )))) 
  --------------------------------------------------- "GCheckLevel"
  (GCheck Gamma gt (CanonicalAtomic (AtomicSet j)))]

;; #source file ./ott/lang_simple.ott  lines 1625 - 1629 
 [
  
   (GNormCheck Gamma gU gS gV)   (ConsistentSet gV) 
        (GCheck (EnvExt x gU Gamma) gT gV) 
  ------------------------------------ "GCheckPi"
  (GCheck Gamma (TermPi x gS gT) gV)]

;; #source file ./ott/lang_simple.ott  lines 1631 - 1635 

;; #source file ./ott/lang_simple.ott  lines 1637 - 1642 
 [
   (where   z  ,(gensym)) 
    
  (GCheck (EnvExt z gU Gamma)  (substitute  gt   x   z )   (substitute  gV   y   z ) )
  ------------------------------------------------------- "GCheckLamPiRdxAlpha"
  (GCheck Gamma  (TermLam x gt)  (CanonicalPi y gU gV))]

;; #source file ./ott/lang_simple.ott  lines 1644 - 1648 
 [
    
  (GCheck (EnvExt x CanonicalDyn Gamma) gt CanonicalDyn)
  ---------------------------------------------- "GCheckLamDyn"
  (GCheck Gamma  (TermLam x gt)  CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 1649 - 1652 
 [
  (GradualSet Gamma gU)
  --------------------------- "GCheckDyn"
  (GCheck Gamma TermDyn gU)]

)
(define-judgment-form L 
 
  #:mode (GradualSetNorm I O I)
  #:contract (GradualSetNorm Gamma gU TT)

;; #source file ./ott/lang_simple.ott  lines 1667 - 1670 
 [
  (GNormSynth Gamma TT gU (CanonicalAtomic (AtomicSet i)))
  ------------------------------ "GradualSetNormSynth"
  (GradualSetNorm Gamma gU TT)]

;; #source file ./ott/lang_simple.ott  lines 1672 - 1676 
 [
  (GradualSetNorm Gamma gU (TermVar SS))
  (GradualSetNorm (EnvExt x gU Gamma) gV TT)
  ------------------------------------------------------------------------- "GradualSetNormPi"
  (GradualSetNorm Gamma (CanonicalPi x gU gV) (TermPi x (TermVar SS) TT))]

;; #source file ./ott/lang_simple.ott  lines 1678 - 1680 
 [
  --------------------------------------------- "GradualSetNormDyn"
  (GradualSetNorm Gamma CanonicalDyn TermDyn)]

)
(define-judgment-form L 
 
  #:mode (GEtaLong I I)
  #:contract (GEtaLong gv gV)

;; #source file ./ott/lang_simple.ott  lines 1686 - 1688 
 [-------------------------------------------------------- "GEtaLongAtomic"
  (GEtaLong (CanonicalAtomic grr) (CanonicalAtomic gRR))]

;; #source file ./ott/lang_simple.ott  lines 1689 - 1691 
 [----------------------------------------------- "GEtaLongAtomicDyn"
  (GEtaLong (CanonicalAtomic grr) CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 1693 - 1696 

;; #source file ./ott/lang_simple.ott  lines 1697 - 1701 
 [ (where   z  ,(gensym)) 
  (GEtaLong  (substitute  gu   x   z )   (substitute  gV   y   z ) )
  -------------------------------------------------------- "GEtaLongLamRdxAlpha"
  (GEtaLong  (CanonicalLam x gu)  (CanonicalPi y gU gV))]

;; #source file ./ott/lang_simple.ott  lines 1702 - 1704 
 [---------------------------- "GEtaLongDyn"
  (GEtaLong CanonicalDyn gU)]

;; #source file ./ott/lang_simple.ott  lines 1705 - 1707 
 [--------------------------------------- "GEtaLongPi"
  (GEtaLong (CanonicalPi x gU gV) gV_^)]

)
(define-judgment-form L 
 
  #:mode (GEtaExpand I O I)
  #:contract (GEtaExpand grr gv gV)

;; #source file ./ott/lang_simple.ott  lines 1713 - 1715 
 [-------------------------------------------------------------- "GEtaExpandAtomic"
  (GEtaExpand grr (CanonicalAtomic grr) (CanonicalAtomic gRR))]

;; #source file ./ott/lang_simple.ott  lines 1716 - 1718 
 [----------------------------------------------------- "GEtaExpandDyn"
  (GEtaExpand grr (CanonicalAtomic grr) CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 1720 - 1724 
 [(GEtaExpand  (AtomicSpine  y  SpineEmpty)  gu gU)
  (GEtaExpand (AtomicSpine x (SpineCons ge gu)) gv gV)
  ----------------------------------------------------------------------------- "GEtaExpandPi"
  (GEtaExpand (AtomicSpine x ge)  (CanonicalLam y gv)  (CanonicalPi y gU gV))]

)
(define-judgment-form L 
 
  #:mode (GEtaExpandC I O I)
  #:contract (GEtaExpandC gu gv gV)

;; #source file ./ott/lang_simple.ott  lines 1731 - 1734 
 [(GEtaExpand grr gv gV)
  ------------------------------------------- "GEtaExpandCAtomic"
  (GEtaExpandC (CanonicalAtomic grr) gv gV)]

;; #source file ./ott/lang_simple.ott  lines 1735 - 1738 

;; #source file ./ott/lang_simple.ott  lines 1739 - 1743 
 [ (where   z  ,(gensym)) 
  (GEtaExpandC  (substitute  gu   x   z )  gv  (substitute  gV   x   z ) )
  --------------------------------------------------------------------------------- "GEtaExpandCLamRdxAlpha"
  (GEtaExpandC  (CanonicalLam x gu)   (CanonicalLam z gv)  (CanonicalPi y gU gV))]

;; #source file ./ott/lang_simple.ott  lines 1744 - 1748 
 [(GEtaExpandC gU gU_^ gV_^^)
  (GEtaExpandC gV gV_^ gV_^^)
  --------------------------------------------------------------------- "GEtaExpandCPi"
  (GEtaExpandC (CanonicalPi x gU gV) (CanonicalPi x gU_^ gV_^) gV_^^)]

;; #source file ./ott/lang_simple.ott  lines 1750 - 1752 
 [-------------------------------------------- "GEtaExpandCDyn"
  (GEtaExpandC CanonicalDyn CanonicalDyn gV)]

;; #source file ./ott/lang_simple.ott  lines 1753 - 1755 
 [---------------------------------- "GEtaExpandCDynType"
  (GEtaExpandC gu gu CanonicalDyn)]

)
(define-judgment-form L 
 
  #:mode (GNormSynth I I O O)
  #:contract (GNormSynth Gamma tt gv gU)

;; #source file ./ott/lang_simple.ott  lines 1776 - 1780 
 [
  (GradualSetNorm Gamma gV TT)
  (GNormCheck Gamma gv tt gV)
  -------------------------------------------- "GNormSynthAnn"
  (GNormSynth Gamma  (TermAnn tt TT)  gv gV)]

;; #source file ./ott/lang_simple.ott  lines 1781 - 1784 
 [
   (side-condition ,(> (term  i ) 0)) 
  ------------------------------------------------------------------------------------------------------------ "GNormSynthSet"
  (GNormSynth Gamma (TermSet i) (CanonicalAtomic (AtomicSet i)) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 1786 - 1792 
 [
   (side-condition ,(not (hash-has-key? currently-defined-vars (term  x )) )) 
    
  (GVarLook x gU Gamma)
  (GEtaExpand  (AtomicSpine  x  SpineEmpty)  gv gU)
  -------------------------------------- "GNormSynthVar"
  (GNormSynth Gamma x gv gU)]

;; #source file ./ott/lang_simple.ott  lines 1793 - 1796 
 [
  
   (where (ENTTriple  es   gu   gU ) ,(and (hash-has-key? currently-defined-vars (term  x ) ) (hash-ref currently-defined-vars (term  x )) )) 
  -------------------------------------- "GNormSynthVarLook"
  (GNormSynth Gamma x gu gU)]

;; #source file ./ott/lang_simple.ott  lines 1800 - 1804 
 [
     (GNormSynth Gamma (TermVar ss) gu gV)   (GEtaExpandC gu gu_^  (error "SIMPLEPI") )    (Domain gV gV_11)    (GNormCheck Gamma gv tt gV_11) 
    (BodySub gV_11 gv gu_^ gv_^)   (CodSub gv gV gV_22)    (GEtaExpandC gv_^ gv_^^ gV_22) 
  ---------------------------------------------------------- "GNormSynthApp"
  (GNormSynth Gamma (TermApp (TermVar ss) tt) gv_^^ gV_22)]

)
(define-judgment-form L 
 
  #:mode (GNormCheck I O I I)
  #:contract (GNormCheck Gamma gv tt gU)

;; #source file ./ott/lang_simple.ott  lines 1812 - 1816 
 [
  (GNormSynth Gamma tt gu gV)
  (GNormSynthCheck Gamma gu_^ tt gu gV gU)
  ------------------------------- "GNormCheckSynthOpt"
  (GNormCheck Gamma gu_^ tt gU)]

;; #source file ./ott/lang_simple.ott  lines 1817 - 1823 

;; #source file ./ott/lang_simple.ott  lines 1825 - 1831 

;; #source file ./ott/lang_simple.ott  lines 1832 - 1837 

;; #source file ./ott/lang_simple.ott  lines 1839 - 1847 
 [
  (ConsistentSet gV)
  (GNormCheck Gamma gU_11 (TermVar SS) gV)
    
  (GNormCheck (EnvExt x gU_11 Gamma) gU_22 TT gV)
  ------------------------------------------------------------------------------ "GNormCheckPi"
  (GNormCheck Gamma (CanonicalPi x gU_11 gU_22) (TermPi x (TermVar SS) TT) gV)]

;; #source file ./ott/lang_simple.ott  lines 1848 - 1852 

;; #source file ./ott/lang_simple.ott  lines 1853 - 1858 
 [
   (where   z  ,(gensym)) 
    
  (GNormCheck (EnvExt z gU Gamma) gv  (substitute  tt   x   z )   (substitute  gV   y   z ) )
  --------------------------------------------------------------------------------- "GNormCheckLamPiRdxAlpha"
  (GNormCheck Gamma  (CanonicalLam z gv)   (TermLam x tt)  (CanonicalPi y gU gV))]

;; #source file ./ott/lang_simple.ott  lines 1859 - 1863 
 [
    
  (GNormCheck (EnvExt x CanonicalDyn Gamma) gv tt CanonicalDyn)
  ------------------------------------------------------------------------ "GNormCheckLamDyn"
  (GNormCheck Gamma  (CanonicalLam x gv)   (TermLam x tt)  CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 1864 - 1867 
 [
  (GradualSet Gamma gU)
  -------------------------------------------- "GNormCheckDyn"
  (GNormCheck Gamma CanonicalDyn TermDyn gU)]

;; #source file ./ott/lang_simple.ott  lines 1869 - 1874 
 [
  (GNormSynth Gamma ett gv gV)
  (Meet gU gV gV)
  ------------------------------------------ "GNormCheckEvUp"
  (GNormCheck Gamma gv (TermEp ep ett) gU)]

;; #source file ./ott/lang_simple.ott  lines 1875 - 1881 
 [
  (GNormSynth Gamma ett gv gV)
  (Meet gU gV gU_^)
   (side-condition ,(not (alpha-equivalent? L (term  gU_^ ) (term  gV )))) 
  ---------------------------------------------------- "GNormCheckEvDown"
  (GNormCheck Gamma CanonicalDyn (TermEp ep ett) gU)]

;; #source file ./ott/lang_simple.ott  lines 1883 - 1885 
 [
  -------------------------------------------- "GNormCheckDynAnn"
  (GNormCheck Gamma CanonicalDyn TermDyn gU)]

)
(define-judgment-form L 
 
  #:mode (GNormSynthCheck I O I I I I)
  #:contract (GNormSynthCheck Gamma gu tt gv gV gU)

;; #source file ./ott/lang_simple.ott  lines 1891 - 1894 
 [
   (side-condition ,(and (< 0 (term  i )) (< (term  i ) (term  j )))) 
  -------------------------------------------------------------------------------------------------- "GNormSynthCheckLevel"
  (GNormSynthCheck Gamma gu tt gu (CanonicalAtomic (AtomicSet i)) (CanonicalAtomic (AtomicSet j)))]

;; #source file ./ott/lang_simple.ott  lines 1895 - 1899 
 [
  (Meet gU gV gV_^)
   (where  gu  ,(if (alpha-equivalent? (term  gV ) (term  gV_^ )) (term  gv ) (term  CanonicalDyn ))) 
  ---------------------------------------- "GNormSynthCheckConsistent"
  (GNormSynthCheck Gamma gu tt gv gV gU)]

)
(define-judgment-form L 
 
  #:mode (GElabSynthCheck I O I I I I)
  #:contract (GElabSynthCheck Gamma es tt et gV gU)

;; #source file ./ott/lang_simple.ott  lines 1905 - 1908 
 [
  
   (side-condition ,(and (< 0 (term  i )) (< (term  i ) (term  j )))) 
  -------------------------------------------------------------------------------------------------- "GElabSynthCheckLevel"
  (GElabSynthCheck Gamma es tt es (CanonicalAtomic (AtomicSet i)) (CanonicalAtomic (AtomicSet j)))]

;; #source file ./ott/lang_simple.ott  lines 1912 - 1916 
 [
  
  (Meet gU gV gV_^)
  ------------------------------------------------------------------------- "GElabSynthCheckConsistent"
  (GElabSynthCheck Gamma (TermEp (EvidenceEv Gamma gV_^) es) tt es gV gU)]

)
(define-judgment-form L 
 
  #:mode (GradualNESynthCheck I O O I I I I I)
  #:contract (GradualNESynthCheck Gamma gu es gs gv et gV gU)

;; #source file ./ott/lang_simple.ott  lines 1922 - 1925 
 [
  
   (side-condition ,(and (< 0 (term  i )) (< (term  i ) (term  j )))) 
  ------------------------------------------------------------------------------------------------------------ "GradualNESynthCheckLevel"
  (GradualNESynthCheck Gamma gv es gs gv es (CanonicalAtomic (AtomicSet i)) (CanonicalAtomic (AtomicSet j)))]

;; #source file ./ott/lang_simple.ott  lines 1931 - 1935 
 [
  
  (Meet gU gV gV_^)
   (where  gu  ,(if (alpha-equivalent? (term  gV ) (term  gV_^ )) (term  gv ) (term  CanonicalDyn ))) 
  ----------------------------------------------------------------------------------- "GradualNESynthCheckConsistent"
  (GradualNESynthCheck Gamma gu (TermEp (EvidenceEv Gamma gV_^) es) gs gv es gV gU)]

)
(define-judgment-form L 
 
  #:mode (GElabSynth I I O O)
  #:contract (GElabSynth Gamma gt et gU)

;; #source file ./ott/lang_simple.ott  lines 1941 - 1945 
 [
  
  (GradualSetNorm Gamma gV gT)
  (GElabCheck Gamma et gt gV)
  -------------------------------------------- "GElabSynthAnn"
  (GElabSynth Gamma  (TermAnn gt gT)  et gV)]

;; #source file ./ott/lang_simple.ott  lines 1946 - 1949 
 [
   (side-condition ,(> (term  i ) 0)) 
  ---------------------------------------------------------------------------------------- "GElabSynthSet"
  (GElabSynth Gamma (TermSet i) (TermSet i) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 1951 - 1956 
 [
   (side-condition ,(not (hash-has-key? currently-defined-vars (term  x )) )) 
    
  (GVarLook x gU Gamma)
  ----------------------------------------------- "GElabSynthVar"
  (GElabSynth Gamma x x gU)]

;; #source file ./ott/lang_simple.ott  lines 1957 - 1960 
 [
  
   (where (ENTTriple  es   gu   gU ) ,(and (hash-has-key? currently-defined-vars (term  x ) ) (hash-ref currently-defined-vars (term  x )) )) 
  -------------------------------------- "GElabSynthVarLook"
  (GElabSynth Gamma x es gU)]

;; #source file ./ott/lang_simple.ott  lines 1964 - 1970 
 [
  
  (GElabSynth Gamma gs es gV)
  (Domain gV gV_11)
  (GradualNECheck Gamma gv et gt gV_11)
  (CodSub gv gV gV_22)
  ---------------------------------------------------------- "GElabSynthApp"
  (GElabSynth Gamma (TermApp gs gt) (TermApp es et) gV_22)]

)
(define-judgment-form L 
 
  #:mode (GElabCheck I O I I)
  #:contract (GElabCheck Gamma et gt gU)

;; #source file ./ott/lang_simple.ott  lines 1988 - 1992 
 [
  
  (GElabSynth Gamma gt et gV)
  (GElabSynthCheck Gamma es gt et gV gU)
  ----------------------------- "GElabCheckSynthOpt"
  (GElabCheck Gamma es gt gU)]

;; #source file ./ott/lang_simple.ott  lines 1993 - 1999 

;; #source file ./ott/lang_simple.ott  lines 2000 - 2005 

;; #source file ./ott/lang_simple.ott  lines 2015 - 2023 
 [
  (ConsistentSet gV)
  (GradualNECheck Gamma gU eS gS gV)
    
  (GElabCheck (EnvExt x gU Gamma) eT gT gV)
  --------------------------------------------------------- "GElabCheckPi"
  (GElabCheck Gamma (TermPi x eS eT) (TermPi x gS gT) gV)]

;; #source file ./ott/lang_simple.ott  lines 2024 - 2028 

;; #source file ./ott/lang_simple.ott  lines 2029 - 2034 
 [
   (where   z  ,(gensym)) 
    
  (GElabCheck (EnvExt z gU Gamma) et  (substitute  gt   x   z )   (substitute  gV   y   z ) )
  ---------------------------------------------------------------------------- "GElabCheckLamPiRdxAlpha"
  (GElabCheck Gamma  (TermLam z et)   (TermLam x gt)  (CanonicalPi y gU gV))]

;; #source file ./ott/lang_simple.ott  lines 2035 - 2039 
 [
    
  (GElabCheck (EnvExt x CanonicalDyn Gamma) et gt CanonicalDyn)
  ------------------------------------------------------------------- "GElabCheckLamDyn"
  (GElabCheck Gamma  (TermLam x et)   (TermLam x gt)  CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 2040 - 2043 
 [
  (GradualSet Gamma gU)
  ---------------------------------------------------------------------- "GElabCheckDyn"
  (GElabCheck Gamma (TermEp (EvidenceEv Gamma gU) TermDyn) TermDyn gU)]

)
(define-judgment-form L 
 
  #:mode (GradualNESynth I I O O O)
  #:contract (GradualNESynth Gamma gt et gu gU)

;; #source file ./ott/lang_simple.ott  lines 2057 - 2061 
 [
  
  (GradualSetNorm Gamma gV gT)
  (GradualNECheck Gamma gu et gt gV)
  --------------------------------------------------- "GradualNESynthAnn"
  (GradualNESynth Gamma  (TermAnn gt gT)  et gu gV)]

;; #source file ./ott/lang_simple.ott  lines 2062 - 2065 
 [
   (side-condition ,(> (term  i ) 0)) 
  ---------------------------------------------------------------------------------------------------------------------------- "GradualNESynthSet"
  (GradualNESynth Gamma (TermSet i) (TermSet i) (CanonicalAtomic (AtomicSet i)) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 2067 - 2073 
 [
   (side-condition ,(not (hash-has-key? currently-defined-vars (term  x )) )) 
    
  (GVarLook x gU Gamma)
  (GEtaExpand  (AtomicSpine  x  SpineEmpty)  gv gU)
  ------------------------------------------------------ "GradualNESynthVar"
  (GradualNESynth Gamma x x gv gU)]

;; #source file ./ott/lang_simple.ott  lines 2074 - 2077 
 [
  
   (where (ENTTriple  es   gu   gU ) ,(and (hash-has-key? currently-defined-vars (term  x ) ) (hash-ref currently-defined-vars (term  x )) )) 
  --------------------------------------------- "GradualNESynthVarLook"
  (GradualNESynth Gamma x es gu gU)]

;; #source file ./ott/lang_simple.ott  lines 2081 - 2090 
 [
  
  (GradualNESynth Gamma gs es gu gV)
  (GEtaExpandC gu gu_^  (error "SIMPLEPI") )
  (Domain gV gV_11)
  (GradualNECheck Gamma gv et gt gV_11)
  (BodySub gV_11 gv gu_^ gv_^)
  (CodSub gv gV gV_22)
  (GEtaExpandC gv_^ gv_^^ gV_22)
  -------------------------------------------------------------------- "GradualNESynthApp"
  (GradualNESynth Gamma (TermApp gs gt) (TermApp es et) gv_^^ gV_22)]

)
(define-judgment-form L 
 
  #:mode (GradualNECheck I O O I I)
  #:contract (GradualNECheck Gamma gu et gt gU)

;; #source file ./ott/lang_simple.ott  lines 2109 - 2113 
 [
  (GradualNESynth Gamma gt et gu gV)
  (GradualNESynthCheck Gamma gu_^ et_^ gt gu et gV gU)
  ---------------------------------------- "GradualNECheckSynthOpt"
  (GradualNECheck Gamma gu_^ et_^ gt gU)]

;; #source file ./ott/lang_simple.ott  lines 2114 - 2121 

;; #source file ./ott/lang_simple.ott  lines 2122 - 2127 

;; #source file ./ott/lang_simple.ott  lines 2137 - 2145 
 [
  (ConsistentSet gV)
  (GradualNECheck Gamma gU_11 eS gS gV)
    
  (GradualNECheck (EnvExt x gU_11 Gamma) gU_22 eT gT gV)
  ----------------------------------------------------------------------------------------- "GradualNECheckPi"
  (GradualNECheck Gamma (CanonicalPi x gU_11 gU_22) (TermPi x eS eT) (TermPi x gS gT) gV)]

;; #source file ./ott/lang_simple.ott  lines 2146 - 2150 

;; #source file ./ott/lang_simple.ott  lines 2151 - 2156 
 [
   (where   z  ,(gensym)) 
    
  (GradualNECheck (EnvExt z gU Gamma) gu et  (substitute  gt   x   z )   (substitute  gV   y   z ) )
  ------------------------------------------------------------------------------------------------------ "GradualNECheckLamPiRdxAlpha"
  (GradualNECheck Gamma  (CanonicalLam z gu)   (TermLam z et)   (TermLam x gt)  (CanonicalPi y gU gV))]

;; #source file ./ott/lang_simple.ott  lines 2157 - 2161 
 [
    
  (GradualNECheck (EnvExt x CanonicalDyn Gamma) gu et gt CanonicalDyn)
  --------------------------------------------------------------------------------------------- "GradualNECheckLamDyn"
  (GradualNECheck Gamma  (CanonicalLam x gu)   (TermLam x et)   (TermLam x gt)  CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 2162 - 2165 
 [
  (GradualSet Gamma gU)
  --------------------------------------------------------------------------------------- "GradualNECheckDyn"
  (GradualNECheck Gamma CanonicalDyn (TermEp (EvidenceEv Gamma gU) TermDyn) TermDyn gU)]
)
;; #source file ./ott/lang_simple.ott  lines 2173 - 2173 
#| 

;;; definitions 

(define-judgment-form
  L
  #:mode (EvType I I I)
  #:contract (EvType Gamma et gU)

;; #source file ./ott/lang_simple.ott  lines 2186 - 2190 
 [
    
  (GVarLook x gU Gamma)
  ------------------------------- "EvTypeVar"
  (EvType Gamma x gU)]

;; #source file ./ott/lang_simple.ott  lines 2194 - 2199 
 [
  
  (EvType Gamma es gV)
  (EvType Gamma et  (error "TODO") )
  (EvCod et gV gV_22)
  -------------------------------------- "EvTypeApp"
  (EvType Gamma (TermApp es et) gV_22)]

;; #source file ./ott/lang_simple.ott  lines 2205 - 2211 
 [
  
  (ConsistentSet gV)
  (GNormCheck Gamma gU eS gV)
    
  (EvType (EnvExt x gU Gamma) eT gV)
  ------------------------------------ "EvTypePi"
  (EvType Gamma (TermPi x eS eT) gV)]

;; #source file ./ott/lang_simple.ott  lines 2212 - 2215 
 [
   (side-condition ,(> (term  i ) 0)) 
  ------------------------------------------------------------------------ "EvTypeSet"
  (EvType Gamma (TermSet i) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 2217 - 2221 
 [
  (EvType Gamma et gU)
  (EvConsistent ep gU gV)
  ---------------------------------- "EvTypeEv"
  (EvType Gamma (TermEp ep et) gV)]

;; #source file ./ott/lang_simple.ott  lines 2222 - 2226 
 [
  (EvType Gamma et (CanonicalAtomic (AtomicSet i)))
   (side-condition ,(and (< 0 (term  i )) (< (term  i ) (term  j )))) 
  --------------------------------------------------- "EvTypeLevel"
  (EvType Gamma et (CanonicalAtomic (AtomicSet j)))]

;; #source file ./ott/lang_simple.ott  lines 2231 - 2235 
 [
    
  (EvType (EnvExt x gU Gamma) et gV)
  ------------------------------------------------------- "EvTypeLamPi"
  (EvType Gamma  (TermLam x et)  (CanonicalPi x gU gV))]

;; #source file ./ott/lang_simple.ott  lines 2237 - 2241 
 [
    
  (EvType (EnvExt x CanonicalDyn Gamma) et CanonicalDyn)
  ---------------------------------------------- "EvTypeLamDyn"
  (EvType Gamma  (TermLam x et)  CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 2242 - 2246 
 [
  (GradualSet Gamma gU)
  (EvConsistent ep gU gU)
  --------------------------------------- "EvTypeDyn"
  (EvType Gamma (TermEp ep TermDyn) gU)]
)
;; #source file ./ott/lang_simple.ott  lines 2249 - 2249 
|# 

;;; definitions 

(define-judgment-form
  L
  #:mode (SimpleStep I O)
  #:contract (SimpleStep t_11 t_22)

;; #source file ./ott/lang_simple.ott  lines 2263 - 2265 
 [
  ---------------------------------- "SimpleStepAnn"
  (SimpleStep  (TermAnn sv T)  sv)]

;; #source file ./ott/lang_simple.ott  lines 2266 - 2268 
 [
  
  ------------------------------------------------------------------- "SimpleStepApp"
  (SimpleStep (TermApp  (TermLam x t)  sv)  (esubst  t   x   sv ) )]

;; #source file ./ott/lang_simple.ott  lines 2270 - 2273 
 [
  (SimpleStep (TermVar s) t)
  ------------------------------------------------------------------ "SimpleStepContext"
  (SimpleStep  (in-hole  SC   (TermVar s) )   (in-hole  SC   t ) )]

)
(define-judgment-form L 
 
  #:mode (Step I O)
  #:contract (Step es et)

;; #source file ./ott/lang_simple.ott  lines 2281 - 2284 
 [
  (Meet gU_11 gU_22 gU_33)
  ------------------------------------------------------------------------------------------------------------------------------------------- "StepAscr"
  (Step (TermEp  (EvidenceEv EnvEmpty  gU_11 )   (TermEp  (EvidenceEv EnvEmpty  gU_22 )  rv) ) (TermEp  (EvidenceEv EnvEmpty  gU_33 )  rv))]

;; #source file ./ott/lang_simple.ott  lines 2287 - 2291 
 [
   (side-condition ,(empty? (judgment-holds (Meet  gU_11   gU_22  ep_9999) ep_9999))) 
   (side-condition ,(error 'RuntimeError "Can't cast:\n    ~a\nto\n   ~a\nin term ~a" (printEvType (term  ep_11 )) (printEvType (term  ep_22 )) (pt (term  rv )) )) 
  --------------------------------------------------------------------------------------------------------- "StepAscrFail"
  (Step (TermEp  (EvidenceEv EnvEmpty  gU_11 )   (TermEp  (EvidenceEv EnvEmpty  gU_22 )  rv) ) TermError)]

;; #source file ./ott/lang_simple.ott  lines 2295 - 2297 
 [
  --------------------------------------------------------------- "StepApp"
  (Step (TermApp  (TermLam x et)  ev)  (esubst  et   x   ev ) )]

;; #source file ./ott/lang_simple.ott  lines 2304 - 2307 
 [
    (Domain gU_11 gU_33)   (Meet gU_22 gU_33 gU_44)    (EvCod rv gU_11 gU_55) 
  ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- "StepAppEv"
  (Step (TermApp  (TermEp  (EvidenceEv EnvEmpty  gU_11 )   (TermLam x et) )   (TermEp  (EvidenceEv EnvEmpty  gU_22 )  rv) ) (TermEp  (EvidenceEv EnvEmpty  gU_55 )    (esubst  et   x   (TermEp  (EvidenceEv EnvEmpty  gU_44 )  rv) )  ))]

;; #source file ./ott/lang_simple.ott  lines 2310 - 2313 
 [
  (EvCod ev gU_11 gU_22)
  ------------------------------------------------------------------------------------------------------------------------- "StepAppDyn"
  (Step (TermApp  (TermEp  (EvidenceEv EnvEmpty  gU_11 )  TermDyn)  ev) (TermEp  (EvidenceEv EnvEmpty  gU_22 )  TermDyn))]

;; #source file ./ott/lang_simple.ott  lines 2314 - 2318 
 [
  
   (Domain gU_11 gU_22)   (EvCod rv gU_11 gU_33) 
  (Step (TermApp  (TermEp  (EvidenceEv EnvEmpty  gU_11 )   (TermLam x et) )   (TermEp  (EvidenceEv EnvEmpty  CanonicalDyn )  rv) ) es)
  ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- "StepAppEvRaw"
  (Step (TermApp  (TermEp  (EvidenceEv EnvEmpty  gU_11 )   (TermLam x et) )  rv) (TermEp  (EvidenceEv EnvEmpty  gU_33 )    (esubst  et   x   (TermEp  (EvidenceEv EnvEmpty  gU_22 )  rv) )  ))]

;; #source file ./ott/lang_simple.ott  lines 2320 - 2324 
 [
  
   (side-condition ,(empty? (judgment-holds (Meet    (error "TODO")     gU_22  ep_9999) ep_9999))) 
   (side-condition ,(error 'RuntimeError "Can't cast:\n    ~a\nto\n   ~a\nin term ~a" (printEvType (term  ep_33 )) (printEvType (term  ep_22 )) (pt (term   (TermApp ru rv)  )) )) 
  ------------------------------------------------------------------------------------------------------------------------ "StepAppFailTrans"
  (Step (TermApp  (TermEp  (EvidenceEv EnvEmpty  gU_11 )  ru)   (TermEp  (EvidenceEv EnvEmpty  gU_22 )  rv) ) TermError)]

;; #source file ./ott/lang_simple.ott  lines 2330 - 2334 
 [
  
   (side-condition ,(empty? (judgment-holds (Domain  gU  gV_9999) gV_9999))) 
   (side-condition ,(error 'RuntimeError "Can't cast:\n    ~a\nto\n   ~a\nin term ~a" (printEvType (term  ep_11 )) (printEvType (term   (EvidenceEv EnvEmpty  (CanonicalPi x CanonicalDyn CanonicalDyn) )  )) (pt (term   (TermApp rv ev)  )) )) 
  -------------------------------------------------------------------------- "StepAppFailDom"
  (Step (TermApp  (TermEp  (EvidenceEv EnvEmpty  gU )  rv)  ev) TermError)]

;; #source file ./ott/lang_simple.ott  lines 2347 - 2351 
 [
  (Step es et)
   (side-condition ,(not (or (alpha-equivalent? L (term  es ) (term TermError)) (alpha-equivalent? L (term  et ) (term TermError)) ))) 
  ---------------------------------------------------- "StepContext"
  (Step  (in-hole  EC   es )   (in-hole  EC   et ) )]

;; #source file ./ott/lang_simple.ott  lines 2352 - 2355 
 [
  (Step es TermError)
  ---------------------------------------- "StepContextErr"
  (Step  (in-hole  EC   es )  TermError)]

)
(define-judgment-form L 
 
  #:mode (EvCod I I O)
  #:contract (EvCod et gU_11 gU_22)

;; #source file ./ott/lang_simple.ott  lines 2396 - 2400 
 [
  (GNormCheck EnvEmpty gu et  (error "TODO") )
  (CodSub gu gU gU_22)
  --------------------- "EvCodSub"
  (EvCod et gU gU_22)]
)
;; #source file ./ott/lang_simple.ott  lines 2416 - 2430 
(define-judgment-form
  L
  #:mode (ElabNormType I I O)
  [ (GradualNESynth Gamma gs es gu gU)
  ---------------------------------
  (ElabNormType Gamma gs (ENTTriple es gu gU))]

)

