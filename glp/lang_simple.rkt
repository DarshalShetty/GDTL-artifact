;; #source  
;;; generated by Ott 0.28 from: ./ott/lang_simple.ott

#lang racket
(require redex/reduction-semantics)

;; #source file ./ott/lang_simple.ott  lines 4 - 6 
;; #source file ./ott/lang_simple.ott  lines 8 - 13 
(provide (all-defined-out))

(define currently-defined-vars 
  (make-hasheq))

;; #source file ./ott/lang_simple.ott  lines 15 - 83 
;; #source file ./ott/lang_simple.ott  lines 88 - 90 
;; #source file ./ott/lang_simple.ott  lines 93 - 93 
;; #source file ./ott/lang_simple.ott  lines 99 - 107 and file ./ott/lang_simple.ott  lines 112 - 137 and file ./ott/lang_simple.ott  lines 142 - 151 and file ./ott/lang_simple.ott  lines 153 - 158 and file ./ott/lang_simple.ott  lines 160 - 165 and file ./ott/lang_simple.ott  lines 168 - 173 and file ./ott/lang_simple.ott  lines 175 - 177 and file ./ott/lang_simple.ott  lines 182 - 203 and file ./ott/lang_simple.ott  lines 208 - 218 and file ./ott/lang_simple.ott  lines 221 - 226 and file ./ott/lang_simple.ott  lines 228 - 231 and file ./ott/lang_simple.ott  lines 239 - 241 and file ./ott/lang_simple.ott  lines 249 - 260 and file ./ott/lang_simple.ott  lines 264 - 270 and file ./ott/lang_simple.ott  lines 273 - 278 and file ./ott/lang_simple.ott  lines 280 - 288 and file ./ott/lang_simple.ott  lines 292 - 294 and file ./ott/lang_simple.ott  lines 305 - 311 and file ./ott/lang_simple.ott  lines 313 - 319 and file ./ott/lang_simple.ott  lines 365 - 368 and file ./ott/lang_simple.ott  lines 370 - 374 and file ./ott/lang_simple.ott  lines 376 - 380 and file ./ott/lang_simple.ott  lines 497 - 502 and file ./ott/lang_simple.ott  lines 505 - 507 and file ./ott/lang_simple.ott  lines 509 - 511 and file ./ott/lang_simple.ott  lines 513 - 514 
(define-language L  

(level i j ::= natural)

;; #source file ./ott/lang_simple.ott  lines 208 - 218 
  (canonical gu gv gU gV ::= 
    (CanonicalLam var gu)
    CanonicalDyn
    (CanonicalAtomic grr)
    (CanonicalPi var gU gV))
  ;grammar_pp, 2817: and 
;; #source file ./ott/lang_simple.ott  lines 221 - 226 
  (atomic grr gRR ::= 
    (AtomicSpine var ge)
    (AtomicSet i))
  ;grammar_pp, 2817: and 
;; #source file ./ott/lang_simple.ott  lines 228 - 231 
  (spine ge ::= 
    SpineEmpty
    (SpineCons ge gu))

;; #source file ./ott/lang_simple.ott  lines 376 - 380 
  (Env ::= 
    EnvEmpty
    (EnvExt var gU Env)
    (Envconcat Env_11 Env_22))

;; #source file ./ott/lang_simple.ott  lines 239 - 241 
  (epsilon ep ::= 
    (EvidenceEv Gamma gU gV))

;; #source file ./ott/lang_simple.ott  lines 112 - 137 
  (term ss tt ett SS TT ::= 
    (TermLam var tt)
    (TermApp ss tt)
    var
    (TermSet i)
    (TermPi var SS TT)
    (TermAnn tt TT)
    (TermEp ep ss)
    TermDyn
    TermError)

(iinf ::= number)

;; #source file ./ott/lang_simple.ott  lines 513 - 514 
  (ent ::= 
    (ENTTriple es gu gU))

;; #source file ./ott/lang_simple.ott  lines 305 - 311 
  (simpleContext SC ::= 
    (TermPi x hole T)
    (TermPi x sV hole)
    (TermApp hole t)
    (TermApp sv hole)
    (TermAnn hole T))

;; #source file ./ott/lang_simple.ott  lines 509 - 511 
  (iinfs jinfs ::= 
    (UniverseMultiSetSingleton iinf)
    (UniverseMultiSetSum iinfs jinfs))

;; #source file ./ott/lang_simple.ott  lines 505 - 507 
  (is js ::= 
    (LevelMultiSetSingleton i)
    (LevelMultiSetSum is js))

;; #source file ./ott/lang_simple.ott  lines 292 - 294 
  (dummyeu dummyev dummyeueU dummyeueV ::= 
    (DummyEvidenceValueEv ep rv)
    (DummyEvidenceValueRaw rv))

;; #source file ./ott/lang_simple.ott  lines 313 - 319 
  (evalContext EC ::= 
    (TermPi x hole eT)
    (TermApp hole et)
    (TermApp ev hole)
    (TermEp ep hole))

;; #source file ./ott/lang_simple.ott  lines 182 - 203 
  (gs gt gS gT ::= 
    (TermLam var gt)
    (TermApp gs gt)
    var
    (TermSet i)
    (TermPi var gS gT)
    (TermAnn gt gT)
    TermDyn)

;; #source file ./ott/lang_simple.ott  lines 280 - 288 
  (eu ev eU eV ::= 
    (TermEp ep rv)
    (TermPi var eU eT)
    (TermLam var et)
    (TermSet i)
    TermDyn)

;; #source file ./ott/lang_simple.ott  lines 370 - 374 
  (Gamma ::= 
    EnvEmpty
    (EnvExt var gU Gamma)
    (Envconcat Gamma_11 Gamma_22))

;; #source file ./ott/lang_simple.ott  lines 264 - 270 
  (ru rv rU rV ::= 
    (TermPi var eU eV)
    (TermLam var et)
    (TermSet i)
    TermDyn)

;; #source file ./ott/lang_simple.ott  lines 168 - 173 
  (rr RR ::= 
    (AtomicSpine var e)
    (AtomicSet i))

;; #source file ./ott/lang_simple.ott  lines 175 - 177 
  (e ::= 
    SpineEmpty
    (SpineCons e u))

;; #source file ./ott/lang_simple.ott  lines 273 - 278 
  (simpleValue su sv sU sV ::= 
    (TermPi var sU sV)
    (TermLam var ta)
    (TermSet i))

;; #source file ./ott/lang_simple.ott  lines 365 - 368 
  (SGamma ::= 
    EnvEmpty
    (EnvExt var U SGamma)
    (Envconcat SGamma_11 SGamma_22))

;; #source file ./ott/lang_simple.ott  lines 160 - 165 
  (u v U V ::= 
    (CanonicalLam var u)
    (CanonicalAtomic rr)
    (CanonicalPi var U V))

;; #source file ./ott/lang_simple.ott  lines 249 - 260 
  (es et eS eT ::= 
    (TermPi var eS eT)
    (TermLam var et)
    var
    (TermApp es et)
    TermDyn
    (TermSet i)
    (TermEp ep es)
    TermError)

;; #source file ./ott/lang_simple.ott  lines 153 - 158 
  (sa ta Sa Ta ::= 
    (TermLam var ta)
    (TermApp sa ta)
    var
    (TermPi var Sa Ta)
    (TermSet i))

;; #source file ./ott/lang_simple.ott  lines 142 - 151 
  (s t S T ::= 
    (TermLam var t)
    (TermApp s t)
    var
    (TermPi var S T)
    (TermSet i)
    (TermAnn t T))
   (var x y z X Y Z ::= variable-not-otherwise-mentioned)

    #:binding-forms

    (TermLam x tt #:refers-to (shadow x))
    (TermPi x SS TT #:refers-to (shadow x))
    (StaticTermLam x t #:refers-to (shadow x))
    (StaticTermPi x S T #:refers-to (shadow x))
    (StaticTermNoAnnLam x ta #:refers-to (shadow x))
    (StaticTermNoAnnPi x Sa Ta #:refers-to (shadow x))
    (StaticCanonicalLam x u #:refers-to (shadow x))

    (GradualTermLam x gt #:refers-to (shadow x))
    (GradualTermPi x gS gT #:refers-to (shadow x))
    (CanonicalLam x gu #:refers-to (shadow x))
    (CanonicalPi x gU gV #:refers-to (shadow x))

    (EvidenceTermPi x eS eT #:refers-to (shadow x))
    (EvidenceTermLam x et #:refers-to (shadow x))
    (RawValueLam x et #:refers-to (shadow x))
    (SimpleValuePi x sU sV #:refers-to (shadow x))
    (SimpleValueLam x ta)
    (EvidenceValuePi x eU eT #:refers-to (shadow x))
    (EvidenceValueLam x et #:refers-to (shadow x))

)

;;;; subrules 
;; #source file ./ott/lang_simple.ott  lines 527 - 527 and file ./ott/lang_simple.ott  lines 528 - 528 and file ./ott/lang_simple.ott  lines 531 - 531 and file ./ott/lang_simple.ott  lines 532 - 532 and file ./ott/lang_simple.ott  lines 533 - 533 and file ./ott/lang_simple.ott  lines 534 - 534 and file ./ott/lang_simple.ott  lines 535 - 535 and file ./ott/lang_simple.ott  lines 537 - 537 and file ./ott/lang_simple.ott  lines 538 - 538 and file ./ott/lang_simple.ott  lines 539 - 539 and file ./ott/lang_simple.ott  lines 540 - 540 and file ./ott/lang_simple.ott  lines 541 - 541 and file ./ott/lang_simple.ott  lines 543 - 543 and file ./ott/lang_simple.ott  lines 544 - 544 and file ./ott/lang_simple.ott  lines 545 - 545 and file ./ott/lang_simple.ott  lines 548 - 548 
;; #source file ./ott/lang_simple.ott  lines 559 - 570 
;; #source file ./ott/lang_simple.ott  lines 572 - 657 

(define-metafunction L 
  succ : i -> i
  [(succ i) ,(+ (term i) 1)])
  
  (define-metafunction L 
  pred : i -> i
  [(pred i) ,(- (term i) 1)])

(define-metafunction L 
  esubst : et var et -> et 
  [(esubst x_old x_old et_new) et_new ]
  [(esubst x_old y et_new) y ]
  [(esubst (TermPi y eS eT) x_old et_new) 
    (TermPi z (esubst eS x_old et_new) (esubst (substitute eT x z) x_old et_new ))
    (where   z  ,(gensym)) ] 
  [(esubst (TermLam y es) x_old et_new) 
    (TermLam z (esubst (substitute es x z) x_old et_new ))
    (where   z  ,(gensym)) ]
  [(esubst (TermApp es et)) (TermApp (esubst es x_old et_new) (esubst et x_old et_new))]
  [(esubst (TermEp (EvidenceEv Gamma gU_1 gU_2) es) x_old et_new) (TermEp (EvidenceEv Gamma_1 gU_3 gU_4) (esubst es x_old et_new))
    (judgment-holds (GVarLook x_old gV Gamma))
    (judgment-holds (GradualNormCheck Gamma gu_esnorm es gV))
    (judgment-holds (GradualEnvSub Gamma x_old gV gu_esnorm Gamma_1))
    (judgment-holds (GradualHsub  x_old gV gu_esnorm gU_1 gU_3))
    (judgment-holds (GradualHsub  x_old gV gu_esnorm gU_2 gU_4))]
  ;; TODO get rid of types on ? or add Gamma
  [(esubst es x_old et_new) es] 
)

(define-metafunction L 
 is-check-only : term -> boolean
 [(is-check-only TermDyn) #t]
 [(is-check-only (TermPi x SS TT)) #t]
 [(is-check-only (TermLam x tt)) #t]
 [(is-check-only tt) #f] 
)

(define-metafunction L 
 is-check-pair : term gU -> boolean
 [(is-check-pair TermDyn gU) #t]
 [(is-check-pair (TermPi x SS TT) (CanonicalAtomic (AtomicDyn))) #t]
 [(is-check-pair (TermPi x SS TT) (CanonicalAtomic (AtomicSet i))) #t]
 [(is-check-pair (TermLam x tt) (CanonicalAtomic (AtomicDyn))) #t]
 [(is-check-pair (TermLam x tt) (CanonicalPi y gU gV)) #t]
 [(is-check-pair tt gU) #f] 
)

(define-metafunction L 
 is-set-pair : gU gV -> boolean
 [(is-set-pair (CanonicalAtomic (AtomicSet i)) (CanonicalAtomic (AtomicSet j))) #t (side-condition (< (term i) (term j)))]
 [(is-set-pair gU gV) #f] 
)

(define (pt tm)
  (with-handlers ([exn:fail:redex?
                   (lambda (exn) (format "~a" tm))])
    (pretty-term tm)
    ))

(define pretty-term
    (term-match/single L
    [x (symbol->string (term x))]
    [(TermLam x tt) (string-append "(λ " (pt (term x)) " . " (pt (term tt)) ")")]
    [(TermPi x SS TT) (string-append "(( " (pt (term x)) " : " (pt (term SS)) ") -> " (pt (term TT)) ")")]
    [(TermSet i) (string-append "Set" (number->string (term i)))]
    [(TermApp ss tt) (string-append "(" (pt (term ss)) " " (pt (term tt)) ")")]
    [TermDyn "?"]
    [TermError "⊥"]
    [(TermAnn ss tt) (string-append (pt (term ss)) " :: " (pt (term tt)))]
    [(TermDynAnn gU) (string-append "?" (pt (term gU)))]
    [(TermEp (EvidencePair gU gV) tt) (string-append "〈" (pt (term gU)) ", " (pt (term gV)) "〉" (pt (term tt)))]
    [(CanonicalAtomic grr) (pt (term grr))]
    [(CanonicalLam x gu) (string-append "(λ " (pt (term x)) " . " (pt (term gu)) ")")]
    [(CanonicalPi x gU gV) (string-append "(( " (pt (term x)) " : " (pt (term gU)) ") -> " (pt (term gV)) ")")]
    [(AtomicSet i) (string-append "Set" (number->string (term i)))]
    [CanonicalDyn "?"]
    [(AtomicSpine x ge) (string-append "(" (pt (term x)) " " (pt (term ge)) ")")]
    [SpineEmpty ""]
    [(SpineCons ge gu) (string-append (pt (term ge)) " " (pt (term gu)))]
    
    ))

(define (printEvType ep)
 (term-let ([(EvidenceEv Gamma gU gV) ep]) (pt (term gU))))

;;; definitions 

(define-judgment-form
  L
  #:mode (GVarLook I O I)
  #:contract (GVarLook x gU Gamma)

;; #source file ./ott/lang_simple.ott  lines 666 - 668 
 [
  ------------------------------------- "GVarLookHead"
  (GVarLook x gU (EnvExt x gU Gamma))]

;; #source file ./ott/lang_simple.ott  lines 669 - 673 
 [
   (side-condition ,(not (alpha-equivalent? L (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  (GVarLook x gU Gamma)
  ------------------------------------- "GVarLookTail"
  (GVarLook x gU (EnvExt y gV Gamma))]

)
(define-judgment-form L 
 
  #:mode (GVarFree I I)
  #:contract (GVarFree x Gamma)

;; #source file ./ott/lang_simple.ott  lines 677 - 679 
 [----------------------- "GFreeLookNil"
  (GVarFree x EnvEmpty)]

;; #source file ./ott/lang_simple.ott  lines 680 - 684 
 [
   (side-condition ,(not (alpha-equivalent? L (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  (GVarFree x Gamma)
  ---------------------------------- "GFreeLookCons"
  (GVarFree x (EnvExt y gU Gamma))]
)

;;; definitions 

(define-judgment-form
  L
  #:mode (Universe I I O)
  #:contract (Universe Gamma gu iinf)

;; #source file ./ott/lang_simple.ott  lines 705 - 708 
 [
   (side-condition ,(> (term  i ) 0)) 
  ----------------------------------------------------------------- "UniverseSet"
  (Universe Gamma (CanonicalAtomic (AtomicSet i))   (succ  i )  )]

;; #source file ./ott/lang_simple.ott  lines 709 - 714 
 [
  (GVarLook x gV Gamma)
  (Universe Gamma gV  i )
   (side-condition ,(> (term  i ) 0)) 
  ---------------------------------------------------------------------------------- "UniverseVar"
  (Universe Gamma (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) )   (pred  i )  )]

;; #source file ./ott/lang_simple.ott  lines 715 - 719 
 [
  (Universe Gamma gU  i )
  (Universe (EnvExt x gU Gamma) gV  j )
  ------------------------------------------------------------ "UniversePi"
  (Universe Gamma (CanonicalPi x gU gV)  (max   i     j  ) )]

;; #source file ./ott/lang_simple.ott  lines 720 - 723 
 [
  (Universe Gamma gu  i )
  -------------------------------------------- "UniverseLam"
  (Universe Gamma  (CanonicalLam x gu)   i )]

;; #source file ./ott/lang_simple.ott  lines 724 - 728 
 [
  (Universe Gamma (CanonicalAtomic (AtomicSpine x ge))  i )
  (Universe Gamma gv  j )
  ------------------------------------------------------------------------------------------ "UniverseSpine"
  (Universe Gamma (CanonicalAtomic (AtomicSpine x (SpineCons ge gv)))  (max   i     j  ) )]

;; #source file ./ott/lang_simple.ott  lines 729 - 731 
 [
  ---------------------------------------- "UniverseDyn"
  (Universe Gamma CanonicalDyn  +inf.0 )]

)
(define-judgment-form L 
 
  #:mode (SUniverse I I O)
  #:contract (SUniverse SGamma u i)

;; #source file ./ott/lang_simple.ott  lines 737 - 740 
 [
   (side-condition ,(> (term  i ) 0)) 
  ----------------------------------------------------------------- "SUniverseSet"
  (SUniverse SGamma (CanonicalAtomic (AtomicSet i))  (succ  i ) )]

;; #source file ./ott/lang_simple.ott  lines 741 - 746 
 [
  (GVarLook x V SGamma)
  (SUniverse SGamma V i)
   (side-condition ,(> (term  i ) 0)) 
  ---------------------------------------------------------------------------------- "SUniverseVar"
  (SUniverse SGamma (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) )  (pred  i ) )]

;; #source file ./ott/lang_simple.ott  lines 748 - 752 
 [
  (SUniverse SGamma U i)
  (SUniverse (EnvExt x U SGamma) V j)
  -------------------------------------------------------- "SUniversePi"
  (SUniverse SGamma (CanonicalPi x U V)  (max  i   j ) )]

;; #source file ./ott/lang_simple.ott  lines 753 - 755 
 [
  
  --------------------------------------------- "SUniverseLam"
  (SUniverse SGamma  (CanonicalLam x u)   0 )]

;; #source file ./ott/lang_simple.ott  lines 756 - 760 
 [
  
  (SUniverse SGamma (CanonicalAtomic (AtomicSpine x e)) i)
  (SUniverse SGamma v j)
  -------------------------------------------------------------------------------------- "SUniverseSpine"
  (SUniverse SGamma (CanonicalAtomic (AtomicSpine x (SpineCons e v)))  (max  i   j ) )]
)
;; #source file ./ott/lang_simple.ott  lines 762 - 764 
#|

;;; definitions 

(define-judgment-form
  L
  #:mode (LevelOrder I I I)
  #:contract (LevelOrder Gamma iinf jinf)

)
(define-judgment-form L 
 
  #:mode (TypeOrder I I I)
  #:contract (TypeOrder Gamma gU gV)

)
;; #source file ./ott/lang_simple.ott  lines 782 - 784 
|#

;;; definitions 

(define-judgment-form
  L
  #:mode (StaticHsub I I I I O)
  #:contract (StaticHsub x U u u_^ v)

;; #source file ./ott/lang_simple.ott  lines 800 - 802 
 [
  ------------------------------------------------------------------------------------ "StaticHsubSet"
  (StaticHsub x U u (CanonicalAtomic (AtomicSet i)) (CanonicalAtomic (AtomicSet i)))]

;; #source file ./ott/lang_simple.ott  lines 805 - 810 
 [
  (StaticHsub x U u U U_^)
  (StaticHsub x U u V V_^)
   (side-condition ,(not (alpha-equivalent? L (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  ---------------------------------------------------------------- "StaticHsubPi"
  (StaticHsub x U u (CanonicalPi y U V) (CanonicalPi y U_^ V_^))]

;; #source file ./ott/lang_simple.ott  lines 812 - 816 
 [
  (StaticHsub x U u v v_^)
   (side-condition ,(not (alpha-equivalent? L (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  ---------------------------------------------------------------- "StaticHsubLam"
  (StaticHsub x U u  (CanonicalLam y v)   (CanonicalLam y v_^) )]

;; #source file ./ott/lang_simple.ott  lines 819 - 822 
 [
   (side-condition ,(not (alpha-equivalent? L (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  ---------------------------------------------------------------------------------------------------------------------- "StaticHsubDiffNil"
  (StaticHsub x U u (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ))]

;; #source file ./ott/lang_simple.ott  lines 823 - 828 
 [
  
   (side-condition ,(not (alpha-equivalent? L (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  (StaticHsub x U u (CanonicalAtomic (AtomicSpine y e)) (CanonicalAtomic (AtomicSpine y e_^)))
  (StaticHsub x U u v v_^)
  ---------------------------------------------------------------------------------------------------------------------------- "StaticHsubDiffCons"
  (StaticHsub x U u (CanonicalAtomic (AtomicSpine y (SpineCons e v))) (CanonicalAtomic (AtomicSpine y (SpineCons e_^ v_^))))]

;; #source file ./ott/lang_simple.ott  lines 829 - 832 
 [
  
  (StaticHsubR x U u_11 (AtomicSpine x (SpineCons e u_22)) v_22 V_^)
  --------------------------------------------------------------------------------- "StaticHsubSpine"
  (StaticHsub x U u_11 (CanonicalAtomic (AtomicSpine x (SpineCons e u_22))) v_22)]

)
(define-judgment-form L 
 
  #:mode (StaticHsubR I I I I O O)
  #:contract (StaticHsubR x U u rr v V)

;; #source file ./ott/lang_simple.ott  lines 843 - 845 
 [
  -------------------------------------------------------- "StaticHsubRHead"
  (StaticHsubR x U u  (AtomicSpine  x  SpineEmpty)  u U)]

;; #source file ./ott/lang_simple.ott  lines 846 - 855 
 [
  
  (StaticHsub x U u_11 u_22 u_33)
  (StaticHsubR x U u_11 (AtomicSpine x e)  (CanonicalLam y v_11)  (CanonicalPi y V_11 V_22))
  (StaticHsub y V_11 u_33 v_11 v_22)
  (StaticHsub y V_11 u_33 V_22 V_^)
  ---------------------------------------------------------------------- "StaticHsubRSpine"
  (StaticHsubR x U u_11  (AtomicSpine x (SpineCons e u_22))  v_22 V_^)]
)

;;; definitions 

(define-judgment-form
  L
  #:mode (SWellFormed I)
  #:contract (SWellFormed SGamma)

;; #source file ./ott/lang_simple.ott  lines 865 - 867 
 [------------------------ "SWellFormedEmpty"
  (SWellFormed EnvEmpty)]

;; #source file ./ott/lang_simple.ott  lines 868 - 873 
 [
  (SWellFormed SGamma)
  (StaticSet SGamma U)
  (GVarFree x SGamma)
  ----------------------------------- "SWellFormedExt"
  (SWellFormed (EnvExt x U SGamma))]

)
(define-judgment-form L 
 
  #:mode (StaticSet I I)
  #:contract (StaticSet SGamma U)

;; #source file ./ott/lang_simple.ott  lines 882 - 885 
 [
  
  (StaticCSynth SGamma rr (CanonicalAtomic (AtomicSet i)))
  ----------------------------------------- "StaticSetSet"
  (StaticSet SGamma (CanonicalAtomic rr))]

;; #source file ./ott/lang_simple.ott  lines 888 - 893 
 [
  (StaticSet SGamma U)
  (SWellFormed (EnvExt x U SGamma))
  (StaticSet (EnvExt x U SGamma) V)
  ---------------------------------------- "StaticSetPi"
  (StaticSet SGamma (CanonicalPi x U V))]

)
(define-judgment-form L 
 
  #:mode (StaticCSynth I I O)
  #:contract (StaticCSynth SGamma rr U)

;; #source file ./ott/lang_simple.ott  lines 901 - 904 
 [
   (side-condition ,(> (term  i ) 0)) 
  --------------------------------------------------------------------------------- "StaticCSynthSet"
  (StaticCSynth SGamma (AtomicSet i) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 906 - 910 
 [
  
  (SWellFormed SGamma)
  (GVarLook x U SGamma)
  -------------------------------------------------------- "StaticCSynthVar"
  (StaticCSynth SGamma  (AtomicSpine  x  SpineEmpty)  U)]

;; #source file ./ott/lang_simple.ott  lines 914 - 920 
 [
  
  (StaticCSynth SGamma (AtomicSpine x e) (CanonicalPi y U_11 U_22))
  (StaticCCheck SGamma u U_11)
  (StaticHsub y U_11 u U_22 V)
  --------------------------------------------------------- "StaticCSynthApp"
  (StaticCSynth SGamma (AtomicSpine x (SpineCons e u)) V)]

)
(define-judgment-form L 
 
  #:mode (StaticCCheck I I I)
  #:contract (StaticCCheck SGamma u U)

;; #source file ./ott/lang_simple.ott  lines 928 - 931 
 [
  
  (StaticCSynth SGamma rr (CanonicalAtomic RR))
  ----------------------------------------------------------------- "StaticCCheckSynth"
  (StaticCCheck SGamma (CanonicalAtomic rr) (CanonicalAtomic RR))]

;; #source file ./ott/lang_simple.ott  lines 932 - 936 
 [
  
  (StaticCSynth SGamma rr (CanonicalAtomic (AtomicSet i)))
   (side-condition ,(and (< 0 (term  i )) (< (term  i ) (term  j )))) 
  ---------------------------------------------------------------------------- "StaticCCheckLevel"
  (StaticCCheck SGamma (CanonicalAtomic rr) (CanonicalAtomic (AtomicSet j)))]

;; #source file ./ott/lang_simple.ott  lines 938 - 942 
 [
  
  (SWellFormed (EnvExt x U SGamma))
  (StaticCCheck (EnvExt x U SGamma) u V)
  ---------------------------------------------------------------- "StaticCCheckLam"
  (StaticCCheck SGamma  (CanonicalLam x u)  (CanonicalPi x U V))]

;; #source file ./ott/lang_simple.ott  lines 943 - 948 
 [
  (StaticCCheck SGamma U (CanonicalAtomic (AtomicSet i)))
  (SWellFormed (EnvExt x U SGamma))
  (StaticCCheck (EnvExt x U SGamma) V (CanonicalAtomic (AtomicSet i)))
  --------------------------------------------------------------------------- "StaticCCheckPi"
  (StaticCCheck SGamma (CanonicalPi x U V) (CanonicalAtomic (AtomicSet i)))]
)

;;; definitions 

(define-judgment-form
  L
  #:mode (StaticSynth I I O)
  #:contract (StaticSynth SGamma t U)

;; #source file ./ott/lang_simple.ott  lines 958 - 962 
 [
  (StaticSetNorm SGamma V T)
  (StaticCheck SGamma t V)
  ---------------------------------------- "StaticSynthAnn"
  (StaticSynth SGamma  (TermAnn t T)  V)]

;; #source file ./ott/lang_simple.ott  lines 963 - 966 
 [
   (side-condition ,(> (term  i ) 0)) 
  ------------------------------------------------------------------------------ "StaticSynthSet"
  (StaticSynth SGamma (TermSet i) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 968 - 972 
 [
  
  (SWellFormed SGamma)
  (GVarLook x U SGamma)
  ------------------------------------ "StaticSynthVar"
  (StaticSynth SGamma x U)]

;; #source file ./ott/lang_simple.ott  lines 977 - 983 
 [
  
  (StaticSynth SGamma s (CanonicalPi x U V))
  (StaticNormCheck SGamma v t U)
  (StaticHsub x U v V V_^)
  ---------------------------------------- "StaticSynthApp"
  (StaticSynth SGamma (TermApp s t) V_^)]

)
(define-judgment-form L 
 
  #:mode (StaticCheck I I I)
  #:contract (StaticCheck SGamma t U)

;; #source file ./ott/lang_simple.ott  lines 990 - 993 
 [
  (StaticSynth SGamma t U)
  -------------------------- "StaticCheckSynth"
  (StaticCheck SGamma t U)]

;; #source file ./ott/lang_simple.ott  lines 994 - 998 
 [
  (StaticSynth SGamma t (CanonicalAtomic (AtomicSet i)))
   (side-condition ,(and (< 0 (term  i )) (< (term  i ) (term  j )))) 
  -------------------------------------------------------- "StaticCheckLevel"
  (StaticCheck SGamma t (CanonicalAtomic (AtomicSet j)))]

;; #source file ./ott/lang_simple.ott  lines 999 - 1004 
 [
  (StaticNormCheck SGamma U S (CanonicalAtomic (AtomicSet i)))
  (SWellFormed (EnvExt x U SGamma))
  (StaticCheck (EnvExt x U SGamma) T (CanonicalAtomic (AtomicSet i)))
  --------------------------------------------------------------------- "StaticCheckPi"
  (StaticCheck SGamma (TermPi x S T) (CanonicalAtomic (AtomicSet i)))]

;; #source file ./ott/lang_simple.ott  lines 1006 - 1010 
 [
  (SWellFormed (EnvExt x U SGamma))
  (StaticCheck (EnvExt x U SGamma) t V)
  ---------------------------------------------------------- "StaticCheckLam"
  (StaticCheck SGamma  (TermLam x t)  (CanonicalPi x U V))]

)
(define-judgment-form L 
 
  #:mode (StaticSetNorm I O I)
  #:contract (StaticSetNorm SGamma U S)

;; #source file ./ott/lang_simple.ott  lines 1021 - 1024 
 [
  (StaticNormSynth SGamma S U (CanonicalAtomic (AtomicSet i)))
  ---------------------------- "StaticSetNormSynth"
  (StaticSetNorm SGamma U S)]

;; #source file ./ott/lang_simple.ott  lines 1025 - 1029 
 [
  (StaticSetNorm SGamma U S)
  (StaticSetNorm (EnvExt x U SGamma) V T)
  ----------------------------------------------------------- "StaticSetNormPi"
  (StaticSetNorm SGamma (CanonicalPi x U V) (TermPi x S T))]

)
(define-judgment-form L 
 
  #:mode (StaticNormSynth I I O O)
  #:contract (StaticNormSynth SGamma t v U)

;; #source file ./ott/lang_simple.ott  lines 1035 - 1039 
 [
  (StaticSetNorm SGamma V T)
  (StaticNormCheck SGamma v t V)
  ---------------------------------------------- "StaticNormSynthAnn"
  (StaticNormSynth SGamma  (TermAnn t T)  v V)]

;; #source file ./ott/lang_simple.ott  lines 1040 - 1043 
 [
   (side-condition ,(> (term  i ) 0)) 
  ------------------------------------------------------------------------------------------------------------------ "StaticNormSynthSet"
  (StaticNormSynth SGamma (TermSet i) (CanonicalAtomic (AtomicSet i)) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 1045 - 1050 
 [
  (SWellFormed SGamma)
  (GVarLook x U SGamma)
  (EtaExpand  (AtomicSpine  x  SpineEmpty)  v U)
  ------------------------------------------ "StaticNormSynthVar"
  (StaticNormSynth SGamma x v U)]

;; #source file ./ott/lang_simple.ott  lines 1055 - 1061 
 [
  
  (StaticNormSynth SGamma s  (CanonicalLam x u)  (CanonicalPi x U_11 U_22))
  (StaticNormCheck SGamma v t U_11)
  (StaticHsub x U_11 v u v_^)
  (StaticHsub x U_11 v U_22 V)
  ---------------------------------------------- "StaticNormSynthApp"
  (StaticNormSynth SGamma (TermApp s t) v_^ V)]

)
(define-judgment-form L 
 
  #:mode (StaticNormCheck I O I I)
  #:contract (StaticNormCheck SGamma v t U)

;; #source file ./ott/lang_simple.ott  lines 1070 - 1073 
 [
  (StaticNormSynth SGamma t v U)
  -------------------------------- "StaticNormCheckSynth"
  (StaticNormCheck SGamma v t U)]

;; #source file ./ott/lang_simple.ott  lines 1074 - 1078 
 [
  (StaticNormSynth SGamma t v (CanonicalAtomic (AtomicSet i)))
   (side-condition ,(and (< 0 (term  i )) (< (term  i ) (term  j )))) 
  -------------------------------------------------------------- "StaticNormCheckLevel"
  (StaticNormCheck SGamma v t (CanonicalAtomic (AtomicSet j)))]

;; #source file ./ott/lang_simple.ott  lines 1080 - 1085 
 [
  (StaticNormCheck SGamma U S (CanonicalAtomic (AtomicSet i)))
  (SWellFormed (EnvExt x U SGamma))
  (StaticNormCheck (EnvExt x U SGamma) V T (CanonicalAtomic (AtomicSet i)))
  --------------------------------------------------------------------------------------------- "StaticNormCheckPi"
  (StaticNormCheck SGamma (CanonicalPi x U V) (TermPi x S T) (CanonicalAtomic (AtomicSet i)))]

;; #source file ./ott/lang_simple.ott  lines 1086 - 1090 
 [
  (SWellFormed (EnvExt x U SGamma))
  (StaticNormCheck (EnvExt x U SGamma) v t V)
  ----------------------------------------------------------------------------------- "StaticNormCheckLam"
  (StaticNormCheck SGamma  (CanonicalLam x v)   (TermLam x t)  (CanonicalPi x U V))]

)
(define-judgment-form L 
 
  #:mode (EtaExpand I O I)
  #:contract (EtaExpand rr v V)

;; #source file ./ott/lang_simple.ott  lines 1096 - 1098 
 [
  ---------------------------------------------------------- "EtaExpandAtomic"
  (EtaExpand rr (CanonicalAtomic rr) (CanonicalAtomic RR))]

;; #source file ./ott/lang_simple.ott  lines 1100 - 1104 
 [
  
  (EtaExpand  (AtomicSpine  y  SpineEmpty)  u U)
  (EtaExpand (AtomicSpine x (SpineCons e u)) v V)
  ------------------------------------------------------------------------ "EtaExpandPi"
  (EtaExpand (AtomicSpine x e)  (CanonicalLam y v)  (CanonicalPi y U V))]
)

;;; definitions 

(define-judgment-form
  L
  #:mode (Domain I O)
  #:contract (Domain gU gV)

;; #source file ./ott/lang_simple.ott  lines 1122 - 1124 
 [----------------------------------- "DomainPi"
  (Domain (CanonicalPi x gU gV) gU)]

;; #source file ./ott/lang_simple.ott  lines 1125 - 1127 
 [------------------------------------ "DomainDyn"
  (Domain CanonicalDyn CanonicalDyn)]

)
(define-judgment-form L 
 
  #:mode (GradualEnvSub I I I I O)
  #:contract (GradualEnvSub x gU gu Gamma Gamma_^)

;; #source file ./ott/lang_simple.ott  lines 1133 - 1135 
 [------------------------------------------- "GradualEnvSubEmpty"
  (GradualEnvSub x gU gu EnvEmpty EnvEmpty)]

;; #source file ./ott/lang_simple.ott  lines 1136 - 1141 
 [
  
   (side-condition ,(not (alpha-equivalent? L (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  (GradualHsub x gU gu gU gU_^)
  (GradualEnvSub x gU gu Gamma Gamma_^)
  --------------------------------------------------------------------- "GradualEnvSubVarDiff"
  (GradualEnvSub x gU gu (EnvExt y gU Gamma) (EnvExt y gU_^ Gamma_^))]

;; #source file ./ott/lang_simple.ott  lines 1142 - 1145 
 [
  
  (GradualEnvSub x gU gu Gamma Gamma_^)
  ----------------------------------------------------- "GradualEnvSubVarSame"
  (GradualEnvSub x gU gu (EnvExt x gU Gamma) Gamma_^)]

)
(define-judgment-form L 
 
  #:mode (GradualHsub I I I I O)
  #:contract (GradualHsub x gU gu gu_^ gv)

;; #source file ./ott/lang_simple.ott  lines 1152 - 1154 
 [--------------------------------------------------------------------------------------- "GradualHsubSet"
  (GradualHsub x gU gu (CanonicalAtomic (AtomicSet i)) (CanonicalAtomic (AtomicSet i)))]

;; #source file ./ott/lang_simple.ott  lines 1156 - 1158 
 [------------------------------------------------- "GradualHsubDyn"
  (GradualHsub x gU gu CanonicalDyn CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 1159 - 1164 
 [ (side-condition ,(not (alpha-equivalent? L (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  (GradualHsub x gU gu gV_11 gV_11^)
  (GradualHsub x gU gu gV_22 gV_22^)
  --------------------------------------------------------------------------------- "GradualHsubPi"
  (GradualHsub x gU gu (CanonicalPi y gV_11 gV_22) (CanonicalPi y gV_11^ gV_22^))]

;; #source file ./ott/lang_simple.ott  lines 1165 - 1169 
 [ (where   y  ,(gensym)) 
  (GradualHsub x gU gu (CanonicalPi y gU  (substitute  gV   x   y ) ) gV_^)
  -------------------------------------------------- "GradualHsubPiRdxAlpha"
  (GradualHsub x gU gu (CanonicalPi x gU gV) gV_^)]

;; #source file ./ott/lang_simple.ott  lines 1171 - 1175 
 [ (side-condition ,(not (alpha-equivalent? L (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  (GradualHsub x gU gu gv gv_^)
  --------------------------------------------------------------------- "GradualHsubLam"
  (GradualHsub x gU gu  (CanonicalLam y gv)   (CanonicalLam y gv_^) )]

;; #source file ./ott/lang_simple.ott  lines 1176 - 1180 
 [ (where   y  ,(gensym)) 
  (GradualHsub x gU gu  (CanonicalLam y  (substitute  gv   x   y ) )  gv_^)
  -------------------------------------------------- "GradualHsubLamRdxAlpha"
  (GradualHsub x gU gu  (CanonicalLam x gv)  gv_^)]

;; #source file ./ott/lang_simple.ott  lines 1181 - 1184 
 [ (side-condition ,(not (alpha-equivalent? L (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  ------------------------------------------------------------------------------------------------------------------------- "GradualHsubDiffNil"
  (GradualHsub x gU gu (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ))]

;; #source file ./ott/lang_simple.ott  lines 1185 - 1190 
 [ (side-condition ,(not (alpha-equivalent? L (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  (GradualHsub x gU gu (CanonicalAtomic (AtomicSpine y ge)) (CanonicalAtomic (AtomicSpine y ge_^)))
  (GradualHsub x gU gu gv gv_^)
  ----------------------------------------------------------------------------------------------------------------------------------- "GradualHsubDiffCons"
  (GradualHsub x gU gu (CanonicalAtomic (AtomicSpine y (SpineCons ge gv))) (CanonicalAtomic (AtomicSpine y (SpineCons ge_^ gv_^))))]

;; #source file ./ott/lang_simple.ott  lines 1193 - 1196 
 [(GradualHsubR x gU gu ge gv gV)
  --------------------------------------------------------------- "GradualHsubSpine"
  (GradualHsub x gU gu (CanonicalAtomic (AtomicSpine x ge)) gv)]

)
(define-judgment-form L 
 
  #:mode (GradualHsubR I I I I O O)
  #:contract (GradualHsubR x gU gu ge gv gV)

;; #source file ./ott/lang_simple.ott  lines 1216 - 1218 
 [----------------------------------------- "GradualHsubRHead"
  (GradualHsubR x gU gu SpineEmpty gu gU)]

;; #source file ./ott/lang_simple.ott  lines 1219 - 1224 
 [(GradualHsubR x gU gu_11 ge gv_11 CanonicalDyn)
  -------------------------------------------------------------------------- "GradualHsubRDynType"
  (GradualHsubR x gU gu_11 (SpineCons ge gu_22) CanonicalDyn CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 1226 - 1235 

;; #source file ./ott/lang_simple.ott  lines 1236 - 1244 
 [(GradualHsubR x gU gu ge  (CanonicalLam y_11 gu_22)  (CanonicalPi y_22 gU_11 gU_22))
  (GradualHsub x gU gu gv_11 gv_22)
  (GradualHsub y_11 gU_11 gv_22 gu_22 gv_33)
  (GradualHsub y_22 gU_11 gv_22 gU_22 gV)
  (GEtaExpandC gv_33 gv_44 gV)
  ------------------------------------------------------ "GradualHsubRLamSpineRdxAlpha"
  (GradualHsubR x gU gu (SpineCons ge gv_11) gv_44 gV)]

;; #source file ./ott/lang_simple.ott  lines 1246 - 1252 
 [(GradualHsubR x gU gu ge CanonicalDyn (CanonicalPi y gU_11 gU_22))
  (GradualHsub x gU gu gv gv_22)
  (GradualHsub y gU_11 gv gU_22 gV)
  ---------------------------------------------------------- "GradualHsubRDynSpine"
  (GradualHsubR x gU gu (SpineCons ge gv) CanonicalDyn gV)]

)
(define-judgment-form L 
 
  #:mode (CodSub I I I O)
  #:contract (CodSub gU gu gu_^ gv)

;; #source file ./ott/lang_simple.ott  lines 1259 - 1262 
 [(GradualHsub x gU gu gV gV_^)
  ------------------------------------------- "CodSubPi"
  (CodSub gU gu (CanonicalPi x gU gV) gV_^)]

;; #source file ./ott/lang_simple.ott  lines 1263 - 1265 
 [------------------------------------------ "CodSubDyn"
  (CodSub gU gu CanonicalDyn CanonicalDyn)]

)
(define-judgment-form L 
 
  #:mode (BodySub I I I O)
  #:contract (BodySub gU gu gu_^ gv)

;; #source file ./ott/lang_simple.ott  lines 1271 - 1274 
 [(GradualHsub x gU gu gv gv_^)
  -------------------------------------------- "BodySubPi"
  (BodySub gU gu  (CanonicalLam x gv)  gv_^)]

;; #source file ./ott/lang_simple.ott  lines 1275 - 1277 
 [------------------------------------------- "BodySubDyn"
  (BodySub gU gu CanonicalDyn CanonicalDyn)]
)

;;; definitions 

(define-judgment-form
  L
  #:mode (GradualSet I I)
  #:contract (GradualSet Gamma gU)

;; #source file ./ott/lang_simple.ott  lines 1286 - 1289 
 [
  (GradualCSynth Gamma grr CanonicalDyn)
  ------------------------------------------ "GradualSetDynTy"
  (GradualSet Gamma (CanonicalAtomic grr))]

;; #source file ./ott/lang_simple.ott  lines 1290 - 1293 
 [
  (GradualCSynth Gamma grr (CanonicalAtomic (AtomicSet i)))
  ------------------------------------------ "GradualSetSet"
  (GradualSet Gamma (CanonicalAtomic grr))]

;; #source file ./ott/lang_simple.ott  lines 1296 - 1301 
 [
  (GradualSet Gamma gU_11)
    
  (GradualSet (EnvExt x gU_11 Gamma) gU_22)
  ------------------------------------------------ "GradualSetPi"
  (GradualSet Gamma (CanonicalPi x gU_11 gU_22))]

;; #source file ./ott/lang_simple.ott  lines 1303 - 1305 
 [
  --------------------------------- "GradualSetDynVal"
  (GradualSet Gamma CanonicalDyn)]

)
(define-judgment-form L 
 
  #:mode (WellFormed I)
  #:contract (WellFormed Gamma)

;; #source file ./ott/lang_simple.ott  lines 1311 - 1313 
 [----------------------- "WellFormedEmpty"
  (WellFormed EnvEmpty)]

;; #source file ./ott/lang_simple.ott  lines 1314 - 1319 
 [
  (WellFormed Gamma)
  (GradualSet Gamma gU)
  (GVarFree x Gamma)
  ---------------------------------- "WellFormedExt"
  (WellFormed (EnvExt x gU Gamma))]

)
(define-judgment-form L 
 
  #:mode (GradualCSynth I I O)
  #:contract (GradualCSynth Gamma grr gU)

;; #source file ./ott/lang_simple.ott  lines 1325 - 1328 
 [
   (side-condition ,(> (term  i ) 0)) 
  --------------------------------------------------------------------------------- "GradualCSynthSet"
  (GradualCSynth Gamma (AtomicSet i) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 1330 - 1334 
 [
    
  (GVarLook x gU Gamma)
  --------------------------------------------------------- "GradualCSynthVar"
  (GradualCSynth Gamma  (AtomicSpine  x  SpineEmpty)  gU)]

;; #source file ./ott/lang_simple.ott  lines 1338 - 1345 
 [
  (GradualCSynth Gamma (AtomicSpine x ge) gU)
  (Domain gU gV)
  (GradualCCheck Gamma gu gV)
  (CodSub gV gu gU gV_^)
  -------------------------------------------------------------- "GradualCSynthApp"
  (GradualCSynth Gamma (AtomicSpine x (SpineCons ge gu)) gV_^)]

)
(define-judgment-form L 
 
  #:mode (GradualCCheck I I I)
  #:contract (GradualCCheck Gamma gu gU)

;; #source file ./ott/lang_simple.ott  lines 1352 - 1356 
 [
  (GradualCSynth Gamma grr gU)
  (Consistent gU gV)
  ------------------------------------------------ "GradualCCheckSynth"
  (GradualCCheck Gamma (CanonicalAtomic grr) gV)]

;; #source file ./ott/lang_simple.ott  lines 1357 - 1361 
 [
  (GradualCSynth Gamma grr (CanonicalAtomic (AtomicSet i)))
   (side-condition ,(and (< 0 (term  i )) (< (term  i ) (term  j )))) 
  ----------------------------------------------------------------------------- "GradualCCheckLevel"
  (GradualCCheck Gamma (CanonicalAtomic grr) (CanonicalAtomic (AtomicSet j)))]

;; #source file ./ott/lang_simple.ott  lines 1363 - 1367 

;; #source file ./ott/lang_simple.ott  lines 1369 - 1374 
 [
   (where   z  ,(gensym)) 
    
  (GradualCCheck (EnvExt z gU Gamma)  (substitute  gu   x   z )   (substitute  gV   y   z ) )
  ------------------------------------------------------------------- "GradualCCheckLamPiRdxAlpha"
  (GradualCCheck Gamma  (CanonicalLam x gu)  (CanonicalPi y gU gV))]

;; #source file ./ott/lang_simple.ott  lines 1375 - 1379 
 [
    
  (GradualCCheck (EnvExt x CanonicalDyn Gamma) gu CanonicalDyn)
  ---------------------------------------------------------- "GradualCCheckLamDyn"
  (GradualCCheck Gamma  (CanonicalLam x gu)  CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 1380 - 1386 
 [
  (ConsistentSet gV)
  (GradualCCheck Gamma gU_11 gV)
    
  (GradualCCheck (EnvExt x gU_11 Gamma) gU_22 gV)
  ------------------------------------------------------ "GradualCCheckPi"
  (GradualCCheck Gamma (CanonicalPi x gU_11 gU_22) gV)]

;; #source file ./ott/lang_simple.ott  lines 1388 - 1391 
 [
  (GradualSet Gamma gU)
  --------------------------------------- "GradualCCheckDyn"
  (GradualCCheck Gamma CanonicalDyn gU)]

)
(define-judgment-form L 
 
  #:mode (ConsistentSet I)
  #:contract (ConsistentSet gU)

;; #source file ./ott/lang_simple.ott  lines 1399 - 1401 
 [------------------------------------------------- "ConsistentSetSet"
  (ConsistentSet (CanonicalAtomic (AtomicSet i)))]

;; #source file ./ott/lang_simple.ott  lines 1402 - 1404 
 [------------------------------ "ConsistentSetDyn"
  (ConsistentSet CanonicalDyn)]

)
(define-judgment-form L 
 
  #:mode (Consistent I I)
  #:contract (Consistent gU gV)

;; #source file ./ott/lang_simple.ott  lines 1412 - 1414 
 [------------------------------ "ConsistentDynL"
  (Consistent CanonicalDyn gv)]

;; #source file ./ott/lang_simple.ott  lines 1415 - 1417 
 [------------------------------ "ConsistentDynR"
  (Consistent gu CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 1418 - 1420 
 [-------------------- "ConsistentEq"
  (Consistent gu gu)]

;; #source file ./ott/lang_simple.ott  lines 1421 - 1425 

;; #source file ./ott/lang_simple.ott  lines 1427 - 1432 
 [ (where   z  ,(gensym)) 
  (Consistent gU gU_^)
  (Consistent  (substitute  gV   x   z )   (substitute  gV_^   y   z ) )
  -------------------------------------------------------------- "ConsistentPiRdxAlpha"
  (Consistent (CanonicalPi x gU gV) (CanonicalPi y gU_^ gV_^))]

;; #source file ./ott/lang_simple.ott  lines 1433 - 1436 

;; #source file ./ott/lang_simple.ott  lines 1438 - 1442 
 [ (where   z  ,(gensym)) 
  (Consistent  (substitute  gu   x   z )   (substitute  gv   y   z ) )
  ---------------------------------------------------------- "ConsistentLamRdxAlpha"
  (Consistent  (CanonicalLam x gu)   (CanonicalLam y gv) )]

;; #source file ./ott/lang_simple.ott  lines 1443 - 1447 
 [(Consistent (CanonicalAtomic (AtomicSpine x ge)) (CanonicalAtomic (AtomicSpine x ge_^)))
  (Consistent gu gv)
  ------------------------------------------------------------------------------------------------------------------------ "ConsistentApp"
  (Consistent (CanonicalAtomic (AtomicSpine x (SpineCons ge gu))) (CanonicalAtomic (AtomicSpine x (SpineCons ge_^ gv))))]
)

;;; definitions 

(define-judgment-form
  L
  #:mode (Meet I I O)
  #:contract (Meet gU gV gU_^)

;; #source file ./ott/lang_simple.ott  lines 1458 - 1462 

;; #source file ./ott/lang_simple.ott  lines 1464 - 1469 
 [ (where   z  ,(gensym)) 
  (Meet gU gU_^ gU_^^)
  (Meet  (substitute  gV   x   z )   (substitute  gV_^   y   z )  gV_^^)
  ------------------------------------------------------------------------------------ "MeetPiRdxAlpha"
  (Meet (CanonicalPi x gU gV) (CanonicalPi y gU_^ gV_^) (CanonicalPi z gU_^^ gV_^^))]

;; #source file ./ott/lang_simple.ott  lines 1470 - 1473 

;; #source file ./ott/lang_simple.ott  lines 1475 - 1479 
 [ (where   z  ,(gensym)) 
  (Meet  (substitute  gu   x   z )   (substitute  gu_^   y   z )  gv)
  ---------------------------------------------------------------------- "MeetLamRdxAlpha"
  (Meet (CanonicalLam x gu) (CanonicalLam y gu_^) (CanonicalLam z gv))]

;; #source file ./ott/lang_simple.ott  lines 1480 - 1484 
 [(Meet gu gu_^ gu_^^)
  (Meet (CanonicalAtomic (AtomicSpine x ge)) (CanonicalAtomic (AtomicSpine x ge_^)) (CanonicalAtomic (AtomicSpine x ge_^^)))
  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ "MeetApp"
  (Meet (CanonicalAtomic (AtomicSpine x (SpineCons ge gu))) (CanonicalAtomic (AtomicSpine x (SpineCons ge_^ gu_^))) (CanonicalAtomic (AtomicSpine x (SpineCons ge_^^ gu_^^))))]

;; #source file ./ott/lang_simple.ott  lines 1485 - 1487 
 [--------------------------- "MeetDynL"
  (Meet CanonicalDyn gU gU)]

;; #source file ./ott/lang_simple.ott  lines 1488 - 1491 
 [ (side-condition ,(not (alpha-equivalent? L (term  gV ) (term  CanonicalDyn )))) 
  --------------------------- "MeetDynR"
  (Meet gV CanonicalDyn gV)]

;; #source file ./ott/lang_simple.ott  lines 1492 - 1496 
 [ (side-condition ,(not (alpha-equivalent? L (term  gU ) (term  CanonicalDyn )))) 
   (side-condition ,(not (alpha-equivalent? L (term  gV ) (term  CanonicalDyn )))) 
  ----------------- "MeetRefl"
  (Meet gu gu gu)]

)
(define-judgment-form L 
 
  #:mode (MorePrecise I I)
  #:contract (MorePrecise gU gV)

;; #source file ./ott/lang_simple.ott  lines 1504 - 1507 
 [(Meet gU gV gU)
  --------------------- "MorePreciseDef"
  (MorePrecise gU gV)]

)
(define-judgment-form L 
 
  #:mode (EvConsistent I I I)
  #:contract (EvConsistent ep gU gV)

;; #source file ./ott/lang_simple.ott  lines 1514 - 1519 
 [
  (Meet gV_11 gV_22 gV_33)
  (MorePrecise gU_11 gV_33)
  (MorePrecise gU_22 gV_33)
  ----------------------------------------------------------- "EvConsistentDef"
  (EvConsistent (EvidenceEv Gamma gU_11 gU_22) gV_11 gV_22)]
)

;;; definitions 

(define-judgment-form
  L
  #:mode (GradualSynth I I O)
  #:contract (GradualSynth Gamma gt gU)

;; #source file ./ott/lang_simple.ott  lines 1533 - 1537 
 [
  
  (GradualSetNorm Gamma gV gT)
  (GradualCheck Gamma gt gV)
  ------------------------------------------- "GradualSynthAnn"
  (GradualSynth Gamma  (TermAnn gt gT)  gV)]

;; #source file ./ott/lang_simple.ott  lines 1538 - 1541 
 [
   (side-condition ,(> (term  i ) 0)) 
  ------------------------------------------------------------------------------ "GradualSynthSet"
  (GradualSynth Gamma (TermSet i) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 1543 - 1547 
 [
  (GVarLook x gU Gamma)
    
  ------------------------------------- "GradualSynthVar"
  (GradualSynth Gamma x gU)]

;; #source file ./ott/lang_simple.ott  lines 1552 - 1558 
 [
  
  (GradualSynth Gamma gs gV)
  (Domain gV gV_11)
  (GradualNormCheck Gamma gv gt gV_11)
  (CodSub gV_11 gv gV gV_22)
  -------------------------------------------- "GradualSynthApp"
  (GradualSynth Gamma (TermApp gs gt) gV_22)]

)
(define-judgment-form L 
 
  #:mode (GradualCheck I I I)
  #:contract (GradualCheck Gamma gt gU)

;; #source file ./ott/lang_simple.ott  lines 1571 - 1576 
 [
  (GradualSynth Gamma gt gU)
  (Consistent gU gV)
  ---------------------------- "GradualCheckSynth"
  (GradualCheck Gamma gt gV)]

;; #source file ./ott/lang_simple.ott  lines 1577 - 1582 
 [
  (GradualSynth Gamma gt (CanonicalAtomic (AtomicSet i)))
   (side-condition ,(and (< 0 (term  i )) (< (term  i ) (term  j )))) 
  --------------------------------------------------------- "GradualCheckLevel"
  (GradualCheck Gamma gt (CanonicalAtomic (AtomicSet j)))]

;; #source file ./ott/lang_simple.ott  lines 1591 - 1597 
 [
  
  (ConsistentSet gV)
  (GradualNormCheck Gamma gU gS gV)
    
  (GradualCheck (EnvExt x gU Gamma) gT gV)
  ------------------------------------------ "GradualCheckPi"
  (GradualCheck Gamma (TermPi x gS gT) gV)]

;; #source file ./ott/lang_simple.ott  lines 1599 - 1603 

;; #source file ./ott/lang_simple.ott  lines 1605 - 1610 
 [
   (where   z  ,(gensym)) 
    
  (GradualCheck (EnvExt z gU Gamma)  (substitute  gt   x   z )   (substitute  gV   y   z ) )
  ------------------------------------------------------------- "GradualCheckLamPiRdxAlpha"
  (GradualCheck Gamma  (TermLam x gt)  (CanonicalPi y gU gV))]

;; #source file ./ott/lang_simple.ott  lines 1612 - 1616 
 [
    
  (GradualCheck (EnvExt x CanonicalDyn Gamma) gt CanonicalDyn)
  ---------------------------------------------------- "GradualCheckLamDyn"
  (GradualCheck Gamma  (TermLam x gt)  CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 1617 - 1620 
 [
  (GradualSet Gamma gU)
  --------------------------------- "GradualCheckDyn"
  (GradualCheck Gamma TermDyn gU)]

)
(define-judgment-form L 
 
  #:mode (GradualSetNorm I O I)
  #:contract (GradualSetNorm Gamma gU TT)

;; #source file ./ott/lang_simple.ott  lines 1635 - 1638 
 [
  (GradualNormSynth Gamma TT gU (CanonicalAtomic (AtomicSet i)))
  ------------------------------ "GradualSetNormSynth"
  (GradualSetNorm Gamma gU TT)]

;; #source file ./ott/lang_simple.ott  lines 1640 - 1644 
 [
  (GradualSetNorm Gamma gU SS)
  (GradualSetNorm (EnvExt x gU Gamma) gV TT)
  --------------------------------------------------------------- "GradualSetNormPi"
  (GradualSetNorm Gamma (CanonicalPi x gU gV) (TermPi x SS TT))]

;; #source file ./ott/lang_simple.ott  lines 1646 - 1648 
 [
  --------------------------------------------- "GradualSetNormDyn"
  (GradualSetNorm Gamma CanonicalDyn TermDyn)]

)
(define-judgment-form L 
 
  #:mode (GEtaLong I I)
  #:contract (GEtaLong gv gV)

;; #source file ./ott/lang_simple.ott  lines 1654 - 1656 
 [-------------------------------------------------------- "GEtaLongAtomic"
  (GEtaLong (CanonicalAtomic grr) (CanonicalAtomic gRR))]

;; #source file ./ott/lang_simple.ott  lines 1657 - 1659 
 [----------------------------------------------- "GEtaLongAtomicDyn"
  (GEtaLong (CanonicalAtomic grr) CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 1661 - 1664 

;; #source file ./ott/lang_simple.ott  lines 1665 - 1669 
 [ (where   z  ,(gensym)) 
  (GEtaLong  (substitute  gu   x   z )   (substitute  gV   y   z ) )
  -------------------------------------------------------- "GEtaLongLamRdxAlpha"
  (GEtaLong  (CanonicalLam x gu)  (CanonicalPi y gU gV))]

;; #source file ./ott/lang_simple.ott  lines 1670 - 1672 
 [---------------------------- "GEtaLongDyn"
  (GEtaLong CanonicalDyn gU)]

;; #source file ./ott/lang_simple.ott  lines 1673 - 1675 
 [--------------------------------------- "GEtaLongPi"
  (GEtaLong (CanonicalPi x gU gV) gV_^)]

)
(define-judgment-form L 
 
  #:mode (GEtaExpand I O I)
  #:contract (GEtaExpand grr gv gV)

;; #source file ./ott/lang_simple.ott  lines 1681 - 1683 
 [-------------------------------------------------------------- "GEtaExpandAtomic"
  (GEtaExpand grr (CanonicalAtomic grr) (CanonicalAtomic gRR))]

;; #source file ./ott/lang_simple.ott  lines 1684 - 1686 
 [----------------------------------------------------- "GEtaExpandDyn"
  (GEtaExpand grr (CanonicalAtomic grr) CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 1688 - 1692 
 [(GEtaExpand  (AtomicSpine  y  SpineEmpty)  gu gU)
  (GEtaExpand (AtomicSpine x (SpineCons ge gu)) gv gV)
  ----------------------------------------------------------------------------- "GEtaExpandPi"
  (GEtaExpand (AtomicSpine x ge)  (CanonicalLam y gv)  (CanonicalPi y gU gV))]

)
(define-judgment-form L 
 
  #:mode (GEtaExpandC I O I)
  #:contract (GEtaExpandC gu gv gV)

;; #source file ./ott/lang_simple.ott  lines 1699 - 1702 
 [(GEtaExpand grr gv gV)
  ------------------------------------------- "GEtaExpandCAtomic"
  (GEtaExpandC (CanonicalAtomic grr) gv gV)]

;; #source file ./ott/lang_simple.ott  lines 1703 - 1706 

;; #source file ./ott/lang_simple.ott  lines 1707 - 1711 
 [ (where   z  ,(gensym)) 
  (GEtaExpandC  (substitute  gu   x   z )  gv  (substitute  gV   x   z ) )
  --------------------------------------------------------------------------------- "GEtaExpandCLamRdxAlpha"
  (GEtaExpandC  (CanonicalLam x gu)   (CanonicalLam z gv)  (CanonicalPi y gU gV))]

;; #source file ./ott/lang_simple.ott  lines 1712 - 1716 
 [(GEtaExpandC gU gU_^ gV_^^)
  (GEtaExpandC gV gV_^ gV_^^)
  --------------------------------------------------------------------- "GEtaExpandCPi"
  (GEtaExpandC (CanonicalPi x gU gV) (CanonicalPi x gU_^ gV_^) gV_^^)]

;; #source file ./ott/lang_simple.ott  lines 1718 - 1720 
 [-------------------------------------------- "GEtaExpandCDyn"
  (GEtaExpandC CanonicalDyn CanonicalDyn gV)]

;; #source file ./ott/lang_simple.ott  lines 1721 - 1723 
 [---------------------------------- "GEtaExpandCDynType"
  (GEtaExpandC gu gu CanonicalDyn)]

)
(define-judgment-form L 
 
  #:mode (FEtaExpandC I O I)
  #:contract (FEtaExpandC gu gv gV)

;; #source file ./ott/lang_simple.ott  lines 1729 - 1732 
 [(GEtaExpandC gu gv (CanonicalPi x gU gV))
  ------------------------------------------- "FEtaExpandCPi"
  (FEtaExpandC gu gv (CanonicalPi x gU gV))]

;; #source file ./ott/lang_simple.ott  lines 1733 - 1736 
 [ (where   x  ,(gensym)) 
  -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- "FEtaExpandCDyn"
  (FEtaExpandC (CanonicalAtomic (AtomicSpine y ge))  (CanonicalLam x (CanonicalAtomic (AtomicSpine y (SpineCons ge (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) )))))  CanonicalDyn)]

)
(define-judgment-form L 
 
  #:mode (GradualNormSynth I I O O)
  #:contract (GradualNormSynth Gamma tt gv gU)

;; #source file ./ott/lang_simple.ott  lines 1744 - 1748 
 [
  (GradualSetNorm Gamma gV TT)
  (GradualNormCheck Gamma gv tt gV)
  -------------------------------------------------- "GradualNormSynthAnn"
  (GradualNormSynth Gamma  (TermAnn tt TT)  gv gV)]

;; #source file ./ott/lang_simple.ott  lines 1749 - 1752 
 [
   (side-condition ,(> (term  i ) 0)) 
  ------------------------------------------------------------------------------------------------------------------ "GradualNormSynthSet"
  (GradualNormSynth Gamma (TermSet i) (CanonicalAtomic (AtomicSet i)) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 1754 - 1760 
 [
   (side-condition ,(not (hash-has-key? currently-defined-vars (term  x )) )) 
    
  (GVarLook x gU Gamma)
  (GEtaExpand  (AtomicSpine  x  SpineEmpty)  gv gU)
  -------------------------------------------- "GradualNormSynthVar"
  (GradualNormSynth Gamma x gv gU)]

;; #source file ./ott/lang_simple.ott  lines 1761 - 1764 
 [
  
   (where (ENTTriple  es   gu   gU ) ,(and (hash-has-key? currently-defined-vars (term  x ) ) (hash-ref currently-defined-vars (term  x )) )) 
  -------------------------------------------- "GradualNormSynthVarLook"
  (GradualNormSynth Gamma x gu gU)]

;; #source file ./ott/lang_simple.ott  lines 1768 - 1777 
 [
  (GradualNormSynth Gamma ss gu gV)
  (FEtaExpandC gu gu_^ gV)
  (Domain gV gV_11)
  (GradualNormCheck Gamma gv tt gV_11)
  (BodySub gV_11 gv gu_^ gv_^)
  (CodSub gV_11 gv gV gV_22)
  (GEtaExpandC gv_^ gv_^^ gV_22)
  ------------------------------------------------------ "GradualNormSynthApp"
  (GradualNormSynth Gamma (TermApp ss tt) gv_^^ gV_22)]

)
(define-judgment-form L 
 
  #:mode (GradualNormCheck I O I I)
  #:contract (GradualNormCheck Gamma gv tt gU)

;; #source file ./ott/lang_simple.ott  lines 1785 - 1789 
 [
  
  (GradualNESynth Gamma gt et gu gV)
  (GradualNormSynthCheck Gamma gu_^ gt gu gV gU)
  ------------------------------------- "GradualNormCheckSynthOpt"
  (GradualNormCheck Gamma gu_^ gt gU)]

;; #source file ./ott/lang_simple.ott  lines 1790 - 1796 

;; #source file ./ott/lang_simple.ott  lines 1805 - 1810 

;; #source file ./ott/lang_simple.ott  lines 1812 - 1820 
 [
  (ConsistentSet gV)
  (GradualNormCheck Gamma gU_11 SS gV)
    
  (GradualNormCheck (EnvExt x gU_11 Gamma) gU_22 TT gV)
  -------------------------------------------------------------------------- "GradualNormCheckPi"
  (GradualNormCheck Gamma (CanonicalPi x gU_11 gU_22) (TermPi x SS TT) gV)]

;; #source file ./ott/lang_simple.ott  lines 1821 - 1825 

;; #source file ./ott/lang_simple.ott  lines 1826 - 1831 
 [
   (where   z  ,(gensym)) 
    
  (GradualNormCheck (EnvExt z gU Gamma) gv  (substitute  tt   x   z )   (substitute  gV   y   z ) )
  --------------------------------------------------------------------------------------- "GradualNormCheckLamPiRdxAlpha"
  (GradualNormCheck Gamma  (CanonicalLam z gv)   (TermLam x tt)  (CanonicalPi y gU gV))]

;; #source file ./ott/lang_simple.ott  lines 1832 - 1836 
 [
    
  (GradualNormCheck (EnvExt x CanonicalDyn Gamma) gv tt CanonicalDyn)
  ------------------------------------------------------------------------------ "GradualNormCheckLamDyn"
  (GradualNormCheck Gamma  (CanonicalLam x gv)   (TermLam x tt)  CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 1837 - 1840 
 [
  (GradualSet Gamma gU)
  -------------------------------------------------- "GradualNormCheckDyn"
  (GradualNormCheck Gamma CanonicalDyn TermDyn gU)]

;; #source file ./ott/lang_simple.ott  lines 1842 - 1847 
 [
  (GradualNormSynth Gamma ett gv gV)
  (Meet gU gV gV)
  ------------------------------------------------ "GradualNormCheckEvUp"
  (GradualNormCheck Gamma gv (TermEp ep ett) gU)]

;; #source file ./ott/lang_simple.ott  lines 1848 - 1854 
 [
  (GradualNormSynth Gamma ett gv gV)
  (Meet gU gV gU_^)
   (side-condition ,(not (alpha-equivalent? L (term  gU_^ ) (term  gV )))) 
  ---------------------------------------------------------- "GradualNormCheckEvDown"
  (GradualNormCheck Gamma CanonicalDyn (TermEp ep ett) gU)]

;; #source file ./ott/lang_simple.ott  lines 1856 - 1858 
 [
  -------------------------------------------------- "GradualNormCheckDynAnn"
  (GradualNormCheck Gamma CanonicalDyn TermDyn gU)]

)
(define-judgment-form L 
 
  #:mode (GradualNormSynthCheck I O I I I I)
  #:contract (GradualNormSynthCheck Gamma gu tt gv gV gU)

;; #source file ./ott/lang_simple.ott  lines 1864 - 1867 
 [
   (side-condition ,(and (< 0 (term  i )) (< (term  i ) (term  j )))) 
  -------------------------------------------------------------------------------------------------------- "GradualNormSynthCheckLevel"
  (GradualNormSynthCheck Gamma gu tt gu (CanonicalAtomic (AtomicSet i)) (CanonicalAtomic (AtomicSet j)))]

;; #source file ./ott/lang_simple.ott  lines 1868 - 1872 
 [
  (Meet gU gV gV_^)
   (where  gu  ,(if (alpha-equivalent? (term  gV ) (term  gV_^ )) (term  gv ) (term  CanonicalDyn ))) 
  ---------------------------------------------- "GradualNormSynthCheckConsistent"
  (GradualNormSynthCheck Gamma gu tt gv gV gU)]

)
(define-judgment-form L 
 
  #:mode (GradualElabSynthCheck I O I I I I)
  #:contract (GradualElabSynthCheck Gamma es tt et gV gU)

;; #source file ./ott/lang_simple.ott  lines 1878 - 1881 
 [
  
   (side-condition ,(and (< 0 (term  i )) (< (term  i ) (term  j )))) 
  -------------------------------------------------------------------------------------------------------- "GradualElabSynthCheckLevel"
  (GradualElabSynthCheck Gamma es tt es (CanonicalAtomic (AtomicSet i)) (CanonicalAtomic (AtomicSet j)))]

;; #source file ./ott/lang_simple.ott  lines 1885 - 1889 
 [
  
  (Meet gU gV gV_^)
  ------------------------------------------------------------------------------------ "GradualElabSynthCheckConsistent"
  (GradualElabSynthCheck Gamma (TermEp (EvidenceEv Gamma gV_^ gV_^) es) tt es gV gU)]

)
(define-judgment-form L 
 
  #:mode (GradualNESynthCheck I O O I I I I I)
  #:contract (GradualNESynthCheck Gamma gu es gs gv et gV gU)

;; #source file ./ott/lang_simple.ott  lines 1895 - 1898 
 [
  
   (side-condition ,(and (< 0 (term  i )) (< (term  i ) (term  j )))) 
  ------------------------------------------------------------------------------------------------------------ "GradualNESynthCheckLevel"
  (GradualNESynthCheck Gamma gv es gs gv es (CanonicalAtomic (AtomicSet i)) (CanonicalAtomic (AtomicSet j)))]

;; #source file ./ott/lang_simple.ott  lines 1904 - 1908 
 [
  
  (Meet gU gV gV_^)
   (where  gu  ,(if (alpha-equivalent? (term  gV ) (term  gV_^ )) (term  gv ) (term  CanonicalDyn ))) 
  ---------------------------------------------------------------------------------------- "GradualNESynthCheckConsistent"
  (GradualNESynthCheck Gamma gu (TermEp (EvidenceEv Gamma gV_^ gV_^) es) gs gv es gV gU)]

)
(define-judgment-form L 
 
  #:mode (GradualElabSynth I I O O)
  #:contract (GradualElabSynth Gamma gt et gU)

;; #source file ./ott/lang_simple.ott  lines 1914 - 1918 
 [
  
  (GradualSetNorm Gamma gV gT)
  (GradualElabCheck Gamma et gt gV)
  -------------------------------------------------- "GradualElabSynthAnn"
  (GradualElabSynth Gamma  (TermAnn gt gT)  et gV)]

;; #source file ./ott/lang_simple.ott  lines 1919 - 1922 
 [
   (side-condition ,(> (term  i ) 0)) 
  ---------------------------------------------------------------------------------------------- "GradualElabSynthSet"
  (GradualElabSynth Gamma (TermSet i) (TermSet i) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 1924 - 1929 
 [
   (side-condition ,(not (hash-has-key? currently-defined-vars (term  x )) )) 
    
  (GVarLook x gU Gamma)
  ----------------------------------------------------- "GradualElabSynthVar"
  (GradualElabSynth Gamma x x gU)]

;; #source file ./ott/lang_simple.ott  lines 1930 - 1933 
 [
  
   (where (ENTTriple  es   gu   gU ) ,(and (hash-has-key? currently-defined-vars (term  x ) ) (hash-ref currently-defined-vars (term  x )) )) 
  -------------------------------------------- "GradualElabSynthVarLook"
  (GradualElabSynth Gamma x es gU)]

;; #source file ./ott/lang_simple.ott  lines 1937 - 1943 
 [
  
  (GradualElabSynth Gamma gs es gV)
  (Domain gV gV_11)
  (GradualNECheck Gamma gv et gt gV_11)
  (CodSub gV_11 gv gV gV_22)
  ---------------------------------------------------------------- "GradualElabSynthApp"
  (GradualElabSynth Gamma (TermApp gs gt) (TermApp es et) gV_22)]

)
(define-judgment-form L 
 
  #:mode (GradualElabCheck I O I I)
  #:contract (GradualElabCheck Gamma et gt gU)

;; #source file ./ott/lang_simple.ott  lines 1961 - 1965 
 [
  
  (GradualElabSynth Gamma gt et gV)
  (GradualElabSynthCheck Gamma es gt et gV gU)
  ----------------------------------- "GradualElabCheckSynthOpt"
  (GradualElabCheck Gamma es gt gU)]

;; #source file ./ott/lang_simple.ott  lines 1966 - 1972 

;; #source file ./ott/lang_simple.ott  lines 1973 - 1978 

;; #source file ./ott/lang_simple.ott  lines 1988 - 1996 
 [
  (ConsistentSet gV)
  (GradualNECheck Gamma gU eS gS gV)
    
  (GradualElabCheck (EnvExt x gU Gamma) eT gT gV)
  --------------------------------------------------------------- "GradualElabCheckPi"
  (GradualElabCheck Gamma (TermPi x eS eT) (TermPi x gS gT) gV)]

;; #source file ./ott/lang_simple.ott  lines 1997 - 2001 

;; #source file ./ott/lang_simple.ott  lines 2002 - 2007 
 [
   (where   z  ,(gensym)) 
    
  (GradualElabCheck (EnvExt z gU Gamma) et  (substitute  gt   x   z )   (substitute  gV   y   z ) )
  ---------------------------------------------------------------------------------- "GradualElabCheckLamPiRdxAlpha"
  (GradualElabCheck Gamma  (TermLam z et)   (TermLam x gt)  (CanonicalPi y gU gV))]

;; #source file ./ott/lang_simple.ott  lines 2008 - 2012 
 [
    
  (GradualElabCheck (EnvExt x CanonicalDyn Gamma) et gt CanonicalDyn)
  ------------------------------------------------------------------------- "GradualElabCheckLamDyn"
  (GradualElabCheck Gamma  (TermLam x et)   (TermLam x gt)  CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 2013 - 2016 
 [
  (GradualSet Gamma gU)
  ------------------------------------------------------------------------------- "GradualElabCheckDyn"
  (GradualElabCheck Gamma (TermEp (EvidenceEv Gamma gU gU) TermDyn) TermDyn gU)]

)
(define-judgment-form L 
 
  #:mode (GradualNESynth I I O O O)
  #:contract (GradualNESynth Gamma gt et gu gU)

;; #source file ./ott/lang_simple.ott  lines 2030 - 2034 
 [
  
  (GradualSetNorm Gamma gV gT)
  (GradualNECheck Gamma gu et gt gV)
  --------------------------------------------------- "GradualNESynthAnn"
  (GradualNESynth Gamma  (TermAnn gt gT)  et gu gV)]

;; #source file ./ott/lang_simple.ott  lines 2035 - 2038 
 [
   (side-condition ,(> (term  i ) 0)) 
  ---------------------------------------------------------------------------------------------------------------------------- "GradualNESynthSet"
  (GradualNESynth Gamma (TermSet i) (TermSet i) (CanonicalAtomic (AtomicSet i)) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 2040 - 2046 
 [
    (side-condition ,(not (hash-has-key? currently-defined-vars (term  x )) ))  
    
  (GVarLook x gU Gamma)
  (GEtaExpand  (AtomicSpine  x  SpineEmpty)  gv gU)
  ------------------------------------------------------ "GradualNESynthVar"
  (GradualNESynth Gamma x x gv gU)]

;; #source file ./ott/lang_simple.ott  lines 2047 - 2050 
 [
  
   (where (ENTTriple  es   gu   gU ) ,(and (hash-has-key? currently-defined-vars (term  x ) ) (hash-ref currently-defined-vars (term  x )) )) 
  --------------------------------------------- "GradualNESynthVarLook"
  (GradualNESynth Gamma x es gu gU)]

;; #source file ./ott/lang_simple.ott  lines 2054 - 2063 
 [
  
  (GradualNESynth Gamma gs es gu gV)
  (FEtaExpandC gu gu_^ gV)
  (Domain gV gV_11)
  (GradualNECheck Gamma gv et gt gV_11)
  (BodySub gV_11 gv gu_^ gv_^)
  (CodSub gV_11 gv gV gV_22)
  (GEtaExpandC gv_^ gv_^^ gV_22)
  -------------------------------------------------------------------- "GradualNESynthApp"
  (GradualNESynth Gamma (TermApp gs gt) (TermApp es et) gv_^^ gV_22)]

)
(define-judgment-form L 
 
  #:mode (GradualNECheck I O O I I)
  #:contract (GradualNECheck Gamma gu et gt gU)

;; #source file ./ott/lang_simple.ott  lines 2082 - 2086 
 [
  (GradualNESynth Gamma gt et gu gV)
  (GradualNESynthCheck Gamma gu_^ et_^ gt gu et gV gU)
  ---------------------------------------- "GradualNECheckSynthOpt"
  (GradualNECheck Gamma gu_^ et_^ gt gU)]

;; #source file ./ott/lang_simple.ott  lines 2087 - 2094 

;; #source file ./ott/lang_simple.ott  lines 2095 - 2100 

;; #source file ./ott/lang_simple.ott  lines 2110 - 2118 
 [
  (ConsistentSet gV)
  (GradualNECheck Gamma gU_11 eS gS gV)
    
  (GradualNECheck (EnvExt x gU_11 Gamma) gU_22 eT gT gV)
  ----------------------------------------------------------------------------------------- "GradualNECheckPi"
  (GradualNECheck Gamma (CanonicalPi x gU_11 gU_22) (TermPi x eS eT) (TermPi x gS gT) gV)]

;; #source file ./ott/lang_simple.ott  lines 2119 - 2123 

;; #source file ./ott/lang_simple.ott  lines 2124 - 2129 
 [
   (where   z  ,(gensym)) 
    
  (GradualNECheck (EnvExt z gU Gamma) gu et  (substitute  gt   x   z )   (substitute  gV   y   z ) )
  ------------------------------------------------------------------------------------------------------ "GradualNECheckLamPiRdxAlpha"
  (GradualNECheck Gamma  (CanonicalLam z gu)   (TermLam z et)   (TermLam x gt)  (CanonicalPi y gU gV))]

;; #source file ./ott/lang_simple.ott  lines 2130 - 2134 
 [
    
  (GradualNECheck (EnvExt x CanonicalDyn Gamma) gu et gt CanonicalDyn)
  --------------------------------------------------------------------------------------------- "GradualNECheckLamDyn"
  (GradualNECheck Gamma  (CanonicalLam x gu)   (TermLam x et)   (TermLam x gt)  CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 2135 - 2138 
 [
  (GradualSet Gamma gU)
  ------------------------------------------------------------------------------------------ "GradualNECheckDyn"
  (GradualNECheck Gamma CanonicalDyn (TermEp (EvidenceEv Gamma gU gU) TermDyn) TermDyn gU)]
)
;; #source file ./ott/lang_simple.ott  lines 2146 - 2146 
#| 

;;; definitions 

(define-judgment-form
  L
  #:mode (EvType I I I)
  #:contract (EvType Gamma et gU)

;; #source file ./ott/lang_simple.ott  lines 2157 - 2160 
 [
   (side-condition ,(> (term  i ) 0)) 
  ------------------------------------------------------------------------ "EvTypeSet"
  (EvType Gamma (TermSet i) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 2162 - 2166 
 [
    
  (GVarLook x gU Gamma)
  ------------------------------- "EvTypeVar"
  (EvType Gamma x gU)]

;; #source file ./ott/lang_simple.ott  lines 2170 - 2176 
 [
  
  (EvType Gamma es gV)
  (Domain gV gU)
  (GradualNormCheck Gamma gv et gU)
  (CodSub gU gv gV gV_22)
  -------------------------------------- "EvTypeApp"
  (EvType Gamma (TermApp es et) gV_22)]

;; #source file ./ott/lang_simple.ott  lines 2179 - 2183 
 [
  (EvType Gamma et gU)
  (EvConsistent ep gU gV)
  ---------------------------------- "EvTypeEv"
  (EvType Gamma (TermEp ep et) gV)]

;; #source file ./ott/lang_simple.ott  lines 2184 - 2188 
 [
  (EvType Gamma et (CanonicalAtomic (AtomicSet i)))
   (side-condition ,(and (< 0 (term  i )) (< (term  i ) (term  j )))) 
  --------------------------------------------------- "EvTypeLevel"
  (EvType Gamma et (CanonicalAtomic (AtomicSet j)))]

;; #source file ./ott/lang_simple.ott  lines 2189 - 2195 
 [
  
  (ConsistentSet gV)
  (GradualNormCheck Gamma gU eS gV)
    
  (EvType (EnvExt x gU Gamma) eT gV)
  ------------------------------------ "EvTypePi"
  (EvType Gamma (TermPi x eS eT) gV)]

;; #source file ./ott/lang_simple.ott  lines 2198 - 2202 
 [
    
  (EvType (EnvExt x gU Gamma) et gV)
  ------------------------------------------------------- "EvTypeLamPi"
  (EvType Gamma  (TermLam x et)  (CanonicalPi x gU gV))]

;; #source file ./ott/lang_simple.ott  lines 2204 - 2208 
 [
    
  (EvType (EnvExt x CanonicalDyn Gamma) et CanonicalDyn)
  ---------------------------------------------- "EvTypeLamDyn"
  (EvType Gamma  (TermLam x et)  CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 2209 - 2213 
 [
  (GradualSet Gamma gU)
  (EvConsistent ep gU gU)
  --------------------------------------- "EvTypeDyn"
  (EvType Gamma (TermEp ep TermDyn) gU)]
)
;; #source file ./ott/lang_simple.ott  lines 2216 - 2216 
|# 

;;; definitions 

(define-judgment-form
  L
  #:mode (SimpleSmallStep I O)
  #:contract (SimpleSmallStep s t)

;; #source file ./ott/lang_simple.ott  lines 2230 - 2232 
 [
  --------------------------------------- "SimpleSmallStepAnn"
  (SimpleSmallStep  (TermAnn sv T)  sv)]

;; #source file ./ott/lang_simple.ott  lines 2233 - 2235 
 [
  ------------------------------------------------------------------------ "SimpleSmallStepApp"
  (SimpleSmallStep (TermApp  (TermLam x t)  sv)  (esubst  t   x   sv ) )]

;; #source file ./ott/lang_simple.ott  lines 2237 - 2240 
 [
  (SimpleSmallStep s t)
  ------------------------------------------------------------- "SimpleSmallStepContext"
  (SimpleSmallStep  (in-hole  SC   s )   (in-hole  SC   t ) )]

)
(define-judgment-form L 
 
  #:mode (SmallStep I O)
  #:contract (SmallStep es et)

;; #source file ./ott/lang_simple.ott  lines 2248 - 2251 
 [
  (ConsistentTrans ep_11 ep_22 ep_33)
  ------------------------------------------------------------------ "SmallStepAscr"
  (SmallStep (TermEp ep_11  (TermEp ep_22 rv) ) (TermEp ep_33 rv))]

;; #source file ./ott/lang_simple.ott  lines 2254 - 2258 
 [
   (side-condition ,(empty? (judgment-holds (ConsistentTrans  ep_11   ep_22  ep_9999) ep_9999))) 
   (side-condition ,(error 'RuntimeError "Can't cast:\n    ~a\nto\n   ~a\nin term ~a" (printEvType (term  ep_11 )) (printEvType (term  ep_22 )) (pt (term  rv )) )) 
  ---------------------------------------------------------- "SmallStepAscrFail"
  (SmallStep (TermEp ep_11  (TermEp ep_22 rv) ) TermError)]

;; #source file ./ott/lang_simple.ott  lines 2262 - 2264 
 [
  -------------------------------------------------------------------- "SmallStepApp"
  (SmallStep (TermApp  (TermLam x et)  ev)  (esubst  et   x   ev ) )]

;; #source file ./ott/lang_simple.ott  lines 2271 - 2276 
 [
  (EvDom ep_11 ep_33)
  (ConsistentTrans ep_22 ep_33 ep_44)
  (EvCod rv ep_11 ep_55)
  -------------------------------------------------------------------------------------------------------------------------------------- "SmallStepAppEv"
  (SmallStep (TermApp  (TermEp ep_11  (TermLam x et) )   (TermEp ep_22 rv) ) (TermEp ep_55   (esubst  et   x   (TermEp ep_44 rv) )  ))]

;; #source file ./ott/lang_simple.ott  lines 2280 - 2283 
 [
  
  (SmallStep (TermApp  (TermEp ep_11  (TermLam x et) )   (TermEp (EvidenceEv EnvEmpty CanonicalDyn CanonicalDyn) rv) ) es)
  --------------------------------------------------------------- "SmallStepAppEvRaw"
  (SmallStep (TermApp  (TermEp ep_11  (TermLam x et) )  rv) es)]

;; #source file ./ott/lang_simple.ott  lines 2284 - 2287 
 [(EvCod ev ep_11 ep_22)
  -------------------------------------------------------------------------- "SmallStepAppDyn"
  (SmallStep (TermApp  (TermEp ep_11 TermDyn)  ev) (TermEp ep_22 TermDyn))]

;; #source file ./ott/lang_simple.ott  lines 2288 - 2293 
 [
  
  (EvDom ep_11 ep_33)
   (side-condition ,(empty? (judgment-holds (ConsistentTrans  ep_22   ep_33  ep_9999) ep_9999))) 
   (side-condition ,(error 'RuntimeError "Can't cast:\n    ~a\nto\n   ~a\nin term ~a" (printEvType (term  ep_33 )) (printEvType (term  ep_22 )) (pt (term   (TermApp ru rv)  )) )) 
  ------------------------------------------------------------------------- "SmallStepAppFailTrans"
  (SmallStep (TermApp  (TermEp ep_11 ru)   (TermEp ep_22 rv) ) TermError)]

;; #source file ./ott/lang_simple.ott  lines 2294 - 2298 
 [
  
   (side-condition ,(empty? (judgment-holds (EvDom  ep_11  ep_9999) ep_9999))) 
   (side-condition ,(error 'RuntimeError "Can't cast:\n    ~a\nto\n   ~a\nin term ~a" (printEvType (term  ep_11 )) (printEvType (term  (EvidenceEv EnvEmpty (CanonicalPi x CanonicalDyn CanonicalDyn) (CanonicalPi x CanonicalDyn CanonicalDyn)) )) (pt (term   (TermApp rv ev)  )) )) 
  -------------------------------------------------------- "SmallStepAppFailDom"
  (SmallStep (TermApp  (TermEp ep_11 rv)  ev) TermError)]

;; #source file ./ott/lang_simple.ott  lines 2304 - 2308 
 [
   (side-condition ,(empty? (judgment-holds (Domain  gU  gV_9999) gV_9999))) 
   (side-condition ,(error 'RuntimeError "Can't cast:\n    ~a\nto\n   ~a\nin term ~a" (printEvType (term  (EvidenceEv EnvEmpty gU gU) )) (printEvType (term  (EvidenceEv EnvEmpty (CanonicalPi x CanonicalDyn CanonicalDyn) (CanonicalPi x CanonicalDyn CanonicalDyn)) )) (pt (term   (TermApp TermDyn ev)  )) )) 
  ------------------------------------------------------------- "SmallStepAppDynFail"
  (SmallStep (TermApp  (TermEp ep_11 TermDyn)  ev) TermError)]

;; #source file ./ott/lang_simple.ott  lines 2311 - 2316 
 [
  (SmallStep es et)
   (side-condition ,(not (alpha-equivalent? L (term  es ) (term TermError)))) 
   (side-condition ,(not (alpha-equivalent? L (term  et ) (term TermError)))) 
  --------------------------------------------------------- "SmallStepContext"
  (SmallStep  (in-hole  EC   es )   (in-hole  EC   et ) )]

;; #source file ./ott/lang_simple.ott  lines 2317 - 2320 
 [
  (SmallStep es TermError)
  --------------------------------------------- "SmallStepContextErr"
  (SmallStep  (in-hole  EC   es )  TermError)]

)
(define-judgment-form L 
 
  #:mode (ConsistentTrans I I O)
  #:contract (ConsistentTrans ep_11 ep_22 ep_33)

;; #source file ./ott/lang_simple.ott  lines 2326 - 2330 
 [(Meet gU_11 gU_22 gU_33)
  (Meet gV_11 gV_22 gV_33)
  ------------------------------------------------------------------------------------------------------------------------- "ConsistentTransDef"
  (ConsistentTrans (EvidenceEv EnvEmpty gU_11 gV_11) (EvidenceEv EnvEmpty gU_22 gV_22) (EvidenceEv EnvEmpty gU_33 gV_33))]

)
(define-judgment-form L 
 
  #:mode (EvDom I O)
  #:contract (EvDom ep_11 ep_22)

;; #source file ./ott/lang_simple.ott  lines 2336 - 2340 
 [(Domain gU gU_^)
  (Domain gV gV_^)
  --------------------------------------------------------------------- "EvDomPair"
  (EvDom (EvidenceEv EnvEmpty gU gV) (EvidenceEv EnvEmpty gU_^ gV_^))]

)
(define-judgment-form L 
 
  #:mode (EvCod I I O)
  #:contract (EvCod ev ep_11 ep_22)

;; #source file ./ott/lang_simple.ott  lines 2347 - 2355 
 [
  (Domain gU gU_11)
  (Domain gV gV_11)
  (GradualNormCheck EnvEmpty gu ev gU_11)
  (GradualNormCheck EnvEmpty gv ev gV_11)
  (CodSub gU_11 gu gU gU_22)
  (CodSub gV_11 gv gV gV_22)
  -------------------------------------------------------------------------- "EvCodPair"
  (EvCod ev (EvidenceEv EnvEmpty gU gV) (EvidenceEv EnvEmpty gU_22 gV_22))]
)
;; #source file ./ott/lang_simple.ott  lines 2370 - 2384 
(define-judgment-form
  L
  #:mode (ElabNormType I I O)
  [ (GradualNESynth Gamma gs es gu gU)
  ---------------------------------
  (ElabNormType Gamma gs (ENTTriple gu es gU))]

)

