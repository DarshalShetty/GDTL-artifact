;; #source  
;;; generated by Ott 0.28 from: ./ott/lang_simple.ott

#lang racket
(require redex/reduction-semantics)

;; #source file ./ott/lang_simple.ott  lines 4 - 6 
;; #source file ./ott/lang_simple.ott  lines 8 - 10 
(provide (all-defined-out))

;; #source file ./ott/lang_simple.ott  lines 12 - 80 
;; #source file ./ott/lang_simple.ott  lines 85 - 87 
;; #source file ./ott/lang_simple.ott  lines 90 - 90 
;; #source file ./ott/lang_simple.ott  lines 96 - 104 and file ./ott/lang_simple.ott  lines 109 - 134 and file ./ott/lang_simple.ott  lines 139 - 148 and file ./ott/lang_simple.ott  lines 150 - 155 and file ./ott/lang_simple.ott  lines 157 - 162 and file ./ott/lang_simple.ott  lines 165 - 170 and file ./ott/lang_simple.ott  lines 172 - 174 and file ./ott/lang_simple.ott  lines 179 - 200 and file ./ott/lang_simple.ott  lines 205 - 215 and file ./ott/lang_simple.ott  lines 217 - 222 and file ./ott/lang_simple.ott  lines 224 - 227 and file ./ott/lang_simple.ott  lines 235 - 236 and file ./ott/lang_simple.ott  lines 244 - 255 and file ./ott/lang_simple.ott  lines 259 - 265 and file ./ott/lang_simple.ott  lines 268 - 273 and file ./ott/lang_simple.ott  lines 275 - 283 and file ./ott/lang_simple.ott  lines 287 - 289 and file ./ott/lang_simple.ott  lines 291 - 293 and file ./ott/lang_simple.ott  lines 295 - 297 and file ./ott/lang_simple.ott  lines 300 - 306 and file ./ott/lang_simple.ott  lines 308 - 314 and file ./ott/lang_simple.ott  lines 360 - 363 and file ./ott/lang_simple.ott  lines 365 - 369 and file ./ott/lang_simple.ott  lines 371 - 375 and file ./ott/lang_simple.ott  lines 478 - 483 and file ./ott/lang_simple.ott  lines 486 - 488 and file ./ott/lang_simple.ott  lines 490 - 492 and file ./ott/lang_simple.ott  lines 494 - 495 
(define-language L  

(level i j ::= number)

;; #source file ./ott/lang_simple.ott  lines 205 - 215 
  (canonical gu gv gU gV ::= 
    (CanonicalLam var canonical)
    CanonicalDyn
    (CanonicalAtomic atomic)
    (CanonicalPi var canonical canonical))
  ;grammar_pp, 2817: and 
;; #source file ./ott/lang_simple.ott  lines 217 - 222 
  (atomic grr gRR ::= 
    (AtomicSpine var spine)
    (AtomicSet level))
  ;grammar_pp, 2817: and 
;; #source file ./ott/lang_simple.ott  lines 224 - 227 
  (spine ge ::= 
    SpineEmpty
    (SpineCons spine canonical))

;; #source file ./ott/lang_simple.ott  lines 235 - 236 
  (epsilon ep ::= 
    (EvidencePair canonical canonical))

;; #source file ./ott/lang_simple.ott  lines 371 - 375 
  (Env ::= 
    EnvEmpty
    (EnvExt var canonical Env)
    (Envconcat Env Env))

(iinf ::= number)

;; #source file ./ott/lang_simple.ott  lines 109 - 134 
  (term ss tt ett SS TT ::= 
    (TermLam var term)
    (TermApp term term)
    var
    (TermSet level)
    (TermPi var term term)
    (TermAnn term term)
    (TermEp epsilon term)
    TermDyn
    (TermDynAnn canonical)
    TermError)

;; #source file ./ott/lang_simple.ott  lines 300 - 306 
  (simpleContext SC ::= 
    (TermPi x hole T)
    (TermPi x sV hole)
    (TermApp hole t)
    (TermApp sv hole)
    (TermAnn hole T))

;; #source file ./ott/lang_simple.ott  lines 287 - 289 
  (dummyeu dummyev dummyeueU dummyeueV ::= 
    (DummyEvidenceValueEv epsilon term)
    (DummyEvidenceValueRaw term))

;; #source file ./ott/lang_simple.ott  lines 494 - 495 
  (esgU ::= 
    (ElabTypePair term canonical))

;; #source file ./ott/lang_simple.ott  lines 308 - 314 
  (evalContext EC ::= 
    (TermPi x hole eT)
    (TermPi x eV hole)
    (TermApp hole et)
    (TermApp ev hole)
    (TermEp ep hole))

;; #source file ./ott/lang_simple.ott  lines 486 - 488 
  (is js ::= 
    (LevelMultiSetSingleton level)
    (LevelMultiSetSum is is))

;; #source file ./ott/lang_simple.ott  lines 490 - 492 
  (iinfs jinfs ::= 
    (UniverseMultiSetSingleton iinf)
    (UniverseMultiSetSum iinfs iinfs))

;; #source file ./ott/lang_simple.ott  lines 150 - 155 
  (sa ta Sa Ta ::= 
    (TermLam var term)
    (TermApp term term)
    var
    (TermPi var term term)
    (TermSet level))

;; #source file ./ott/lang_simple.ott  lines 259 - 265 
  (ru rv rU rV ::= 
    (TermPi var term term)
    (TermLam var term)
    var
    (TermApp term term)
    (TermSet level)
    (TermDynAnn canonical))

;; #source file ./ott/lang_simple.ott  lines 295 - 297 
  (simpleSpine se ::= 
    var
    (TermApp term term))

;; #source file ./ott/lang_simple.ott  lines 365 - 369 
  (Gamma ::= 
    EnvEmpty
    (EnvExt var canonical Env)
    (Envconcat Env Env))

;; #source file ./ott/lang_simple.ott  lines 275 - 283 
  (eu ev eU eV ::= 
    (TermEp epsilon term)
    (TermPi var term term)
    (TermLam var term)
    var
    (TermApp term term)
    (TermSet level)
    (TermDynAnn canonical))

;; #source file ./ott/lang_simple.ott  lines 179 - 200 
  (gs gt gS gT ::= 
    (TermLam var term)
    (TermApp term term)
    var
    (TermSet level)
    (TermPi var term term)
    (TermAnn term term)
    TermDyn)

;; #source file ./ott/lang_simple.ott  lines 139 - 148 
  (s t S T ::= 
    (TermLam var term)
    (TermApp term term)
    var
    (TermPi var term term)
    (TermSet level)
    (TermAnn term term))

;; #source file ./ott/lang_simple.ott  lines 244 - 255 
  (es et eS eT ::= 
    (TermPi var term term)
    (TermLam var term)
    var
    (TermApp term term)
    (TermDynAnn canonical)
    (TermSet level)
    (TermEp epsilon term)
    TermError)

;; #source file ./ott/lang_simple.ott  lines 291 - 293 
  (evidenceSpine ve ::= 
    var
    (TermApp term term))

;; #source file ./ott/lang_simple.ott  lines 360 - 363 
  (SGamma ::= 
    EnvEmpty
    (EnvExt var canonical Env)
    (Envconcat Env Env))

;; #source file ./ott/lang_simple.ott  lines 172 - 174 
  (e ::= 
    SpineEmpty
    (SpineCons spine canonical))

;; #source file ./ott/lang_simple.ott  lines 268 - 273 
  (simpleValue su sv sU sV ::= 
    (TermPi var term term)
    (TermLam var term)
    var
    (TermApp term term)
    (TermSet level))

;; #source file ./ott/lang_simple.ott  lines 165 - 170 
  (rr RR ::= 
    (AtomicSpine var spine)
    (AtomicSet level))

;; #source file ./ott/lang_simple.ott  lines 157 - 162 
  (u v U V ::= 
    (CanonicalLam var canonical)
    (CanonicalAtomic atomic)
    (CanonicalPi var canonical canonical))
   (var x y z X Y Z ::= variable-not-otherwise-mentioned)

    #:binding-forms

    (TermLam x tt #:refers-to (shadow x))
    (TermPi x SS TT #:refers-to (shadow x))
    (StaticTermLam x t #:refers-to (shadow x))
    (StaticTermPi x S T #:refers-to (shadow x))
    (StaticTermNoAnnLam x ta #:refers-to (shadow x))
    (StaticTermNoAnnPi x Sa Ta #:refers-to (shadow x))
    (StaticCanonicalLam x u #:refers-to (shadow x))

    (GradualTermLam x gt #:refers-to (shadow x))
    (GradualTermPi x gS gT #:refers-to (shadow x))
    (CanonicalLam x gu #:refers-to (shadow x))
    (CanonicalPi x gU gV #:refers-to (shadow x))

    (EvidenceTermLam x et #:refers-to (shadow x))
    (RawValueLam x et #:refers-to (shadow x))
    (SimpleValueLam x ta)
    (EvidenceValueLam x et #:refers-to (shadow x))

)

;;;; subrules 
;; #source file ./ott/lang_simple.ott  lines 508 - 508 and file ./ott/lang_simple.ott  lines 509 - 509 and file ./ott/lang_simple.ott  lines 512 - 512 and file ./ott/lang_simple.ott  lines 513 - 513 and file ./ott/lang_simple.ott  lines 514 - 514 and file ./ott/lang_simple.ott  lines 515 - 515 and file ./ott/lang_simple.ott  lines 516 - 516 and file ./ott/lang_simple.ott  lines 518 - 518 and file ./ott/lang_simple.ott  lines 519 - 519 and file ./ott/lang_simple.ott  lines 520 - 520 and file ./ott/lang_simple.ott  lines 521 - 521 and file ./ott/lang_simple.ott  lines 522 - 522 and file ./ott/lang_simple.ott  lines 523 - 523 and file ./ott/lang_simple.ott  lines 524 - 524 and file ./ott/lang_simple.ott  lines 525 - 525 and file ./ott/lang_simple.ott  lines 526 - 526 and file ./ott/lang_simple.ott  lines 527 - 527 and file ./ott/lang_simple.ott  lines 528 - 528 and file ./ott/lang_simple.ott  lines 529 - 529 
;; #source file ./ott/lang_simple.ott  lines 540 - 551 
;; #source file ./ott/lang_simple.ott  lines 553 - 561 

(define-metafunction L 
  succ : i -> i
  [(succ i) ,(+ (term i) 1)])
  
  (define-metafunction L 
  pred : i -> i
  [(pred i) ,(- (term i) 1)])

;;; definitions 

(define-judgment-form
  L
  #:mode (GVarLook I O I)
  #:contract (GVarLook x gU Gamma)

;; #source file ./ott/lang_simple.ott  lines 570 - 572 
 [
  ------------------------------------- "GVarLookHead"
  (GVarLook x gU (EnvExt x gU Gamma))]

;; #source file ./ott/lang_simple.ott  lines 573 - 577 
 [
  (GVarLook x gU Gamma)
   (side-condition ,(not (alpha-equivalent? (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  ------------------------------------- "GVarLookTail"
  (GVarLook x gU (EnvExt y gV Gamma))]

)
(define-judgment-form L 
 
  #:mode (GVarFree I I)
  #:contract (GVarFree x Gamma)

;; #source file ./ott/lang_simple.ott  lines 581 - 583 
 [----------------------- "GFreeLookNil"
  (GVarFree x EnvEmpty)]

;; #source file ./ott/lang_simple.ott  lines 584 - 588 
 [
   (side-condition ,(not (alpha-equivalent? (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  (GVarFree x Gamma)
  ---------------------------------- "GFreeLookCons"
  (GVarFree x (EnvExt y gU Gamma))]
)

;;; definitions 

(define-judgment-form
  L
  #:mode (Universe I I O)
  #:contract (Universe Gamma gu iinf)

;; #source file ./ott/lang_simple.ott  lines 609 - 612 
 [
   (side-condition ,(> (term  i ) 0)) 
  ----------------------------------------------------------------- "UniverseSet"
  (Universe Gamma (CanonicalAtomic (AtomicSet i))   (succ  i )  )]

;; #source file ./ott/lang_simple.ott  lines 613 - 618 
 [
  (GVarLook x gV Gamma)
  (Universe Gamma gV  i )
   (side-condition ,(> (term  i ) 0)) 
  ---------------------------------------------------------------------------------- "UniverseVar"
  (Universe Gamma (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) )   (pred  i )  )]

;; #source file ./ott/lang_simple.ott  lines 619 - 623 
 [
  (Universe Gamma gU  i )
  (Universe (EnvExt x gU Gamma) gV  j )
  ------------------------------------------------------------ "UniversePi"
  (Universe Gamma (CanonicalPi x gU gV)  (max   i     j  ) )]

;; #source file ./ott/lang_simple.ott  lines 624 - 627 
 [
  (Universe Gamma gu  i )
  -------------------------------------------- "UniverseLam"
  (Universe Gamma  (CanonicalLam x gu)   i )]

;; #source file ./ott/lang_simple.ott  lines 628 - 632 
 [
  (Universe Gamma (CanonicalAtomic (AtomicSpine x ge))  i )
  (Universe Gamma gv  j )
  ------------------------------------------------------------------------------------------ "UniverseSpine"
  (Universe Gamma (CanonicalAtomic (AtomicSpine x (SpineCons ge gv)))  (max   i     j  ) )]

;; #source file ./ott/lang_simple.ott  lines 633 - 635 
 [
  ---------------------------------------- "UniverseDyn"
  (Universe Gamma CanonicalDyn  +inf.0 )]

)
(define-judgment-form L 
 
  #:mode (SUniverse I I O)
  #:contract (SUniverse SGamma u i)

;; #source file ./ott/lang_simple.ott  lines 641 - 644 
 [
   (side-condition ,(> (term  i ) 0)) 
  ----------------------------------------------------------------- "SUniverseSet"
  (SUniverse SGamma (CanonicalAtomic (AtomicSet i))  (succ  i ) )]

;; #source file ./ott/lang_simple.ott  lines 645 - 650 
 [
  (GVarLook x V SGamma)
  (SUniverse SGamma V i)
   (side-condition ,(> (term  i ) 0)) 
  ---------------------------------------------------------------------------------- "SUniverseVar"
  (SUniverse SGamma (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) )  (pred  i ) )]

;; #source file ./ott/lang_simple.ott  lines 652 - 656 
 [
  (SUniverse SGamma U i)
  (SUniverse (EnvExt x U SGamma) V j)
  -------------------------------------------------------- "SUniversePi"
  (SUniverse SGamma (CanonicalPi x U V)  (max  i   j ) )]

;; #source file ./ott/lang_simple.ott  lines 657 - 659 
 [
  
  --------------------------------------------- "SUniverseLam"
  (SUniverse SGamma  (CanonicalLam x u)   0 )]

;; #source file ./ott/lang_simple.ott  lines 660 - 664 
 [
  
  (SUniverse SGamma (CanonicalAtomic (AtomicSpine x e)) i)
  (SUniverse SGamma v j)
  -------------------------------------------------------------------------------------- "SUniverseSpine"
  (SUniverse SGamma (CanonicalAtomic (AtomicSpine x (SpineCons e v)))  (max  i   j ) )]
)

;;; definitions 

(define-judgment-form
  L
  #:mode (StaticHsub I I I I O)
  #:contract (StaticHsub x U u u_^ v)

;; #source file ./ott/lang_simple.ott  lines 694 - 696 
 [
  ------------------------------------------------------------------------------------ "StaticHsubSet"
  (StaticHsub x U u (CanonicalAtomic (AtomicSet i)) (CanonicalAtomic (AtomicSet i)))]

;; #source file ./ott/lang_simple.ott  lines 699 - 704 
 [
  (StaticHsub x U u U U_^)
  (StaticHsub x U u V V_^)
   (side-condition ,(not (alpha-equivalent? (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  ---------------------------------------------------------------- "StaticHsubPi"
  (StaticHsub x U u (CanonicalPi y U V) (CanonicalPi y U_^ V_^))]

;; #source file ./ott/lang_simple.ott  lines 706 - 710 
 [
  (StaticHsub x U u v v_^)
   (side-condition ,(not (alpha-equivalent? (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  ---------------------------------------------------------------- "StaticHsubLam"
  (StaticHsub x U u  (CanonicalLam y v)   (CanonicalLam y v_^) )]

;; #source file ./ott/lang_simple.ott  lines 713 - 716 
 [
   (side-condition ,(not (alpha-equivalent? (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  ---------------------------------------------------------------------------------------------------------------------- "StaticHsubDiffNil"
  (StaticHsub x U u (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ))]

;; #source file ./ott/lang_simple.ott  lines 717 - 722 
 [
  
   (side-condition ,(not (alpha-equivalent? (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  (StaticHsub x U u (CanonicalAtomic (AtomicSpine y e)) (CanonicalAtomic (AtomicSpine y e_^)))
  (StaticHsub x U u v v_^)
  ---------------------------------------------------------------------------------------------------------------------------- "StaticHsubDiffCons"
  (StaticHsub x U u (CanonicalAtomic (AtomicSpine y (SpineCons e v))) (CanonicalAtomic (AtomicSpine y (SpineCons e_^ v_^))))]

;; #source file ./ott/lang_simple.ott  lines 723 - 726 
 [
  
  (StaticHsubR x U u_11 (AtomicSpine x (SpineCons e u_22)) v_22 V_^)
  --------------------------------------------------------------------------------- "StaticHsubSpine"
  (StaticHsub x U u_11 (CanonicalAtomic (AtomicSpine x (SpineCons e u_22))) v_22)]

)
(define-judgment-form L 
 
  #:mode (StaticHsubR I I I I O O)
  #:contract (StaticHsubR x U u rr v V)

;; #source file ./ott/lang_simple.ott  lines 737 - 739 
 [
  -------------------------------------------------------- "StaticHsubRHead"
  (StaticHsubR x U u  (AtomicSpine  x  SpineEmpty)  u U)]

;; #source file ./ott/lang_simple.ott  lines 740 - 749 
 [
  
  (StaticHsub x U u_11 u_22 u_33)
  (StaticHsubR x U u_11 (AtomicSpine x e)  (CanonicalLam y v_11)  (CanonicalPi y V_11 V_22))
  (StaticHsub y V_11 u_33 v_11 v_22)
  (StaticHsub y V_11 u_33 V_22 V_^)
  ---------------------------------------------------------------------- "StaticHsubRSpine"
  (StaticHsubR x U u_11  (AtomicSpine x (SpineCons e u_22))  v_22 V_^)]
)

;;; definitions 

(define-judgment-form
  L
  #:mode (SWellFormed I)
  #:contract (SWellFormed SGamma)

;; #source file ./ott/lang_simple.ott  lines 759 - 761 
 [------------------------ "SWellFormedEmpty"
  (SWellFormed EnvEmpty)]

;; #source file ./ott/lang_simple.ott  lines 762 - 767 
 [
  (SWellFormed SGamma)
  (StaticSet SGamma U)
  (GVarFree x SGamma)
  ----------------------------------- "SWellFormedExt"
  (SWellFormed (EnvExt x U SGamma))]

)
(define-judgment-form L 
 
  #:mode (StaticSet I I)
  #:contract (StaticSet SGamma U)

;; #source file ./ott/lang_simple.ott  lines 776 - 779 
 [
  
  (StaticCSynth SGamma rr (CanonicalAtomic (AtomicSet i)))
  ----------------------------------------- "StaticSetSet"
  (StaticSet SGamma (CanonicalAtomic rr))]

;; #source file ./ott/lang_simple.ott  lines 782 - 787 
 [
  (StaticSet SGamma U)
  (SWellFormed (EnvExt x U SGamma))
  (StaticSet (EnvExt x U SGamma) V)
  ---------------------------------------- "StaticSetPi"
  (StaticSet SGamma (CanonicalPi x U V))]

)
(define-judgment-form L 
 
  #:mode (StaticCSynth I I O)
  #:contract (StaticCSynth SGamma rr U)

;; #source file ./ott/lang_simple.ott  lines 795 - 798 
 [
   (side-condition ,(> (term  i ) 0)) 
  --------------------------------------------------------------------------------- "StaticCSynthSet"
  (StaticCSynth SGamma (AtomicSet i) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 800 - 804 
 [
  
  (SWellFormed SGamma)
  (GVarLook x U SGamma)
  -------------------------------------------------------- "StaticCSynthVar"
  (StaticCSynth SGamma  (AtomicSpine  x  SpineEmpty)  U)]

;; #source file ./ott/lang_simple.ott  lines 808 - 814 
 [
  
  (StaticCSynth SGamma (AtomicSpine x e) (CanonicalPi y U_11 U_22))
  (StaticCCheck SGamma u U_11)
  (StaticHsub y U_11 u U_22 V)
  --------------------------------------------------------- "StaticCSynthApp"
  (StaticCSynth SGamma (AtomicSpine x (SpineCons e u)) V)]

)
(define-judgment-form L 
 
  #:mode (StaticCCheck I I I)
  #:contract (StaticCCheck SGamma u U)

;; #source file ./ott/lang_simple.ott  lines 822 - 825 
 [
  
  (StaticCSynth SGamma rr (CanonicalAtomic RR))
  ----------------------------------------------------------------- "StaticCCheckSynth"
  (StaticCCheck SGamma (CanonicalAtomic rr) (CanonicalAtomic RR))]

;; #source file ./ott/lang_simple.ott  lines 826 - 830 
 [
  
  (StaticCSynth SGamma rr (CanonicalAtomic (AtomicSet i)))
   (side-condition ,(and (< 0 (term  i )) (< (term  i ) (term  j )))) 
  ---------------------------------------------------------------------------- "StaticCCheckLevel"
  (StaticCCheck SGamma (CanonicalAtomic rr) (CanonicalAtomic (AtomicSet j)))]

;; #source file ./ott/lang_simple.ott  lines 832 - 836 
 [
  
  (SWellFormed (EnvExt x U SGamma))
  (StaticCCheck (EnvExt x U SGamma) u V)
  ---------------------------------------------------------------- "StaticCCheckLam"
  (StaticCCheck SGamma  (CanonicalLam x u)  (CanonicalPi x U V))]

;; #source file ./ott/lang_simple.ott  lines 837 - 842 
 [
  (StaticCCheck SGamma U (CanonicalAtomic (AtomicSet i)))
  (SWellFormed (EnvExt x U SGamma))
  (StaticCCheck (EnvExt x U SGamma) V (CanonicalAtomic (AtomicSet i)))
  --------------------------------------------------------------------------- "StaticCCheckPi"
  (StaticCCheck SGamma (CanonicalPi x U V) (CanonicalAtomic (AtomicSet i)))]
)

;;; definitions 

(define-judgment-form
  L
  #:mode (StaticSynth I I O)
  #:contract (StaticSynth SGamma t U)

;; #source file ./ott/lang_simple.ott  lines 852 - 856 
 [
  (StaticSetNorm SGamma V T)
  (StaticCheck SGamma t V)
  ---------------------------------------- "StaticSynthAnn"
  (StaticSynth SGamma  (TermAnn t T)  V)]

;; #source file ./ott/lang_simple.ott  lines 857 - 860 
 [
   (side-condition ,(> (term  i ) 0)) 
  ------------------------------------------------------------------------------ "StaticSynthSet"
  (StaticSynth SGamma (TermSet i) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 862 - 866 
 [
  
  (SWellFormed SGamma)
  (GVarLook x U SGamma)
  ------------------------------------ "StaticSynthVar"
  (StaticSynth SGamma x U)]

;; #source file ./ott/lang_simple.ott  lines 871 - 877 
 [
  
  (StaticSynth SGamma s (CanonicalPi x U V))
  (StaticNormCheck SGamma v t U)
  (StaticHsub x U v V V_^)
  ---------------------------------------- "StaticSynthApp"
  (StaticSynth SGamma (TermApp s t) V_^)]

)
(define-judgment-form L 
 
  #:mode (StaticCheck I I I)
  #:contract (StaticCheck SGamma t U)

;; #source file ./ott/lang_simple.ott  lines 884 - 887 
 [
  (StaticSynth SGamma t U)
  -------------------------- "StaticCheckSynth"
  (StaticCheck SGamma t U)]

;; #source file ./ott/lang_simple.ott  lines 888 - 892 
 [
  (StaticSynth SGamma t (CanonicalAtomic (AtomicSet i)))
   (side-condition ,(and (< 0 (term  i )) (< (term  i ) (term  j )))) 
  -------------------------------------------------------- "StaticCheckLevel"
  (StaticCheck SGamma t (CanonicalAtomic (AtomicSet j)))]

;; #source file ./ott/lang_simple.ott  lines 893 - 898 
 [
  (StaticNormCheck SGamma U S (CanonicalAtomic (AtomicSet i)))
  (SWellFormed (EnvExt x U SGamma))
  (StaticCheck (EnvExt x U SGamma) T (CanonicalAtomic (AtomicSet i)))
  --------------------------------------------------------------------- "StaticCheckPi"
  (StaticCheck SGamma (TermPi x S T) (CanonicalAtomic (AtomicSet i)))]

;; #source file ./ott/lang_simple.ott  lines 900 - 904 
 [
  (SWellFormed (EnvExt x U SGamma))
  (StaticCheck (EnvExt x U SGamma) t V)
  ---------------------------------------------------------- "StaticCheckLam"
  (StaticCheck SGamma  (TermLam x t)  (CanonicalPi x U V))]

)
(define-judgment-form L 
 
  #:mode (StaticSetNorm I O I)
  #:contract (StaticSetNorm SGamma U S)

;; #source file ./ott/lang_simple.ott  lines 915 - 918 
 [
  (StaticNormSynth SGamma S U (CanonicalAtomic (AtomicSet i)))
  ---------------------------- "StaticSetNormSynth"
  (StaticSetNorm SGamma U S)]

;; #source file ./ott/lang_simple.ott  lines 919 - 923 
 [
  (StaticSetNorm SGamma U S)
  (StaticSetNorm (EnvExt x U SGamma) V T)
  ----------------------------------------------------------- "StaticSetNormPi"
  (StaticSetNorm SGamma (CanonicalPi x U V) (TermPi x S T))]

)
(define-judgment-form L 
 
  #:mode (StaticNormSynth I I O O)
  #:contract (StaticNormSynth SGamma t v U)

;; #source file ./ott/lang_simple.ott  lines 929 - 933 
 [
  (StaticSetNorm SGamma V T)
  (StaticNormCheck SGamma v t V)
  ---------------------------------------------- "StaticNormSynthAnn"
  (StaticNormSynth SGamma  (TermAnn t T)  v V)]

;; #source file ./ott/lang_simple.ott  lines 934 - 937 
 [
   (side-condition ,(> (term  i ) 0)) 
  ------------------------------------------------------------------------------------------------------------------ "StaticNormSynthSet"
  (StaticNormSynth SGamma (TermSet i) (CanonicalAtomic (AtomicSet i)) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 939 - 944 
 [
  (SWellFormed SGamma)
  (GVarLook x U SGamma)
  (EtaExpand  (AtomicSpine  x  SpineEmpty)  v U)
  ------------------------------------------ "StaticNormSynthVar"
  (StaticNormSynth SGamma x v U)]

;; #source file ./ott/lang_simple.ott  lines 949 - 955 
 [
  
  (StaticNormSynth SGamma s  (CanonicalLam x u)  (CanonicalPi x U_11 U_22))
  (StaticNormCheck SGamma v t U_11)
  (StaticHsub x U_11 v u v_^)
  (StaticHsub x U_11 v U_22 V)
  ---------------------------------------------- "StaticNormSynthApp"
  (StaticNormSynth SGamma (TermApp s t) v_^ V)]

)
(define-judgment-form L 
 
  #:mode (StaticNormCheck I O I I)
  #:contract (StaticNormCheck SGamma v t U)

;; #source file ./ott/lang_simple.ott  lines 964 - 967 
 [
  (StaticNormSynth SGamma t v U)
  -------------------------------- "StaticNormCheckSynth"
  (StaticNormCheck SGamma v t U)]

;; #source file ./ott/lang_simple.ott  lines 968 - 972 
 [
  (StaticNormSynth SGamma t v (CanonicalAtomic (AtomicSet i)))
   (side-condition ,(and (< 0 (term  i )) (< (term  i ) (term  j )))) 
  -------------------------------------------------------------- "StaticNormCheckLevel"
  (StaticNormCheck SGamma v t (CanonicalAtomic (AtomicSet j)))]

;; #source file ./ott/lang_simple.ott  lines 974 - 979 
 [
  (StaticNormCheck SGamma U S (CanonicalAtomic (AtomicSet i)))
  (SWellFormed (EnvExt x U SGamma))
  (StaticNormCheck (EnvExt x U SGamma) V T (CanonicalAtomic (AtomicSet i)))
  --------------------------------------------------------------------------------------------- "StaticNormCheckPi"
  (StaticNormCheck SGamma (CanonicalPi x U V) (TermPi x S T) (CanonicalAtomic (AtomicSet i)))]

;; #source file ./ott/lang_simple.ott  lines 980 - 984 
 [
  (SWellFormed (EnvExt x U SGamma))
  (StaticNormCheck (EnvExt x U SGamma) v t V)
  ----------------------------------------------------------------------------------- "StaticNormCheckLam"
  (StaticNormCheck SGamma  (CanonicalLam x v)   (TermLam x t)  (CanonicalPi x U V))]

)
(define-judgment-form L 
 
  #:mode (EtaExpand I O I)
  #:contract (EtaExpand rr v V)

;; #source file ./ott/lang_simple.ott  lines 990 - 992 
 [
  ---------------------------------------------------------- "EtaExpandAtomic"
  (EtaExpand rr (CanonicalAtomic rr) (CanonicalAtomic RR))]

;; #source file ./ott/lang_simple.ott  lines 994 - 998 
 [
  
  (EtaExpand  (AtomicSpine  y  SpineEmpty)  u U)
  (EtaExpand (AtomicSpine x (SpineCons e u)) v V)
  ------------------------------------------------------------------------ "EtaExpandPi"
  (EtaExpand (AtomicSpine x e)  (CanonicalLam y v)  (CanonicalPi y U V))]
)

;;; definitions 

(define-judgment-form
  L
  #:mode (Domain I O)
  #:contract (Domain gU gV)

;; #source file ./ott/lang_simple.ott  lines 1016 - 1018 
 [----------------------------------- "DomainPi"
  (Domain (CanonicalPi x gU gV) gU)]

;; #source file ./ott/lang_simple.ott  lines 1019 - 1021 
 [------------------------------------ "DomainDyn"
  (Domain CanonicalDyn CanonicalDyn)]

)
(define-judgment-form L 
 
  #:mode (GradualEnvSub I I I I O)
  #:contract (GradualEnvSub x gU gu Gamma Gamma_^)

;; #source file ./ott/lang_simple.ott  lines 1027 - 1029 
 [------------------------------------------- "GradualEnvSubEmpty"
  (GradualEnvSub x gU gu EnvEmpty EnvEmpty)]

;; #source file ./ott/lang_simple.ott  lines 1030 - 1035 
 [
  
   (side-condition ,(not (alpha-equivalent? (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  (GradualHsub x gU gu gU gU_^)
  (GradualEnvSub x gU gu Gamma Gamma_^)
  --------------------------------------------------------------------- "GradualEnvSubVarDiff"
  (GradualEnvSub x gU gu (EnvExt y gU Gamma) (EnvExt y gU_^ Gamma_^))]

;; #source file ./ott/lang_simple.ott  lines 1036 - 1039 
 [
  
  (GradualEnvSub x gU gu Gamma Gamma_^)
  ----------------------------------------------------- "GradualEnvSubVarSame"
  (GradualEnvSub x gU gu (EnvExt x gU Gamma) Gamma_^)]

)
(define-judgment-form L 
 
  #:mode (GradualHsub I I I I O)
  #:contract (GradualHsub x gU gu gu_^ gv)

;; #source file ./ott/lang_simple.ott  lines 1046 - 1048 
 [--------------------------------------------------------------------------------------- "GradualHsubSet"
  (GradualHsub x gU gu (CanonicalAtomic (AtomicSet i)) (CanonicalAtomic (AtomicSet i)))]

;; #source file ./ott/lang_simple.ott  lines 1050 - 1052 
 [------------------------------------------------- "GradualHsubDyn"
  (GradualHsub x gU gu CanonicalDyn CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 1053 - 1058 
 [ (side-condition ,(not (alpha-equivalent? (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  (GradualHsub x gU gu gV_11 gV_11^)
  (GradualHsub x gU gu gV_22 gV_22^)
  --------------------------------------------------------------------------------- "GradualHsubPi"
  (GradualHsub x gU gu (CanonicalPi y gV_11 gV_22) (CanonicalPi y gV_11^ gV_22^))]

;; #source file ./ott/lang_simple.ott  lines 1059 - 1063 
 [ (where   y  ,(gensym)) 
  (GradualHsub x gU gu (CanonicalPi y gU  (substitute  gV   x   y ) ) gV_^)
  -------------------------------------------------- "GradualHsubPiAlpha"
  (GradualHsub x gU gu (CanonicalPi x gU gV) gV_^)]

;; #source file ./ott/lang_simple.ott  lines 1065 - 1069 
 [ (side-condition ,(not (alpha-equivalent? (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  (GradualHsub x gU gu gv gv_^)
  --------------------------------------------------------------------- "GradualHsubLam"
  (GradualHsub x gU gu  (CanonicalLam y gv)   (CanonicalLam y gv_^) )]

;; #source file ./ott/lang_simple.ott  lines 1070 - 1074 
 [ (where   y  ,(gensym)) 
  (GradualHsub x gU gu  (CanonicalLam y  (substitute  gv   x   y ) )  gv_^)
  -------------------------------------------------- "GradualHsubLamAlpha"
  (GradualHsub x gU gu  (CanonicalLam x gv)  gv_^)]

;; #source file ./ott/lang_simple.ott  lines 1075 - 1078 
 [ (side-condition ,(not (alpha-equivalent? (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  ------------------------------------------------------------------------------------------------------------------------- "GradualHsubDiffNil"
  (GradualHsub x gU gu (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ))]

;; #source file ./ott/lang_simple.ott  lines 1079 - 1084 
 [ (side-condition ,(not (alpha-equivalent? (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  (GradualHsub x gU gu (CanonicalAtomic (AtomicSpine y ge)) (CanonicalAtomic (AtomicSpine y ge_^)))
  (GradualHsub x gU gu gv gv_^)
  ----------------------------------------------------------------------------------------------------------------------------------- "GradualHsubDiffCons"
  (GradualHsub x gU gu (CanonicalAtomic (AtomicSpine y (SpineCons ge gv))) (CanonicalAtomic (AtomicSpine y (SpineCons ge_^ gv_^))))]

;; #source file ./ott/lang_simple.ott  lines 1087 - 1090 
 [(GradualHsubR x gU gu (AtomicSpine x ge) gv gV)
  --------------------------------------------------------------- "GradualHsubSpine"
  (GradualHsub x gU gu (CanonicalAtomic (AtomicSpine x ge)) gv)]

)
(define-judgment-form L 
 
  #:mode (GradualHsubR I I I I O O)
  #:contract (GradualHsubR x gU gu grr gv gV)

;; #source file ./ott/lang_simple.ott  lines 1110 - 1112 
 [------------------------------------------------------------- "GradualHsubRHead"
  (GradualHsubR x gU gu  (AtomicSpine  x  SpineEmpty)  gu gU)]

;; #source file ./ott/lang_simple.ott  lines 1113 - 1118 
 [(GradualHsubR x gU gu_11  (AtomicSpine x ge)  gv_11 CanonicalDyn)
  -------------------------------------------------------------------------------------------- "GradualHsubRDynType"
  (GradualHsubR x gU gu_11  (AtomicSpine x (SpineCons ge gu_22))  CanonicalDyn CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 1120 - 1127 
 [(GradualHsubR x gU gu  (AtomicSpine x ge)   (CanonicalLam y gu_22)  (CanonicalPi y gU_11 gU_22))
  (GradualHsub x gU gu gv_11 gv_22)
  (GradualHsub y gU_11 gv_22 gu_22 gv_33)
  (GradualHsub y gU_11 gv_22 gU_22 gV)
  ------------------------------------------------------------------------ "GradualHsubRLamSpine"
  (GradualHsubR x gU gu  (AtomicSpine x (SpineCons ge gv_11))  gv_33 gV)]

;; #source file ./ott/lang_simple.ott  lines 1128 - 1136 
 [(GradualHsubR x gU gu  (AtomicSpine x ge)   (CanonicalLam y_11 gu_22)  (CanonicalPi y_22 gU_11 gU_22))
   (side-condition ,(not (alpha-equivalent? (term  (CanonicalAtomic  (AtomicSpine  y_11  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y_22  SpineEmpty) ) )))) 
  (GradualHsub x gU gu gv_11 gv_22)
  (GradualHsub y_11 gU_11 gv_22 gu_22 gv_33)
  (GradualHsub y_22 gU_11 gv_22 gU_22 gV)
  ------------------------------------------------------------------------ "GradualHsubRLamSpineAlpha"
  (GradualHsubR x gU gu  (AtomicSpine x (SpineCons ge gv_11))  gv_33 gV)]

;; #source file ./ott/lang_simple.ott  lines 1138 - 1144 
 [(GradualHsubR x gU gu  (AtomicSpine x ge)  CanonicalDyn (CanonicalPi y gU_11 gU_22))
  (GradualHsub x gU gu gv gv_22)
  (GradualHsub y gU_11 gv gU_22 gV)
  ---------------------------------------------------------------------------- "GradualHsubRDynSpine"
  (GradualHsubR x gU gu  (AtomicSpine x (SpineCons ge gv))  CanonicalDyn gV)]

)
(define-judgment-form L 
 
  #:mode (CodSub I I I O)
  #:contract (CodSub gU gu gu_^ gv)

;; #source file ./ott/lang_simple.ott  lines 1151 - 1154 
 [(GradualHsub x gU gu gV gV_^)
  ------------------------------------------- "CodSubPi"
  (CodSub gU gu (CanonicalPi x gU gV) gV_^)]

;; #source file ./ott/lang_simple.ott  lines 1155 - 1157 
 [------------------------------------------ "CodSubDyn"
  (CodSub gU gu CanonicalDyn CanonicalDyn)]

)
(define-judgment-form L 
 
  #:mode (BodySub I I I O)
  #:contract (BodySub gU gu gu_^ gv)

;; #source file ./ott/lang_simple.ott  lines 1163 - 1166 
 [(GradualHsub x gU gu gv gv_^)
  -------------------------------------------- "BodySubPi"
  (BodySub gU gu  (CanonicalLam x gv)  gv_^)]

;; #source file ./ott/lang_simple.ott  lines 1167 - 1169 
 [------------------------------------------- "BodySubDyn"
  (BodySub gU gu CanonicalDyn CanonicalDyn)]
)

;;; definitions 

(define-judgment-form
  L
  #:mode (GradualSet I I)
  #:contract (GradualSet Gamma gU)

;; #source file ./ott/lang_simple.ott  lines 1178 - 1181 
 [
  (GradualCSynth Gamma grr CanonicalDyn)
  ------------------------------------------ "GradualSetDynTy"
  (GradualSet Gamma (CanonicalAtomic grr))]

;; #source file ./ott/lang_simple.ott  lines 1182 - 1185 
 [
  (GradualCSynth Gamma grr (CanonicalAtomic (AtomicSet i)))
  ------------------------------------------ "GradualSetSet"
  (GradualSet Gamma (CanonicalAtomic grr))]

;; #source file ./ott/lang_simple.ott  lines 1188 - 1193 
 [
  (GradualSet Gamma gU_11)
  (WellFormed (EnvExt x gU_11 Gamma))
  (GradualSet (EnvExt x gU_11 Gamma) gU_22)
  ------------------------------------------------ "GradualSetPi"
  (GradualSet Gamma (CanonicalPi x gU_11 gU_22))]

;; #source file ./ott/lang_simple.ott  lines 1195 - 1197 
 [
  --------------------------------- "GradualSetDynVal"
  (GradualSet Gamma CanonicalDyn)]

)
(define-judgment-form L 
 
  #:mode (WellFormed I)
  #:contract (WellFormed Gamma)

;; #source file ./ott/lang_simple.ott  lines 1203 - 1205 
 [----------------------- "WellFormedEmpty"
  (WellFormed EnvEmpty)]

;; #source file ./ott/lang_simple.ott  lines 1206 - 1211 
 [
  (WellFormed Gamma)
  (GradualSet Gamma gU)
  (GVarFree x Gamma)
  ---------------------------------- "WellFormedExt"
  (WellFormed (EnvExt x gU Gamma))]

)
(define-judgment-form L 
 
  #:mode (GradualCSynth I I O)
  #:contract (GradualCSynth Gamma grr gU)

;; #source file ./ott/lang_simple.ott  lines 1217 - 1220 
 [
   (side-condition ,(> (term  i ) 0)) 
  --------------------------------------------------------------------------------- "GradualCSynthSet"
  (GradualCSynth Gamma (AtomicSet i) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 1222 - 1226 
 [
  (WellFormed Gamma)
  (GVarLook x gU Gamma)
  --------------------------------------------------------- "GradualCSynthVar"
  (GradualCSynth Gamma  (AtomicSpine  x  SpineEmpty)  gU)]

;; #source file ./ott/lang_simple.ott  lines 1230 - 1237 
 [
  (GradualCSynth Gamma (AtomicSpine x ge) gU)
  (Domain gU gV)
  (GradualCCheck Gamma gu gV)
  (CodSub gV gu gU gV_^)
  -------------------------------------------------------------- "GradualCSynthApp"
  (GradualCSynth Gamma (AtomicSpine x (SpineCons ge gu)) gV_^)]

)
(define-judgment-form L 
 
  #:mode (GradualCCheck I I I)
  #:contract (GradualCCheck Gamma gu gU)

;; #source file ./ott/lang_simple.ott  lines 1244 - 1248 
 [
  (GradualCSynth Gamma grr gU)
  (Consistent gU gV)
  ------------------------------------------------ "GradualCCheckSynth"
  (GradualCCheck Gamma (CanonicalAtomic grr) gV)]

;; #source file ./ott/lang_simple.ott  lines 1249 - 1253 
 [
  (GradualCSynth Gamma grr (CanonicalAtomic (AtomicSet i)))
   (side-condition ,(and (< 0 (term  i )) (< (term  i ) (term  j )))) 
  ----------------------------------------------------------------------------- "GradualCCheckLevel"
  (GradualCCheck Gamma (CanonicalAtomic grr) (CanonicalAtomic (AtomicSet j)))]

;; #source file ./ott/lang_simple.ott  lines 1255 - 1259 
 [
  (WellFormed (EnvExt x gU Gamma))
  (GradualCCheck (EnvExt x gU Gamma) gu gV)
  ------------------------------------------------------------------- "GradualCCheckLamPi"
  (GradualCCheck Gamma  (CanonicalLam x gu)  (CanonicalPi x gU gV))]

;; #source file ./ott/lang_simple.ott  lines 1260 - 1266 
 [
   (side-condition ,(not (alpha-equivalent? (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
   (where   z  ,(gensym)) 
  (WellFormed (EnvExt z gU Gamma))
  (GradualCCheck (EnvExt z gU Gamma)  (substitute  gu   x   z )   (substitute  gV   y   z ) )
  ------------------------------------------------------------------- "GradualCCheckLamPiAlpha"
  (GradualCCheck Gamma  (CanonicalLam x gu)  (CanonicalPi y gU gV))]

;; #source file ./ott/lang_simple.ott  lines 1267 - 1271 
 [
  (WellFormed (EnvExt x CanonicalDyn Gamma))
  (GradualCCheck (EnvExt x CanonicalDyn Gamma) gu CanonicalDyn)
  ---------------------------------------------------------- "GradualCCheckLamDyn"
  (GradualCCheck Gamma  (CanonicalLam x gu)  CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 1272 - 1278 
 [
  (ConsistentSet gV)
  (GradualCCheck Gamma gU_11 gV)
  (WellFormed (EnvExt x gU_11 Gamma))
  (GradualCCheck (EnvExt x gU_11 Gamma) gU_22 gV)
  ------------------------------------------------------ "GradualCCheckPi"
  (GradualCCheck Gamma (CanonicalPi x gU_11 gU_22) gV)]

;; #source file ./ott/lang_simple.ott  lines 1280 - 1283 
 [
  (GradualSet Gamma gU)
  --------------------------------------- "GradualCCheckDyn"
  (GradualCCheck Gamma CanonicalDyn gU)]

)
(define-judgment-form L 
 
  #:mode (ConsistentSet I)
  #:contract (ConsistentSet gU)

;; #source file ./ott/lang_simple.ott  lines 1291 - 1293 
 [------------------------------------------------- "ConsistentSetSet"
  (ConsistentSet (CanonicalAtomic (AtomicSet i)))]

;; #source file ./ott/lang_simple.ott  lines 1294 - 1296 
 [------------------------------ "ConsistentSetDyn"
  (ConsistentSet CanonicalDyn)]

)
(define-judgment-form L 
 
  #:mode (Consistent I I)
  #:contract (Consistent gU gV)

;; #source file ./ott/lang_simple.ott  lines 1304 - 1306 
 [------------------------------ "ConsistentDynL"
  (Consistent CanonicalDyn gv)]

;; #source file ./ott/lang_simple.ott  lines 1307 - 1309 
 [------------------------------ "ConsistentDynR"
  (Consistent gu CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 1310 - 1312 
 [-------------------- "ConsistentEq"
  (Consistent gu gu)]

;; #source file ./ott/lang_simple.ott  lines 1313 - 1317 
 [(Consistent gU gU_^)
  (Consistent gV gV_^)
  -------------------------------------------------------------- "ConsistentPi"
  (Consistent (CanonicalPi x gU gV) (CanonicalPi x gU_^ gV_^))]

;; #source file ./ott/lang_simple.ott  lines 1318 - 1324 
 [ (side-condition ,(not (alpha-equivalent? (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
   (where   z  ,(gensym)) 
  (Consistent gU gU_^)
  (Consistent  (substitute  gV   x   z )   (substitute  gV_^   y   z ) )
  -------------------------------------------------------------- "ConsistentPiAlpha"
  (Consistent (CanonicalPi x gU gV) (CanonicalPi y gU_^ gV_^))]

;; #source file ./ott/lang_simple.ott  lines 1325 - 1328 
 [(Consistent gu gv)
  ---------------------------------------------------------- "ConsistentLam"
  (Consistent  (CanonicalLam x gu)   (CanonicalLam x gv) )]

;; #source file ./ott/lang_simple.ott  lines 1329 - 1334 
 [ (side-condition ,(not (alpha-equivalent? (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
   (where   z  ,(gensym)) 
  (Consistent  (substitute  gu   x   z )   (substitute  gv   y   z ) )
  ---------------------------------------------------------- "ConsistentLamAlpha"
  (Consistent  (CanonicalLam x gu)   (CanonicalLam y gv) )]

;; #source file ./ott/lang_simple.ott  lines 1335 - 1339 
 [(Consistent (CanonicalAtomic (AtomicSpine x ge)) (CanonicalAtomic (AtomicSpine x ge_^)))
  (Consistent gu gv)
  ------------------------------------------------------------------------------------------------------------------------ "ConsistentApp"
  (Consistent (CanonicalAtomic (AtomicSpine x (SpineCons ge gu))) (CanonicalAtomic (AtomicSpine x (SpineCons ge_^ gv))))]
)

;;; definitions 

(define-judgment-form
  L
  #:mode (Meet I I O)
  #:contract (Meet gU gV gU_^)

;; #source file ./ott/lang_simple.ott  lines 1348 - 1350 
 [--------------------------- "MeetDynL"
  (Meet CanonicalDyn gU gU)]

;; #source file ./ott/lang_simple.ott  lines 1351 - 1353 
 [--------------------------- "MeetDynR"
  (Meet gV CanonicalDyn gV)]

;; #source file ./ott/lang_simple.ott  lines 1354 - 1356 
 [----------------- "MeetRefl"
  (Meet gu gu gu)]

;; #source file ./ott/lang_simple.ott  lines 1357 - 1361 
 [(Meet gU gU_^ gU_^^)
  (Meet gV gV_^ gV_^^)
  ------------------------------------------------------------------------------------ "MeetPi"
  (Meet (CanonicalPi x gU gV) (CanonicalPi x gU_^ gV_^) (CanonicalPi x gU_^^ gV_^^))]

;; #source file ./ott/lang_simple.ott  lines 1362 - 1365 
 [
  
  (Meet u u_^ v)
  ------------------------------------------------------------------- "MeetLam"
  (Meet (CanonicalLam x u) (CanonicalLam x u_^) (CanonicalLam x v))]

;; #source file ./ott/lang_simple.ott  lines 1366 - 1370 
 [(Meet gu gu_^ gu_^^)
  (Meet (CanonicalAtomic (AtomicSpine x ge)) (CanonicalAtomic (AtomicSpine x ge_^)) (CanonicalAtomic (AtomicSpine x ge_^^)))
  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ "MeetApp"
  (Meet (CanonicalAtomic (AtomicSpine x (SpineCons ge gu))) (CanonicalAtomic (AtomicSpine x (SpineCons ge_^ gu_^))) (CanonicalAtomic (AtomicSpine x (SpineCons ge_^^ gu_^^))))]

)
(define-judgment-form L 
 
  #:mode (Precision I I)
  #:contract (Precision gU gV)

;; #source file ./ott/lang_simple.ott  lines 1378 - 1381 
 [(Meet gU gV gU)
  ------------------- "PrecisionDef"
  (Precision gU gV)]

)
(define-judgment-form L 
 
  #:mode (EvConsistent I I I)
  #:contract (EvConsistent ep gU gV)

;; #source file ./ott/lang_simple.ott  lines 1388 - 1393 
 [(Meet gV_11 gV_22 gV_33)
  (Precision gU_11 gV_33)
  (Precision gU_22 gV_33)
  ------------------------------------------------------- "EvConsistentDef"
  (EvConsistent (EvidencePair gU_11 gU_22) gV_11 gV_22)]
)

;;; definitions 

(define-judgment-form
  L
  #:mode (GradualSynth I I O)
  #:contract (GradualSynth Gamma gt gU)

;; #source file ./ott/lang_simple.ott  lines 1407 - 1411 
 [
  
  (GradualSetNorm Gamma gV gT)
  (GradualCheck Gamma gt gV)
  ------------------------------------------- "GradualSynthAnn"
  (GradualSynth Gamma  (TermAnn gt gT)  gV)]

;; #source file ./ott/lang_simple.ott  lines 1412 - 1415 
 [
   (side-condition ,(> (term  i ) 0)) 
  ------------------------------------------------------------------------------ "GradualSynthSet"
  (GradualSynth Gamma (TermSet i) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 1417 - 1421 
 [
  (GVarLook x gU Gamma)
  (WellFormed Gamma)
  ------------------------------------- "GradualSynthVar"
  (GradualSynth Gamma x gU)]

;; #source file ./ott/lang_simple.ott  lines 1426 - 1432 
 [
  
  (GradualSynth Gamma gs gV)
  (Domain gV gV_11)
  (GradualNormCheck Gamma gv gt gV_11)
  (CodSub gV_11 gv gV gV_22)
  -------------------------------------------- "GradualSynthApp"
  (GradualSynth Gamma (TermApp gs gt) gV_22)]

)
(define-judgment-form L 
 
  #:mode (GradualCheck I I I)
  #:contract (GradualCheck Gamma gt gU)

;; #source file ./ott/lang_simple.ott  lines 1441 - 1445 
 [
  (GradualSynth Gamma gt gU)
  (Consistent gU gV)
  ---------------------------- "GradualCheckSynth"
  (GradualCheck Gamma gt gV)]

;; #source file ./ott/lang_simple.ott  lines 1446 - 1450 
 [
  (GradualSynth Gamma gt (CanonicalAtomic (AtomicSet i)))
   (side-condition ,(and (< 0 (term  i )) (< (term  i ) (term  j )))) 
  --------------------------------------------------------- "GradualCheckLevel"
  (GradualCheck Gamma gt (CanonicalAtomic (AtomicSet j)))]

;; #source file ./ott/lang_simple.ott  lines 1451 - 1457 
 [
  
  (ConsistentSet gV)
  (GradualNormCheck Gamma gU gS gV)
  (WellFormed (EnvExt x gU Gamma))
  (GradualCheck (EnvExt x gU Gamma) gT gV)
  ------------------------------------------ "GradualCheckPi"
  (GradualCheck Gamma (TermPi x gS gT) gV)]

;; #source file ./ott/lang_simple.ott  lines 1459 - 1463 
 [
  (WellFormed (EnvExt x gU Gamma))
  (GradualCheck (EnvExt x gU Gamma) gt gV)
  ------------------------------------------------------------- "GradualCheckLamPi"
  (GradualCheck Gamma  (TermLam x gt)  (CanonicalPi x gU gV))]

;; #source file ./ott/lang_simple.ott  lines 1464 - 1470 
 [
   (side-condition ,(not (alpha-equivalent? (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
   (where   z  ,(gensym)) 
  (WellFormed (EnvExt z gU Gamma))
  (GradualCheck (EnvExt z gU Gamma)  (substitute  gt   x   z )   (substitute  gV   y   z ) )
  ------------------------------------------------------------- "GradualCheckLamPiAlpha"
  (GradualCheck Gamma  (TermLam x gt)  (CanonicalPi y gU gV))]

;; #source file ./ott/lang_simple.ott  lines 1472 - 1476 
 [
  (WellFormed (EnvExt x CanonicalDyn Gamma))
  (GradualCheck (EnvExt x CanonicalDyn Gamma) gt CanonicalDyn)
  ---------------------------------------------------- "GradualCheckLamDyn"
  (GradualCheck Gamma  (TermLam x gt)  CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 1477 - 1480 
 [
  (GradualSet Gamma gU)
  --------------------------------- "GradualCheckDyn"
  (GradualCheck Gamma TermDyn gU)]

)
(define-judgment-form L 
 
  #:mode (GradualSetNorm I O I)
  #:contract (GradualSetNorm Gamma gU TT)

;; #source file ./ott/lang_simple.ott  lines 1491 - 1494 
 [
  (GradualNormSynth Gamma TT gU (CanonicalAtomic (AtomicSet i)))
  ------------------------------ "GradualSetNormSynth"
  (GradualSetNorm Gamma gU TT)]

;; #source file ./ott/lang_simple.ott  lines 1496 - 1500 
 [
  (GradualSetNorm Gamma gU SS)
  (GradualSetNorm (EnvExt x gU Gamma) gV TT)
  --------------------------------------------------------------- "GradualSetNormPi"
  (GradualSetNorm Gamma (CanonicalPi x gU gV) (TermPi x SS TT))]

;; #source file ./ott/lang_simple.ott  lines 1507 - 1509 
 [
  --------------------------------------------- "GradualSetNormDyn"
  (GradualSetNorm Gamma CanonicalDyn TermDyn)]

)
(define-judgment-form L 
 
  #:mode (GEtaExpand I O I)
  #:contract (GEtaExpand grr gv gV)

;; #source file ./ott/lang_simple.ott  lines 1517 - 1519 
 [-------------------------------------------------------------- "GEtaExpandAtomic"
  (GEtaExpand grr (CanonicalAtomic grr) (CanonicalAtomic gRR))]

;; #source file ./ott/lang_simple.ott  lines 1521 - 1525 
 [(GEtaExpand  (AtomicSpine  y  SpineEmpty)  gu gU)
  (GEtaExpand (AtomicSpine x (SpineCons ge gu)) gv gV)
  ----------------------------------------------------------------------------- "GEtaExpandPi"
  (GEtaExpand (AtomicSpine x ge)  (CanonicalLam y gv)  (CanonicalPi y gU gV))]

)
(define-judgment-form L 
 
  #:mode (GradualNormSynth I I O O)
  #:contract (GradualNormSynth Gamma tt gv gU)

;; #source file ./ott/lang_simple.ott  lines 1531 - 1535 
 [
  (GradualSetNorm Gamma gV TT)
  (GradualNormCheck Gamma gv tt gV)
  -------------------------------------------------- "GradualNormSynthAnn"
  (GradualNormSynth Gamma  (TermAnn tt TT)  gv gV)]

;; #source file ./ott/lang_simple.ott  lines 1536 - 1539 
 [
   (side-condition ,(> (term  i ) 0)) 
  ------------------------------------------------------------------------------------------------------------------ "GradualNormSynthSet"
  (GradualNormSynth Gamma (TermSet i) (CanonicalAtomic (AtomicSet i)) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 1541 - 1546 
 [
  (WellFormed Gamma)
  (GVarLook x gU Gamma)
  (GEtaExpand  (AtomicSpine  x  SpineEmpty)  gv gU)
  -------------------------------------------- "GradualNormSynthVar"
  (GradualNormSynth Gamma x gv gU)]

;; #source file ./ott/lang_simple.ott  lines 1550 - 1557 
 [
  (GradualNormSynth Gamma ss gu gV)
  (Domain gV gV_11)
  (GradualNormCheck Gamma gv tt gV_11)
  (BodySub gV_11 gv gu gv_^)
  (CodSub gV_11 gv gV gV_22)
  ----------------------------------------------------- "GradualNormSynthApp"
  (GradualNormSynth Gamma (TermApp ss tt) gv_^ gV_22)]

)
(define-judgment-form L 
 
  #:mode (GradualNormCheck I O I I)
  #:contract (GradualNormCheck Gamma gv tt gU)

;; #source file ./ott/lang_simple.ott  lines 1566 - 1570 
 [
  (GradualNormSynth Gamma tt gv gV)
  (Precision gV gU)
  ----------------------------------- "GradualNormCheckSynthUp"
  (GradualNormCheck Gamma gv tt gU)]

;; #source file ./ott/lang_simple.ott  lines 1571 - 1577 
 [
  (GradualNormSynth Gamma tt gv gV)
  (Consistent gU gV)
  (Meet gU gV gU_^)
   (side-condition ,(not (alpha-equivalent? (term  gU_^ ) (term  gV )))) 
  --------------------------------------------- "GradualNormCheckSynthDown"
  (GradualNormCheck Gamma CanonicalDyn tt gU)]

;; #source file ./ott/lang_simple.ott  lines 1578 - 1582 
 [
  (GradualNormSynth Gamma tt gv (CanonicalAtomic (AtomicSet i)))
   (side-condition ,(and (< 0 (term  i )) (< (term  i ) (term  j )))) 
  ---------------------------------------------------------------- "GradualNormCheckLevel"
  (GradualNormCheck Gamma gv tt (CanonicalAtomic (AtomicSet j)))]

;; #source file ./ott/lang_simple.ott  lines 1584 - 1592 
 [
  (ConsistentSet gV)
  (GradualNormCheck Gamma gU_11 SS gV)
  (WellFormed (EnvExt x gU_11 Gamma))
  (GradualNormCheck (EnvExt x gU_11 Gamma) gU_22 TT gV)
  -------------------------------------------------------------------------- "GradualNormCheckPi"
  (GradualNormCheck Gamma (CanonicalPi x gU_11 gU_22) (TermPi x SS TT) gV)]

;; #source file ./ott/lang_simple.ott  lines 1593 - 1597 
 [
  (WellFormed (EnvExt x gU Gamma))
  (GradualNormCheck (EnvExt x gU Gamma) gv tt gV)
  --------------------------------------------------------------------------------------- "GradualNormCheckLamPi"
  (GradualNormCheck Gamma  (CanonicalLam x gv)   (TermLam x tt)  (CanonicalPi x gU gV))]

;; #source file ./ott/lang_simple.ott  lines 1598 - 1604 
 [
   (side-condition ,(not (alpha-equivalent? (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
   (where   z  ,(gensym)) 
  (WellFormed (EnvExt z gU Gamma))
  (GradualNormCheck (EnvExt z gU Gamma) gv  (substitute  tt   x   z )   (substitute  gV   y   z ) )
  --------------------------------------------------------------------------------------- "GradualNormCheckLamPiAlpha"
  (GradualNormCheck Gamma  (CanonicalLam z gv)   (TermLam x tt)  (CanonicalPi y gU gV))]

;; #source file ./ott/lang_simple.ott  lines 1605 - 1609 
 [
  (WellFormed (EnvExt x CanonicalDyn Gamma))
  (GradualNormCheck (EnvExt x CanonicalDyn Gamma) gv tt CanonicalDyn)
  ------------------------------------------------------------------------------ "GradualNormCheckLamDyn"
  (GradualNormCheck Gamma  (CanonicalLam x gv)   (TermLam x tt)  CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 1610 - 1613 
 [
  (GradualSet Gamma gU)
  -------------------------------------------------- "GradualNormCheckDyn"
  (GradualNormCheck Gamma CanonicalDyn TermDyn gU)]

;; #source file ./ott/lang_simple.ott  lines 1615 - 1620 
 [
  (GradualNormSynth Gamma ett gv gV)
  (Meet gU gV gV)
  ------------------------------------------------ "GradualNormCheckEvUp"
  (GradualNormCheck Gamma gv (TermEp ep ett) gU)]

;; #source file ./ott/lang_simple.ott  lines 1621 - 1627 
 [
  (GradualNormSynth Gamma ett gv gV)
  (Meet gU gV gU_^)
   (side-condition ,(not (alpha-equivalent? (term  gU_^ ) (term  gV )))) 
  ---------------------------------------------------------- "GradualNormCheckEvDown"
  (GradualNormCheck Gamma CanonicalDyn (TermEp ep ett) gU)]

;; #source file ./ott/lang_simple.ott  lines 1629 - 1631 
 [
  ---------------------------------------------------------- "GradualNormCheckDynAnn"
  (GradualNormCheck Gamma CanonicalDyn (TermDynAnn gU) gU)]

)
(define-judgment-form L 
 
  #:mode (GradualElabSynth I I O O)
  #:contract (GradualElabSynth Gamma gt et gU)

;; #source file ./ott/lang_simple.ott  lines 1638 - 1642 
 [
  
  (GradualSetNorm Gamma gV gT)
  (GradualElabCheck Gamma et gt gV)
  -------------------------------------------------- "GradualElabSynthAnn"
  (GradualElabSynth Gamma  (TermAnn gt gT)  et gV)]

;; #source file ./ott/lang_simple.ott  lines 1643 - 1646 
 [
   (side-condition ,(> (term  i ) 0)) 
  ---------------------------------------------------------------------------------------------- "GradualElabSynthSet"
  (GradualElabSynth Gamma (TermSet i) (TermSet i) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 1648 - 1652 
 [
  (WellFormed Gamma)
  (GVarLook x gU Gamma)
  ----------------------------------------------------- "GradualElabSynthVar"
  (GradualElabSynth Gamma x x gU)]

;; #source file ./ott/lang_simple.ott  lines 1656 - 1663 
 [
  
  (GradualElabSynth Gamma gs es gV)
  (Domain gV gV_11)
  (GradualElabCheck Gamma et gt gV_11)
  (GradualNormCheck Gamma gv gt gV_11)
  (CodSub gV_11 gv gV gV_22)
  ---------------------------------------------------------------- "GradualElabSynthApp"
  (GradualElabSynth Gamma (TermApp gs gt) (TermApp es et) gV_22)]

)
(define-judgment-form L 
 
  #:mode (GradualElabCheck I O I I)
  #:contract (GradualElabCheck Gamma et gt gU)

;; #source file ./ott/lang_simple.ott  lines 1672 - 1676 
 [
  (GradualElabSynth Gamma gt et gV_^)
   (side-condition , (alpha-equivalent? (term  gV_^ ) (term  gV ))) 
  ----------------------------------- "GradualElabCheckSynthEq"
  (GradualElabCheck Gamma et gt gV)]

;; #source file ./ott/lang_simple.ott  lines 1677 - 1682 
 [
  (GradualElabSynth Gamma gt et gV)
   (side-condition ,(not (alpha-equivalent? (term  gU ) (term  gV )))) 
  (Meet gU gV gV_^)
  --------------------------------------------------------------------- "GradualElabCheckSynth"
  (GradualElabCheck Gamma (TermEp (EvidencePair gV_^ gV_^) et) gt gU)]

;; #source file ./ott/lang_simple.ott  lines 1684 - 1688 
 [
  (GradualElabSynth Gamma gt et (CanonicalAtomic (AtomicSet i)))
   (side-condition ,(and (< 0 (term  i )) (< (term  i ) (term  j )))) 
  ---------------------------------------------------------------- "GradualElabCheckLevel"
  (GradualElabCheck Gamma et gt (CanonicalAtomic (AtomicSet j)))]

;; #source file ./ott/lang_simple.ott  lines 1690 - 1699 
 [
  
  (ConsistentSet gV)
  (GradualElabCheck Gamma eS gS gV)
  (GradualNormCheck Gamma gU gS gV)
  (WellFormed (EnvExt x gU Gamma))
  (GradualElabCheck (EnvExt x gU Gamma) eT gT gV)
  --------------------------------------------------------------- "GradualElabCheckPi"
  (GradualElabCheck Gamma (TermPi x eS eT) (TermPi x gS gT) gV)]

;; #source file ./ott/lang_simple.ott  lines 1700 - 1704 
 [
  (WellFormed (EnvExt x gU Gamma))
  (GradualElabCheck (EnvExt x gU Gamma) et gt gV)
  ---------------------------------------------------------------------------------- "GradualElabCheckLamPi"
  (GradualElabCheck Gamma  (TermLam x et)   (TermLam x gt)  (CanonicalPi x gU gV))]

;; #source file ./ott/lang_simple.ott  lines 1705 - 1711 
 [
   (side-condition ,(not (alpha-equivalent? (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
   (where   z  ,(gensym)) 
  (WellFormed (EnvExt z gU Gamma))
  (GradualElabCheck (EnvExt z gU Gamma) et  (substitute  gt   x   z )   (substitute  gV   y   z ) )
  ---------------------------------------------------------------------------------- "GradualElabCheckLamPiAlpha"
  (GradualElabCheck Gamma  (TermLam z et)   (TermLam x gt)  (CanonicalPi y gU gV))]

;; #source file ./ott/lang_simple.ott  lines 1712 - 1716 
 [
  (WellFormed (EnvExt x CanonicalDyn Gamma))
  (GradualElabCheck (EnvExt x CanonicalDyn Gamma) et gt CanonicalDyn)
  ------------------------------------------------------------------------- "GradualElabCheckLamDyn"
  (GradualElabCheck Gamma  (TermLam x et)   (TermLam x gt)  CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 1717 - 1720 
 [
  (GradualSet Gamma gU)
  ----------------------------------------------------- "GradualElabCheckDyn"
  (GradualElabCheck Gamma (TermDynAnn gU) TermDyn gU)]
)

;;; definitions 

(define-judgment-form
  L
  #:mode (EvSynth I I O)
  #:contract (EvSynth Gamma et gU)

;; #source file ./ott/lang_simple.ott  lines 1733 - 1736 
 [
   (side-condition ,(> (term  i ) 0)) 
  ------------------------------------------------------------------------- "EvSynthSet"
  (EvSynth Gamma (TermSet i) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 1738 - 1742 
 [
  (WellFormed Gamma)
  (GVarLook x gU Gamma)
  -------------------------------- "EvSynthVar"
  (EvSynth Gamma x gU)]

;; #source file ./ott/lang_simple.ott  lines 1746 - 1752 
 [
  
  (EvSynth Gamma es gV)
  (Domain gV gU)
  (GradualNormCheck Gamma gv et gU)
  (CodSub gU gv gV gV_22)
  --------------------------------------- "EvSynthApp"
  (EvSynth Gamma (TermApp es et) gV_22)]

)
(define-judgment-form L 
 
  #:mode (EvCheck I I I)
  #:contract (EvCheck Gamma et gU)

;; #source file ./ott/lang_simple.ott  lines 1759 - 1763 
 [
  (EvSynth Gamma et gU)
  (EvConsistent ep gU gV)
  ----------------------------------- "EvCheckEv"
  (EvCheck Gamma (TermEp ep et) gV)]

;; #source file ./ott/lang_simple.ott  lines 1764 - 1770 
 [
  
  (ConsistentSet gV)
  (GradualNormCheck Gamma gU eS gV)
  (WellFormed (EnvExt x gU Gamma))
  (EvCheck (EnvExt x gU Gamma) eT gV)
  ------------------------------------- "EvCheckPi"
  (EvCheck Gamma (TermPi x eS eT) gV)]

;; #source file ./ott/lang_simple.ott  lines 1773 - 1777 
 [
  (WellFormed (EnvExt x gU Gamma))
  (EvCheck (EnvExt x gU Gamma) et gV)
  -------------------------------------------------------- "EvCheckLamPi"
  (EvCheck Gamma  (TermLam x et)  (CanonicalPi x gU gV))]

;; #source file ./ott/lang_simple.ott  lines 1779 - 1783 
 [
  (WellFormed (EnvExt x CanonicalDyn Gamma))
  (EvCheck (EnvExt x CanonicalDyn Gamma) et CanonicalDyn)
  ----------------------------------------------- "EvCheckLamDyn"
  (EvCheck Gamma  (TermLam x et)  CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 1784 - 1787 
 [
  (GradualSet Gamma gU)
  ------------------------------------ "EvCheckDyn"
  (EvCheck Gamma (TermDynAnn gU) gU)]

)
(define-judgment-form L 
 
  #:mode (SimpleSmallStep I O)
  #:contract (SimpleSmallStep s t)

;; #source file ./ott/lang_simple.ott  lines 1803 - 1805 
 [
  --------------------------------------- "SimpleSmallStepAnn"
  (SimpleSmallStep  (TermAnn sv T)  sv)]

;; #source file ./ott/lang_simple.ott  lines 1806 - 1808 
 [
  ---------------------------------------------------------------------------- "SimpleSmallStepApp"
  (SimpleSmallStep (TermApp  (TermLam x t)  sv)  (substitute  t   x   sv ) )]

;; #source file ./ott/lang_simple.ott  lines 1810 - 1813 
 [
  (SimpleSmallStep s t)
  ------------------------------------------------------------- "SimpleSmallStepContext"
  (SimpleSmallStep  (in-hole  SC   s )   (in-hole  SC   t ) )]

)
(define-judgment-form L 
 
  #:mode (SmallStep I O)
  #:contract (SmallStep es et)

;; #source file ./ott/lang_simple.ott  lines 1821 - 1824 
 [(ConsistentTrans ep_11 ep_22 ep_33)
  ------------------------------------------------------------------ "SmallStepAscr"
  (SmallStep (TermEp ep_11  (TermEp ep_22 et) ) (TermEp ep_33 et))]

;; #source file ./ott/lang_simple.ott  lines 1827 - 1830 
 [ (side-condition ,(empty? (judgment-holds (ConsistentTrans  ep_11   ep_22  ep9999) ep9999))) 
  ---------------------------------------------------------- "SmallStepAscrFail"
  (SmallStep (TermEp ep_11  (TermEp ep_22 et) ) TermError)]

;; #source file ./ott/lang_simple.ott  lines 1831 - 1833 
 [
  ------------------------------------------------------------------------ "SmallStepApp"
  (SmallStep (TermApp  (TermLam x et)  ev)  (substitute  et   x   ev ) )]

;; #source file ./ott/lang_simple.ott  lines 1834 - 1839 
 [
  (Domain gU gV_11)
  (GradualNormCheck EnvEmpty gv ev gV_11)
  (CodSub gV_11 gv gU gV_22)
  ------------------------------------------------------------- "SmallStepAppDyn"
  (SmallStep (TermApp (TermDynAnn gU) ev) (TermDynAnn gV_22))]

;; #source file ./ott/lang_simple.ott  lines 1840 - 1845 
 [
  (EvDom ep_11 ep_33)
  (ConsistentTrans ep_22 ep_33 ep_44)
  (EvCod rv ep_11 ep_55)
  ------------------------------------------------------------------------------------------------------------------------------------------ "SmallStepAppEv"
  (SmallStep (TermApp  (TermEp ep_11  (TermLam x et) )   (TermEp ep_22 rv) ) (TermEp ep_55   (substitute  et   x   (TermEp ep_44 rv) )  ))]

;; #source file ./ott/lang_simple.ott  lines 1846 - 1858 
 [
  (Domain gV_11 gV_11^)
  (Domain gV_22 gV_22^)
  (Domain gV_33 gV_33^)
  (ConsistentTrans ep_11 (EvidencePair gV_11^ gV_22^) ep_22)
  (GradualNormCheck EnvEmpty gv_11 (TermEp ep_11 rv) gV_11^)
  (GradualNormCheck EnvEmpty gv_22 (TermEp ep_11 rv) gV_22^)
  (GradualNormCheck EnvEmpty gv_33 (TermEp ep_11 rv) gV_33^)
  (CodSub gV_11^ gv_11 gV_11 gV_11^^)
  (CodSub gV_22^ gv_22 gV_22 gV_22^^)
  (CodSub gV_33^ gv_33 gV_33 gV_33^^)
  ----------------------------------------------------------------------------------------------------------------------------------------------------------------- "SmallStepAppEvDyn"
  (SmallStep (TermApp  (TermEp (EvidencePair gV_11 gV_22) (TermDynAnn gV_33))   (TermEp ep_11 rv) ) (TermEp (EvidencePair gV_11^^ gV_22^^) (TermDynAnn gV_33^^)))]

;; #source file ./ott/lang_simple.ott  lines 1859 - 1862 
 [
  
  (SmallStep (TermApp  (TermEp ep_11 rv)   (TermEp (EvidencePair CanonicalDyn CanonicalDyn) rv) ) es)
  ------------------------------------------------- "SmallStepAppEvRaw"
  (SmallStep (TermApp  (TermEp ep_11 rv)  rv) es)]

;; #source file ./ott/lang_simple.ott  lines 1863 - 1867 
 [
  
  (EvDom ep_11 ep_33)
   (side-condition ,(empty? (judgment-holds (ConsistentTrans  ep_22   ep_33  ep9999) ep9999))) 
  ------------------------------------------------------------------------- "SmallStepAppFailTrans"
  (SmallStep (TermApp  (TermEp ep_11 ru)   (TermEp ep_22 rv) ) TermError)]

;; #source file ./ott/lang_simple.ott  lines 1868 - 1871 
 [
  
   (side-condition ,(empty? (judgment-holds (EvDom  ep_11  ep9999) ep9999))) 
  -------------------------------------------------------- "SmallStepAppFailDom"
  (SmallStep (TermApp  (TermEp ep_11 rv)  ev) TermError)]

;; #source file ./ott/lang_simple.ott  lines 1877 - 1880 
 [
   (side-condition ,(empty? (judgment-holds (Domain  gU  gV9999) gV9999))) 
  --------------------------------------------------------------------- "SmallStepAppDynFail"
  (SmallStep (TermApp  (TermEp ep_11 (TermDynAnn gU))  ev) TermError)]

;; #source file ./ott/lang_simple.ott  lines 1883 - 1887 
 [
  (SmallStep es et)
   (side-condition ,(not (alpha-equivalent? (term  et ) (term TermError)))) 
  --------------------------------------------------------- "SmallStepContext"
  (SmallStep  (in-hole  EC   es )   (in-hole  EC   et ) )]

;; #source file ./ott/lang_simple.ott  lines 1888 - 1891 
 [
  (SmallStep es TermError)
  --------------------------------------------- "SmallStepContextErr"
  (SmallStep  (in-hole  EC   es )  TermError)]

)
(define-judgment-form L 
 
  #:mode (ConsistentTrans I I O)
  #:contract (ConsistentTrans ep_11 ep_22 ep_33)

;; #source file ./ott/lang_simple.ott  lines 1897 - 1901 
 [(Meet gU_11 gU_22 gU_33)
  (Meet gV_11 gV_22 gV_33)
  ---------------------------------------------------------------------------------------------------- "ConsistentTransDef"
  (ConsistentTrans (EvidencePair gU_11 gV_11) (EvidencePair gU_22 gV_22) (EvidencePair gU_33 gV_33))]

)
(define-judgment-form L 
 
  #:mode (EvDom I O)
  #:contract (EvDom ep_11 ep_22)

;; #source file ./ott/lang_simple.ott  lines 1907 - 1911 
 [(Domain gU gU_^)
  (Domain gV gV_^)
  ------------------------------------------------------- "EvDomPair"
  (EvDom (EvidencePair gU gV) (EvidencePair gU_^ gV_^))]

)
(define-judgment-form L 
 
  #:mode (EvCod I I O)
  #:contract (EvCod ev ep_11 ep_22)

;; #source file ./ott/lang_simple.ott  lines 1918 - 1926 
 [
  (Domain gU gU_11)
  (Domain gV gV_11)
  (GradualNormCheck EnvEmpty gu ev gU_11)
  (GradualNormCheck EnvEmpty gv ev gV_11)
  (CodSub gU_11 gu gU gU_22)
  (CodSub gV_11 gv gV gV_22)
  ------------------------------------------------------------ "EvCodPair"
  (EvCod ev (EvidencePair gU gV) (EvidencePair gU_22 gV_22))]
)
;; #source file ./ott/lang_simple.ott  lines 1941 - 2017 
(define-judgment-form
  L
  #:mode (ElabAndType I I O)
  ; #:contract (ElabAndType gs esgU)
  [ (GradualElabSynth Gamma gs es gU)
  ---------------------------------
  (ElabAndType gs Gamma (ElabTypePair es gU))]

)

(define-judgment-form
  L
  #:mode (GetElab I O)
  [
  ---------------------------------
  (GetElab (ElabTypePair es gU) es)]
)

(define-judgment-form
  L
  #:mode (GetType I O)
  [
  ---------------------------------
  (GetType (ElabTypePair es gU) gU)]
)

(define (typePairToRealPair pr) 
  (cons 
    (first (judgment-holds (GetElab ,pr es) es) )
    (first (judgment-holds (GetType ,pr gU) gU) )
  ))

(define red
  (reduction-relation
   L
   (--> es et
        (judgment-holds
         (SmallStep es et)
         )
      )
   )
  )

(define (progress-holds? e)
  (if (types? e)
      (or (v? e)
          (reduces? e))
      #t))

(define (preservation-holds? e)
  (let
      ([reductions
        (apply-reduction-relation
               red
               (term (,e)))])
(if (types? e)
    (andmap types? reductions)
    #t
    )))

(define (types? es)
  (not (null? (append 
  (judgment-holds (EvCheck EnvEmpty ,es gU)
                              gU)
(judgment-holds (EvSynth EnvEmpty ,es gU)
                            gU)
                              ))))
 
(define v? (redex-match L ev))
 
(define (reduces? e)
  (not (null? (apply-reduction-relation
               red
               (term (,e))))))

