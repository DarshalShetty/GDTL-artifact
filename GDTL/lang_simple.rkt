;; #source  
;;; generated by Ott 0.28 from: ./ott/lang_simple.ott

#lang racket
(require redex/reduction-semantics)

;; #source file ./ott/lang_simple.ott  lines 4 - 6 
;; #source file ./ott/lang_simple.ott  lines 8 - 33 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Redex model for GDTL
;; Accompanying "Approximate Normalization for Gradual Dependnently Typed Languages"
;; (mostly) auto-generated from an Ott definition
;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(provide (all-defined-out))

(define currently-defined-vars 
  (make-hasheq))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Syntax Definition
;; gt gT : gradual terms, the source language
;; gu gU : gradual canonical forms
;; et eT : evidence terms, used to define dynamic semantics, are result of elaboration
;; ep : the evidence ascribed to terms. Is a wrapper around a canonical type
;; ev eV : evidence values: well-formed evidence terms that cannot be reduced
;; rv rV : raw values: evidence values forbidding ascription with evidence at the top level
;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; #source file ./ott/lang_simple.ott  lines 35 - 111 
;; #source file ./ott/lang_simple.ott  lines 116 - 118 
;; #source file ./ott/lang_simple.ott  lines 121 - 121 
;; #source file ./ott/lang_simple.ott  lines 127 - 135 and file ./ott/lang_simple.ott  lines 140 - 152 and file ./ott/lang_simple.ott  lines 156 - 190 and file ./ott/lang_simple.ott  lines 195 - 204 and file ./ott/lang_simple.ott  lines 213 - 218 and file ./ott/lang_simple.ott  lines 221 - 226 and file ./ott/lang_simple.ott  lines 228 - 230 and file ./ott/lang_simple.ott  lines 233 - 243 and file ./ott/lang_simple.ott  lines 246 - 248 and file ./ott/lang_simple.ott  lines 250 - 279 and file ./ott/lang_simple.ott  lines 284 - 298 and file ./ott/lang_simple.ott  lines 303 - 311 and file ./ott/lang_simple.ott  lines 314 - 315 and file ./ott/lang_simple.ott  lines 317 - 320 and file ./ott/lang_simple.ott  lines 322 - 326 and file ./ott/lang_simple.ott  lines 334 - 336 and file ./ott/lang_simple.ott  lines 345 - 360 and file ./ott/lang_simple.ott  lines 364 - 373 and file ./ott/lang_simple.ott  lines 376 - 381 and file ./ott/lang_simple.ott  lines 383 - 394 and file ./ott/lang_simple.ott  lines 398 - 400 and file ./ott/lang_simple.ott  lines 411 - 416 and file ./ott/lang_simple.ott  lines 418 - 424 and file ./ott/lang_simple.ott  lines 470 - 473 and file ./ott/lang_simple.ott  lines 475 - 479 and file ./ott/lang_simple.ott  lines 481 - 485 and file ./ott/lang_simple.ott  lines 613 - 618 and file ./ott/lang_simple.ott  lines 621 - 623 and file ./ott/lang_simple.ott  lines 625 - 627 and file ./ott/lang_simple.ott  lines 629 - 630 
(define-language L  

(level i j ::= natural)

;; #source file ./ott/lang_simple.ott  lines 284 - 298 
  (canonical gu gU ::= 
    (CanonicalLam var gu)
    (CanonicalAtomic grr)
    CanonicalDyn
    (CanonicalPi var gU_11 gU_22))
  ;grammar_pp, 2817: and 
;; #source file ./ott/lang_simple.ott  lines 303 - 311 
  (atomic grr gRR ::= 
    (AtomicSpine var ge)
    (AtomicSet i)
    AtomicNat
    AtomicZero
    (AtomicSucc gu))
  ;grammar_pp, 2817: and 
;; #source file ./ott/lang_simple.ott  lines 322 - 326 
  (spine ge ::= 
    SpineEmpty
    (SpineCons ge gu)
    (SpineNatElim ge gU gu_11 var var gu_22))

;; #source file ./ott/lang_simple.ott  lines 334 - 336 
  (epsilon ep ::= 
    (EvidenceEv gU))

;; #source file ./ott/lang_simple.ott  lines 156 - 190 
  (term tt ett TT ::= 
    (TermLam var tt)
    (TermApp tt_11 tt_22)
    var
    (TermSet i)
    (TermPi var TT_11 TT_22)
    (TermAnn tt TT)
    (TermEp ep tt)
    TermDyn
    TermError
    TermNat
    TermZero
    (TermSucc tt)
    (TermNatElim tt_11 TT tt_22 var var tt_33))

;; #source file ./ott/lang_simple.ott  lines 481 - 485 
  (Env ::= 
    EnvEmpty
    (EnvExt var gU Env)
    (Envconcat Env_11 Env_22))

(iinf ::= number)

;; #source file ./ott/lang_simple.ott  lines 398 - 400 
  (dummyev dummyeV ::= 
    (DummyEvidenceValueEv ep rv)
    (DummyEvidenceValueRaw rv))

;; #source file ./ott/lang_simple.ott  lines 629 - 630 
  (ent ::= 
    (ENTTriple et gu gU))

;; #source file ./ott/lang_simple.ott  lines 625 - 627 
  (iinfs jinfs ::= 
    (UniverseMultiSetSingleton iinf)
    (UniverseMultiSetSum iinfs jinfs))

;; #source file ./ott/lang_simple.ott  lines 621 - 623 
  (is js ::= 
    (LevelMultiSetSingleton i)
    (LevelMultiSetSum is js))

;; #source file ./ott/lang_simple.ott  lines 418 - 424 
  (evalContext EC ::= 
    (TermApp hole et)
    (TermApp ev hole)
    (TermPi x hole eT)
    (TermEp ep hole))

;; #source file ./ott/lang_simple.ott  lines 411 - 416 
  (simpleContext SC ::= 
    (TermApp hole t)
    (TermApp sv hole)
    (TermPi x hole T)
    (TermAnn hole T))

;; #source file ./ott/lang_simple.ott  lines 345 - 360 
  (et eT ::= 
    (TermLam var et)
    (TermApp et_11 et_22)
    var
    (TermPi var eT_11 eT_22)
    (TermSet i)
    TermDyn
    (TermEp ep et)
    TermNat
    TermZero
    (TermSucc et)
    (TermNatElim et_11 eT et_22 var var et_33)
    TermError)

;; #source file ./ott/lang_simple.ott  lines 213 - 218 
  (u U ::= 
    (CanonicalLam var u)
    (CanonicalAtomic rr)
    (CanonicalPi var U_11 U_22))

;; #source file ./ott/lang_simple.ott  lines 246 - 248 
  (gtCheckOnly gTCheckOnly ::= 
    (TermLam var gt)
    (TermPi var gT_11 gT_22))

;; #source file ./ott/lang_simple.ott  lines 383 - 394 
  (ev eV ::= 
    (TermEp ep rv)
    (TermPi var eV eT)
    (TermLam var et)
    (TermSet i)
    TermDyn
    TermNat
    TermZero
    (TermSucc ev))

;; #source file ./ott/lang_simple.ott  lines 317 - 320 
  (grrNoSub ::= 
    (AtomicSet i)
    AtomicNat
    AtomicZero)

;; #source file ./ott/lang_simple.ott  lines 314 - 315 
  (guNoSub ::= 
    (CanonicalAtomic grrNoSub))

;; #source file ./ott/lang_simple.ott  lines 228 - 230 
  (e ::= 
    SpineEmpty
    (SpineCons e u))

;; #source file ./ott/lang_simple.ott  lines 140 - 152 
  (ttSynth ettSynth TTSynth ::= 
    (TermApp tt_11 tt_22)
    var
    (TermSet i)
    (TermAnn gt gT)
    TermDyn
    (TermEp ep et)
    TermNat
    TermZero
    (TermSucc tt)
    (TermNatElim tt_11 TT tt_22 var var tt_33))

;; #source file ./ott/lang_simple.ott  lines 364 - 373 
  (rv rV ::= 
    (TermLam var et)
    (TermPi var eV eT)
    (TermSet i)
    TermDyn
    TermNat
    TermZero
    (TermSucc ev))

;; #source file ./ott/lang_simple.ott  lines 470 - 473 
  (SGamma ::= 
    EnvEmpty
    (EnvExt var U SGamma)
    (Envconcat SGamma_11 SGamma_22))

;; #source file ./ott/lang_simple.ott  lines 475 - 479 
  (Gamma ::= 
    EnvEmpty
    (EnvExt var gU Gamma)
    (Envconcat Gamma_11 Gamma_22))

;; #source file ./ott/lang_simple.ott  lines 195 - 204 
  (t T ::= 
    (TermLam var t)
    (TermApp t_11 t_22)
    var
    (TermPi var T_11 T_22)
    (TermSet i)
    (TermAnn t T))

;; #source file ./ott/lang_simple.ott  lines 233 - 243 
  (gtSynth gTSynth ::= 
    (TermApp gt_11 gt_22)
    var
    (TermSet i)
    (TermAnn gt gT)
    TermDyn
    TermNat
    TermZero
    (TermSucc gt)
    (TermNatElim gt_11 gT gt_22 var var gt_33))

;; #source file ./ott/lang_simple.ott  lines 250 - 279 
  (gt gT ::= 
    (TermLam var gt)
    (TermApp gt_11 gt_22)
    var
    (TermSet i)
    (TermPi var gT_11 gT_22)
    (TermAnn gt gT)
    TermDyn
    TermNat
    TermZero
    (TermSucc gt)
    (TermNatElim gt_11 gT gt_22 var var gt_33))

;; #source file ./ott/lang_simple.ott  lines 221 - 226 
  (rr RR ::= 
    (AtomicSpine var e)
    (AtomicSet i))

;; #source file ./ott/lang_simple.ott  lines 376 - 381 
  (simpleValue sv sV ::= 
    (TermLam var t)
    (TermPi var sV T)
    (TermSet i))
   (var x y z X Y Z ::= variable-not-otherwise-mentioned)

    #:binding-forms

    (TermSynthNatElim tt_11 TT tt_22 x_11 x_22 tt_33 #:refers-to (shadow x_11))
    (TermLam x tt #:refers-to (shadow x))
    (TermPi x TT_11 TT_22 #:refers-to (shadow x))
    (TermNatElim tt_11 TT tt_22 x_11 x_22 tt_33 #:refers-to (shadow x_11))
    (StaticTermLam x t #:refers-to (shadow x))
    (StaticTermPi x T_11 T_22)
    (SCanonicalLam x u #:refers-to (shadow x))

    (GradualTermSynthNatElim gt_11 gT gt_22 x_11 x_22 gt_33 #:refers-to (shadow x_11))
    (GradualTermCheckOnlyLam x gt #:refers-to (shadow x))
    (GradualTermCheckOnlyPi x gT_11 gT_22 #:refers-to (shadow x))
    (GradualTermLam x gt #:refers-to (shadow x))
    (GradualTermPi x gT_11 gT_22 #:refers-to (shadow x))
    (GradualTermNatElim gt_11 gT gt_22 x_11 x_22 gt_33 #:refers-to (shadow x_11))
    (CanonicalLam x gu #:refers-to (shadow x))
    (CanonicalPi x gU_11 gU_22 #:refers-to (shadow x))

    (SpineNatElim ge gU gu_11 x_11 x_22 gu_22 #:refers-to (shadow x_11))

    (EvidenceTermLam x et #:refers-to (shadow x))
    (EvidenceTermPi x eT_11 eT_22 #:refers-to (shadow x))
    (EvidenceTermNatElim et_11 eT et_22 x_11 x_22 et_33 #:refers-to (shadow x_11))
    (RawValueLam x et #:refers-to (shadow x))
    (SimpleValueLam x t #:refers-to (shadow x))
    (SimpleValuePi x sV T #:refers-to (shadow x))
    (EvidenceValuePi x eV eT #:refers-to (shadow x))
    (EvidenceValueLam x et #:refers-to (shadow x))

)

;;;; subrules 
;; #source file ./ott/lang_simple.ott  lines 644 - 644 and file ./ott/lang_simple.ott  lines 645 - 645 and file ./ott/lang_simple.ott  lines 648 - 648 and file ./ott/lang_simple.ott  lines 649 - 649 and file ./ott/lang_simple.ott  lines 650 - 650 and file ./ott/lang_simple.ott  lines 651 - 651 and file ./ott/lang_simple.ott  lines 652 - 652 and file ./ott/lang_simple.ott  lines 653 - 653 and file ./ott/lang_simple.ott  lines 654 - 654 and file ./ott/lang_simple.ott  lines 655 - 655 and file ./ott/lang_simple.ott  lines 656 - 656 and file ./ott/lang_simple.ott  lines 657 - 657 and file ./ott/lang_simple.ott  lines 659 - 659 and file ./ott/lang_simple.ott  lines 660 - 660 and file ./ott/lang_simple.ott  lines 665 - 665 and file ./ott/lang_simple.ott  lines 666 - 666 and file ./ott/lang_simple.ott  lines 667 - 667 and file ./ott/lang_simple.ott  lines 670 - 670 
;; #source file ./ott/lang_simple.ott  lines 681 - 692 
;; #source file ./ott/lang_simple.ott  lines 694 - 1023 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Hand-written implementations
;; These are mostly to speed up type-checking and running GDTL programs
;; They should match the inductive definitions in the ott file
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; The (precision) meet of two types/terms
;; Throws an exception if the meet does not exist

(define (meet gu_1 gu_2)
  (with-handlers ([exn:fail:redex? (lambda (exn) (error 'RuntimeError "Incompatible types:\n    ~a\nand\n   ~a" (pt gu_1) (pt gu_2) ))])
    (meet_ (term (^ ,gu_1 ,gu_2)))
  ))

(define meet_
  (term-match/single L
               [(^ CanonicalDyn gu) (term gu)]
               [(^ gu CanonicalDyn) (term gu)]
               [(^ guNoSub guNoSub) (term guNoSub)]
               [(^ (CanonicalAtomic (AtomicSucc gu)) (CanonicalAtomic (AtomicSucc gu_2))) (term (CanonicalAtomic (AtomicSucc ,(meet (term gu) (term gu_2) )))) ]
               [(^ (CanonicalAtomic (AtomicSpine x SpineEmpty)) (CanonicalAtomic (AtomicSpine x SpineEmpty))) (term (CanonicalAtomic (AtomicSpine x SpineEmpty)))]
               [(^ (CanonicalAtomic (AtomicSpine x (SpineCons ge_1 gu_1))) (CanonicalAtomic (AtomicSpine x (SpineCons ge_2 gu_2))))
                (term-let ([(CanonicalAtomic (AtomicSpine x ge_3)) (meet (term (CanonicalAtomic (AtomicSpine x ge_1))) (term (CanonicalAtomic (AtomicSpine x ge_2))))])
                          (term (CanonicalAtomic (AtomicSpine x (SpineCons ge_3 ,(meet (term gu_1) (term gu_2)))))))]
               [(^ (CanonicalAtomic (AtomicSpine x (SpineNatElim ge_ gU_ gu_2 x_1 x_2 gu_3))) (CanonicalAtomic (AtomicSpine x (SpineNatElim ge_^ gU_^ gu_2^ x_1^ x_2^ gu_3^))))
                (term-let ([(CanonicalAtomic (AtomicSpine x ge_3)) (meet (term (CanonicalAtomic (AtomicSpine x ge_))) (term (CanonicalAtomic (AtomicSpine x ge_^))))])
                          (term (CanonicalAtomic (AtomicSpine x (SpineNatElim ge_3 ,(meet (term gU_) (term gU_^)) ,(meet (term gu_2) (term gu_2^)) ,(meet (term x_1) (term x_1^)) ,(meet (term x_2) (term x_2^)) ,(meet (term gu_3) (term gu_3^)) )))))]
               ;;;;TODO alpha rename
               [(^ (CanonicalLam x gu_1) (CanonicalLam y gu_2))
                (let ([z (gensym)])
                 (term (CanonicalLam ,z ,(meet (term (substitute gu_1 x ,z)) (term (substitute gu_2 y ,z))) )))]
               [(^ (CanonicalPi x gU_11 gU_12) (CanonicalPi y gU_21 gU_22))
                (let ([z (gensym)])
                 (term (CanonicalPi ,z ,(meet (term gU_11) (term gU_21)) ,(meet (term (substitute gU_12 x ,z)) (term (substitute gU_22 y ,z))) )))]
               ))

;;Find the eta-expanded form of gu at type gU
(define (eta-expand gu gU)
  (first (judgment-holds (GEtaExpandC ,gu gu_ret ,gU) gu_ret)
))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Hereditary substitution: normal forms as input and output
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (hsub x_old gu_new gU gu) ((hsub_ gu) x_old gu_new gU) )

(define hsub_
  (term-match/single L
                     [CanonicalDyn (lambda (x_old gu_new gU) (term CanonicalDyn))]
                     [(CanonicalLam x gu) (lambda (x_old gu_new gU)
                                            (term (CanonicalLam x ,(hsub x_old gu_new gU (term gu)) )))]
                     [(CanonicalPi x gU_1 gU_2)
                      (lambda (x_old gu_new gU)
                        (term (CanonicalPi x
                                         ,(hsub x_old gu_new gU (term gU_1)) 
                                         ,(hsub x_old gu_new gU (term gU_2)))))]
                     [guNoSub (lambda (x_old gu_new gU)
                                                        (term guNoSub))]
                     [(CanonicalAtomic (AtomicSucc gu)) (lambda (x_old gu_new gU) (term (CanonicalAtomic (AtomicSucc ,(hsub x_old gu_new gU (term gu))))))]
                     [(CanonicalAtomic (AtomicSpine x ge))
                      (lambda (x_old gu_new gU) (if (equal? (term x) x_old)
                                                    (term-let ([(TermPair gu_ret1 gU_ret2) ((hsub-spine (term ge)) x_old gu_new gU)])
                                                               (term gu_ret1)
                                                               )
                                                               (term (CanonicalAtomic (AtomicSpine x ,((hsub-map-spine (term ge)) x_old gu_new gU)) ))))]
                     )
  )

;; Helpers for hsub

;;Perform a substitution in each element of a spine
(define hsub-map-spine
  (term-match/single L
                     [SpineEmpty (lambda (x_old gu_new gU) (term SpineEmpty))]
                     [(SpineCons ge gu) (lambda (x_old gu_new gU)
                                          (term (SpineCons ,((hsub-map-spine (term ge)) x_old gu_new gU) ,(hsub x_old gu_new gU (term gu)))))]
                     [(SpineNatElim ge gU_motive gu_2 x_1 x_2 gu_3) (lambda (x_old gu_new gU)
                                          (term (SpineNatElim ,((hsub-map-spine (term ge)) x_old gu_new gU)
                                                              ,(hsub x_old gu_new gU (term gU_motive))
                                                              ,(hsub x_old gu_new gU (term gu_2))
                                                              x_1
                                                              x_2
                                                              ,(hsub x_old gu_new gU (term gu_3)))))]))

;; Perform a hereditary substitution on a spine whose head is the variable being replaced
(define hsub-spine
  (term-match/single L
                     [SpineEmpty (lambda (x gu_new gU) (term (TermPair ,gu_new ,gU)))]
                     [(SpineCons ge gu) (lambda (x gu_new gU) (hsub-spine-withsub (term (TermPair ,(hsub x gu_new gU (term gu)) ,( (hsub-spine (term ge)) x gu_new gU) )) )) ]
                     [(SpineNatElim ge gU_motive gu_Z x_n x_rec gu_S) (lambda (x gu_new gU)
                                                                       (let ([subbed (hsub x gu_new gU (term (CanonicalAtomic (AtomicSpine x ge))))])
                                                                        (term (TermPair
                                                                         ,(hsub-natElim (term (NatElim ,subbed gU_motive gu_Z x_n x_rec gu_S )) )
                                                                         ,(bodysub (term CNat) subbed (term gU_motive))
                                                                         )))
                                                                        
                                                                        ) ]))

;; Perform a hereditary subtitution on a cons-spine whose head is the variable being replaced,
;; Given the result of substituting on all but the last element of the spine
(define hsub-spine-withsub
  (term-match/single L
                     [(TermPair gu_subbed (TermPair (CanonicalLam x gu_body) (CanonicalPi y gU_dom gU_cod) ))
                      (let ([gu_val (hsub (term x) (term gu_subbed) (term gU_dom) (term gu_body))]
                            [gU_type (hsub (term y) (term gu_subbed) (term gU_dom) (term gU_cod))])
                       (term (TermPair ,(eta-expand gu_val gU_type) ,gU_type )))]
                     [(TermPair gu_subbed (TermPair gu_spine CanonicalDyn)) (term (TermPair CanonicalDyn CanonicalDyn))]
                     [(TermPair gu_subbed (TermPair CanonicalDyn (CanonicalPi y gU_dom gU_cod)) ) (term (TermPair CanonicalDyn ,(hsub (term y) (term gu_subbed) (term gU_dom) (term gU_cod))))]))

(define-term CNat (CanonicalAtomic AtomicNat))

(define hsub-natElim
  (term-match/single L
                     [(NatElim (CanonicalAtomic (AtomicSpine x ge)) gU_motive gu_Z x_n x_rec gu_S )
                      (term (CanonicalAtomic (AtomicSpine x (SpineNatElim ge gU_motive gu_Z x_n x_rec gu_S))))]
                     [(NatElim (CanonicalAtomic (AtomicZero))  )
                      (term gu_Z)]
                     [(NatElim (CanonicalAtomic (AtomicSucc gu)) gU_motive gu_Z x_n x_rec gu_S )
                      (term (hsub x_rec (bodysub CNat gu gU_motive) (hsub-natElim (term (NatElim gu gU_motive gu_Z x_n x_rec gu_S) )) (hsub x_n CNat gu gu_S)   ))]
                     [(NatElim CanonicalDyn gU_motive gu_Z x_n x_rec gu_S )
                      (term CanonicalDyn)]))

(define bodysub_
  (term-match/single L
   [(CanonicalLam x gu) (lambda (gU gu_arg) (hsub (term x) gU gu_arg (term gu) ))]
   [CanonicalDyn (term CanonicalDyn)]
   ))

(define (bodysub gU gu_arg gu_fun)
  ((bodysub_ gu_fun) gU gu_arg))

;; A performance hack
;; We leave all definitions as variables in elaborated form
;; And insert them immediately before evaluating
;; This prevents us from having to re-typecheck definitions
(define perform-elab-substs
  (term-match/single L 
                     [x (if (hash-has-key? currently-defined-vars (term x) ) 
                            (redex-let L ([ (ENTTriple et gu gU) (hash-ref currently-defined-vars (term x)) ]) (term et)  )
                            (term x) )]
                     [(TermLam x et) (term (TermLam x ,(perform-elab-substs (term et)))) ]
                     [(TermApp et_11 et_22) (term (TermApp ,(perform-elab-substs (term et_11)) ,(perform-elab-substs (term et_22))))]
                     [(TermPi x eT_11 eT_22) (term (TermPi x ,(perform-elab-substs (term eT_11)) ,(perform-elab-substs (term eT_22))))]
                     [(TermSet i) (term (TermSet i))]
                     [TermDyn (term TermDyn)]
                     [(TermEp ep et) (term (TermEp ep ,(perform-elab-substs (term et))))]
                     [TermError (term TermError)]
                     [TermNat (term TermNat)]
                     [TermZero (term TermZero)]
                     [(TermSucc et) (term (TermSucc ,(perform-elab-substs (term et))))]
                     [(TermNatElim et eT et_Z x_m x_r et_S) (term (TermNatElim ,(perform-elab-substs (term et)) ,(perform-elab-substs (term eT)) ,(perform-elab-substs (term et_Z)) x_m x_r ,(perform-elab-substs (term et_S)) ))]
                     
                     ))

;; Compute the domain of a function type or ?
(define dom
  (term-match/single L
                     [CanonicalDyn (term CanonicalDyn)]
                     [(CanonicalPi x gU gU_2) (term gU)]
                     [_ (error "Cannot treat as a function type")]))

;; Helpers for manipulating universe levels
(define-metafunction L 
  succ : i -> i
  [(succ i) ,(+ (term i) 1)])
  
  (define-metafunction L 
  pred : i -> i
  [(pred i) ,(- (term i) 1)])

;;;;;;;;;;;;;;;;;;;;;;;;;
;; Computes replacing of x_old by et_new in et, where et_new has normal form gu at type gU
;; Substitution on evidence terms
;; Because evidence terms contain evidence, when performing a substitution
;; We may also need to subsitute in the evidence
;; Since this is (type-directed) hereditary substitution on normal forms,
;; We need to know the type and normal form of the value we're inserting
;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-metafunction L 
  esubst : et var et gu gU -> et 
  [(esubst x_old x_old et_new gu gU) et_new ]
  [(esubst y x_old et_new gu gU) y (side-condition (not (equal? (term x_old) (term y)))) ]
  [(esubst (TermPi y eT_1 eT_2) x_old et_new gu gU) 
    (TermPi y (esubst eT_1 x_old et_new gu gU) (esubst eT_2 x_old et_new gu gU ))
    (side-condition (not (equal? (term x_old) (term y))))
  ]
  [(esubst (TermLam y et) x_old et_new gu gU) 
    (TermLam y (esubst et x_old et_new gu gU ))
    (side-condition (not (equal? (term x_old) (term y))))]
  [(esubst (TermApp et_1 et_2) x_old et_new gu gU) (TermApp (esubst et_1 x_old et_new gu gU) (esubst et_2 x_old et_new gu gU))]
  [(esubst (TermEp (EvidenceEv gU_1 ) et) x_old et_new gu gU) (TermEp (EvidenceEv gU_new) (esubst et x_old et_new gu gU))
    (judgment-holds (GHsub  x_old gU gu gU_1 gU_new))]
  [(esubst (TermSet i) x_old et_new gu gU) (TermSet i) ]
  [(esubst TermDyn x_old et_new gu gU) TermDyn]
  [(esubst TermNat x_old et_new gu gU) TermNat]
  [(esubst TermZero x_old et_new gu gU) TermZero]
  [(esubst (TermSucc et) x_old et_new gu gU) (TermSucc (esubst et x_old et_new gu gU))]
  [(esubst (TermNatElim et eT et_Z x_m x_r et_S) x_old et_new gu gU)  (TermNatElim (esubst et x_old et_new gu gU) (esubst eT x_old et_new gu gU) (esubst et_Z x_old et_new gu gU) x_m x_r (esubst et_S x_old et_new gu gU) )]
)

;; Test whether a term can possibly synthesize a type
(define-metafunction L 
 is-check-only : term -> boolean
 [(is-check-only TermDyn) #t]
 [(is-check-only (TermPi x TT_1 TT_2)) #t]
 [(is-check-only (TermLam x tt)) #t]
 [(is-check-only tt) #f] 
)

;;;;;;;;;;;;;;;;;;;
;; Checks whether the input types areof the form (Set i) (Set j)
;; where i < j
;; We need this because Set i and Set j are not *consistent*, we can only convert between them in one direction
;; So when we switch between synthesis and checking, we need to tell whether we're checking the types for Consistency
;; Or checking if we can raise from a lower universe to a higher one
;;;;;;;;;;;;;;;;;;

(define-metafunction L 
 is-set-pair : gU gU_V -> boolean
 [(is-set-pair (CanonicalAtomic (AtomicSet i)) (CanonicalAtomic (AtomicSet j))) #t (side-condition (< (term i) (term j)))]
 [(is-set-pair gU gU_V) #f] 
)

;; Get the typed wrapped in evidence
(define-metafunction L 
 type-in-ev : ep -> gU
 [(type-in-ev (EvidenceEv gU)) gU]
)

(define (mparens-pt tt)
  (let ([str (pt tt)])
    (if (string-contains? str " ")
        (string-append "(" str ")")
        str)
    ))

;; Pretty-print a term
;; Pattern-matcher for pretty-printing terms 
(define pt
    (term-match/single L
    [x (symbol->string (term x))]
    [(TermLam x any_tt) (string-append "λ " (pt (term x)) " . " (pt (term any_tt)) )]
    [(TermPi x any_TT_1 any_TT_2) (string-append "( " (pt (term x)) " : " (pt (term any_TT_1)) ") -> " (pt (term any_TT_2)) )]
    [(TermSet i) (string-append "Set" (number->string (term i)))]
    [(TermApp any_tt_1 any_tt_2) (string-append  (mparens-pt (term any_tt_1)) " " (mparens-pt (term any_tt_2)) )]
    [TermDyn "?"]
    [TermError "⊥"]
    [(TermAnn any_tt_1 any_tt_2) (string-append (pt (term any_tt_1)) " :: " (pt (term any_tt_2)))]
    [(TermDynAnn any_gU) (string-append "?" (mparens-pt (term any_gU)))]
    [(TermEp (EvidenceEv any_gU ) any_tt) (string-append "〈" (pt (term any_gU)) "〉" (mparens-pt (term any_tt)) )]
    [(CanonicalAtomic any_grr) (mparens-pt (term any_grr))]
    [(CanonicalLam x any_gu) (string-append "λ " (pt (term x)) " . " (pt (term any_gu)) )]
    [(CanonicalPi x any_gU any_gU_V) (string-append "( " (pt (term x)) " : " (pt (term any_gU)) ") -> " (pt (term any_gU_V)) )]
    [(AtomicSet i) (string-append "Set" (number->string (term i)))]
    [AtomicNat "Nat"]
    [AtomicZero "0"]
    [CanonicalDyn "?"]
    [(Atomic any_tt) (string-append "Succ " (mparens-pt (term any_tt)))]
    [(AtomicSpine x any_ge) (string-append  (mparens-pt (term x)) " " (mparens-pt (term any_ge)) )]
    [SpineEmpty ""]
    [(SpineCons any_ge any_gu) (string-append (mparens-pt (term any_ge)) " " (mparens-pt (term any_gu)))]
    [(SpineNatElim any_TT any_tt_Z x_m x_r any_tt_S) (string-append "NatElim " (mparens-pt (term any_TT)) " " (mparens-pt (term any_tt_Z)) " " (mparens-pt (term x_m)) " " (mparens-pt (term x_r)) " " (mparens-pt (term any_tt_S)) " ")]
    [TermNat "Nat"]
    [TermZero "0"]
    [(TermSucc any_tt) (printNat 1 (term any_tt))]
    [(AtomicSucc any_tt) (printNat 0 (term any_tt))]
    [(TermNatElim any_tt any_TT any_tt_Z x_m x_r any_tt_S) (string-append "NatElim " (mparens-pt (term any_tt)) " " (mparens-pt (term any_TT)) " " (mparens-pt (term any_tt_Z)) " " (mparens-pt (term x_m)) " " (mparens-pt (term x_r)) " " (mparens-pt (term any_tt_S)))]
    ; [any (format "~a" (term any))]
    
    ))

(define (printNat n t)
  ((printNat_ t) n) )

(define printNat_
  (term-match/single
   L
   [(TermEp ep TermZero) (lambda (n) (number->string n))]
   [TermZero (lambda (n) (number->string n))]
   [(TermEp ep (TermSucc any)) (lambda (n) (printNat (+ n 1) (term any)))]
   [(TermSucc any) (lambda (n) (printNat (+ n 1) (term any)))]
   [any (lambda (n) (string-append (number->string n) " + " (mparens-pt (term any))))]
   ))

;; Print the type wrapped in evidence
(define (printEvType ep)
 (term-let ([(EvidenceEv gU ) ep]) (pt (term gU))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Ott's notion of context doesn't play nice with Redex
;; So we extend our language with our own notion of evaluation contexts
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extended-language LContext
  L
  (redexContext RC ::= 
    hole
    (TermApp RC et)
    (TermApp ev RC)
    (TermPi x RC eT)
    (TermEp ep RC)
    (TermSucc RC)
    (TermNatElim RC eT et_Z x_1 x_2 et_S)
    (TermNatElim ev RC et_Z x_1 x_2 et_S)
    (TermNatElim ev eV RC x_1 x_2 et_S)

    )
)

;;;;;;;;;;;;;;;;
;; The contextual-closure of our single-small-step reduction relation
;;;;;;;;;;;;;;;
(define Red
  (reduction-relation LContext
  (--> et_1 et_2 (judgment-holds (Step et_1 et_2)))
  )
)

 

;; #source file ./ott/lang_simple.ott  lines 1025 - 1027 


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Environment helpers, implemented by hand for speed
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Returns the type for x in environment Gamma, or #f if x is not in Gamma
(define (gVarLook x Gamma)
  ((gVarLook_ Gamma) x)
  )

(define gVarLook_
  (term-match/single L 
                     [EnvEmpty (lambda (x) #f)]
                     [(EnvExt y gU Gamma) (lambda (x) (if (equal? x (term y))
                                                          (term gU)
                                                          (gVarLook x (term Gamma)) 
                                                          ))]
                     ))

;; Returns whether x is free in Gamma 
(define (gVarFree x Gamma)
  ((gVarFree Gamma) x)
  )

(define gVarFree_
  (term-match/single L 
                     [EnvEmpty #t]
                     [(EnvExt y gU Gamma) (lambda (x) (if (equal? x (term y))
                                                          #f
                                                          (gVarFree x (term Gamma)) 
                                                          ))]))
;;Judgment-form versions of the above functions

(define-judgment-form
  L
  #:mode (GVarLook I O I)
  #:contract (GVarLook x gU Gamma)

  [
   (where gU ,(gVarLook (term x) (term Gamma)))
   ------------------------------------- "GVarLookHead"
   (GVarLook x gU Gamma)]

  )
(define-judgment-form L 
 
  #:mode (GVarFree I I)
  #:contract (GVarFree x Gamma)

  ;; #source file ./ott/lang_simple.ott  lines 895 - 899 
  [
   (side-condition ,(gVarFree (term x) (term Gamma)))
   ---------------------------------- "GFreeLookCons"
   (GVarFree x Gamma)]
  )

;; #source file ./ott/lang_simple.ott  lines 1196 - 1198 

  

  ;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Hereditary substitution on environments
  ;;;;;;;;;;;;;;;;;;;;;;;;;

;;; definitions 

(define-judgment-form
  L
  #:mode (GradualEnvSub I I I I O)
  #:contract (GradualEnvSub x gU gu Gamma Gamma_^)

;; #source file ./ott/lang_simple.ott  lines 1558 - 1560 
 [------------------------------------------- "GradualEnvSubEmpty"
  (GradualEnvSub x gU gu EnvEmpty EnvEmpty)]

;; #source file ./ott/lang_simple.ott  lines 1561 - 1566 
 [
  
   (side-condition ,(not (alpha-equivalent? L (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  (GHsub x gU gu gU_11 gU_22)
  (GradualEnvSub x gU gu Gamma Gamma_^)
  ------------------------------------------------------------------------- "GradualEnvSubVarDiff"
  (GradualEnvSub x gU gu (EnvExt y gU_11 Gamma) (EnvExt y gU_22 Gamma_^))]

;; #source file ./ott/lang_simple.ott  lines 1567 - 1570 
 [
  
  (GradualEnvSub x gU gu Gamma Gamma_^)
  ------------------------------------------------------- "GradualEnvSubVarSame"
  (GradualEnvSub x gU gu (EnvExt x gU_^ Gamma) Gamma_^)]
)
;; #source file ./ott/lang_simple.ott  lines 1572 - 1572 


;;;;;;;;;;;;;;;;;
;; Judgment form versions of hereditary substitution and other related functions
;;;;;;;;;;;;;;;;

(define-judgment-form L 
 
  #:mode (GHsub I I I I O)
  #:contract (GHsub x gU gu_11 gu_22 gu_33)

  [ (where gu_33 ,(hsub (term x) (term gu_11) (term gU) (term gu_22)))
  --------------------------------------
  (GHsub x gU gu_11 gu_22 gu_33)
  ]

)

(define-judgment-form L 
 
  #:mode (Domain I O)
  #:contract (Domain gU gU_2)

  [ (where gU_2 ,(dom (term gU)))
  --------------------------------------
  (Domain gU gU_2)
  ]

)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Functions to substitute into the codomain of a function type
;; or the body of a function
;; Used to compute the return type and normal form (respectively) of function application.
;; Produces ? if the input is ?
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;; definitions 

(define-judgment-form
  L
  #:mode (CodSub I I O)
  #:contract (CodSub gu gU gU_^)

;; #source file ./ott/lang_simple.ott  lines 1750 - 1753 
 [(GHsub x gU_11 gu gU_22 gU_22^)
  ------------------------------------------------ "CodSubPi"
  (CodSub gu (CanonicalPi x gU_11 gU_22) gU_22^)]

;; #source file ./ott/lang_simple.ott  lines 1754 - 1756 
 [--------------------------------------- "CodSubDyn"
  (CodSub gu CanonicalDyn CanonicalDyn)]

)
(define-judgment-form L 
 
  #:mode (BodySub I I I O)
  #:contract (BodySub gU gu gu_22 gu_33)

;; #source file ./ott/lang_simple.ott  lines 1782 - 1785 
 [(GHsub x gU gu gu_22 gu_22^)
  ------------------------------------------------- "BodySubPi"
  (BodySub gU gu  (CanonicalLam x gu_22)  gu_22^)]

;; #source file ./ott/lang_simple.ott  lines 1786 - 1788 
 [------------------------------------------- "BodySubDyn"
  (BodySub gU gu CanonicalDyn CanonicalDyn)]
)
;; #source file ./ott/lang_simple.ott  lines 1790 - 1801 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Well-formedness checks for gradual canonical forms
;; GradualSet checks if there's some (Set i) that a given type checks against
;; WF checks if an environment is well formed (i.e. if each type in it checks against some Set i)
;; GCSynth synthesizes types for atomic (neutral) forms
;; And GCCheck checks a canonical form against a given type
;;
;; Consistent checks if two types are consistent i.e. equal, except for possible occurrences of ?
;; ConsistentSet checks if a type is (Set i) or ?. Used in type-checking Pi-types.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;; definitions 

(define-judgment-form
  L
  #:mode (GradualSet I I)
  #:contract (GradualSet Gamma gU)

;; #source file ./ott/lang_simple.ott  lines 1814 - 1817 
 [
  (GCSynth Gamma grr CanonicalDyn)
  ------------------------------------------ "GradualSetDynTy"
  (GradualSet Gamma (CanonicalAtomic grr))]

;; #source file ./ott/lang_simple.ott  lines 1818 - 1821 
 [
  (GCSynth Gamma grr (CanonicalAtomic (AtomicSet i)))
  ------------------------------------------ "GradualSetSet"
  (GradualSet Gamma (CanonicalAtomic grr))]

;; #source file ./ott/lang_simple.ott  lines 1824 - 1829 
 [
  (GradualSet Gamma gU_11)
    
  (GradualSet (EnvExt x gU_11 Gamma) gU_22)
  ------------------------------------------------ "GradualSetPi"
  (GradualSet Gamma (CanonicalPi x gU_11 gU_22))]

;; #source file ./ott/lang_simple.ott  lines 1831 - 1833 
 [
  --------------------------------- "GradualSetDynVal"
  (GradualSet Gamma CanonicalDyn)]

)
(define-judgment-form L 
 
  #:mode (WF I)
  #:contract (WF Gamma)

;; #source file ./ott/lang_simple.ott  lines 1839 - 1841 
 [--------------- "WFEmpty"
  (WF EnvEmpty)]

;; #source file ./ott/lang_simple.ott  lines 1842 - 1846 
 [
   (WF Gamma)   (GradualSet Gamma gU) 
  (GVarFree x Gamma)
  -------------------------- "WFExt"
  (WF (EnvExt x gU Gamma))]

)
(define-judgment-form L 
 
  #:mode (GCSynth I I O)
  #:contract (GCSynth Gamma grr gU)

;; #source file ./ott/lang_simple.ott  lines 1852 - 1855 
 [
   (side-condition ,(> (term  i ) 0)) 
  --------------------------------------------------------------------------- "GCSynthSet"
  (GCSynth Gamma (AtomicSet i) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 1857 - 1861 
 [
    
  (GVarLook x gU Gamma)
  --------------------------------------------------- "GCSynthVar"
  (GCSynth Gamma  (AtomicSpine  x  SpineEmpty)  gU)]

;; #source file ./ott/lang_simple.ott  lines 1865 - 1872 
 [
  (GCSynth Gamma (AtomicSpine x ge) gU)
  (Domain gU gU_22)
  (GCCheck Gamma gu gU_22)
  (CodSub gu gU gU_33)
  --------------------------------------------------------- "GCSynthApp"
  (GCSynth Gamma (AtomicSpine x (SpineCons ge gu)) gU_33)]

;; #source file ./ott/lang_simple.ott  lines 1873 - 1875 
 [
  ------------------------------------------------------------- "GCSynthNat"
  (GCSynth Gamma AtomicNat (CanonicalAtomic (AtomicSet  1 )))]

;; #source file ./ott/lang_simple.ott  lines 1876 - 1878 
 [
  -------------------------------------------------------- "GCSynthZero"
  (GCSynth Gamma AtomicZero (CanonicalAtomic AtomicNat))]

;; #source file ./ott/lang_simple.ott  lines 1879 - 1882 
 [
  (GCCheck Gamma gu (CanonicalAtomic AtomicNat))
  ------------------------------------------------------------- "GCSynthSucc"
  (GCSynth Gamma (AtomicSucc gu) (CanonicalAtomic AtomicNat))]

;; #source file ./ott/lang_simple.ott  lines 1883 - 1894 
 [
   (where   y  ,(gensym)) 
  (GCCheck Gamma (CanonicalAtomic (AtomicSpine x ge)) (CanonicalAtomic AtomicNat))
  (GCCheck Gamma gU (CanonicalPi y (CanonicalAtomic AtomicNat) (CanonicalAtomic (AtomicSet  1 ))))
  (BodySub (CanonicalAtomic AtomicNat) (CanonicalAtomic AtomicZero) gU gU_22)
  (GCCheck Gamma gu_22 gU_22)
  (BodySub (CanonicalAtomic AtomicNat) (CanonicalAtomic  (AtomicSpine  x_11  SpineEmpty) ) gU gU_33^)
  (BodySub (CanonicalAtomic AtomicNat) (CanonicalAtomic (AtomicSucc (CanonicalAtomic  (AtomicSpine  x_11  SpineEmpty) ))) gU gU_33)
  (GCCheck (EnvExt x_22 gU_33^ (EnvExt x_11 (CanonicalAtomic AtomicNat) Gamma)) gu_33 gU_33)
  (BodySub (CanonicalAtomic AtomicNat) (CanonicalAtomic (AtomicSpine x ge)) gU gU_44)
  ---------------------------------------------------------------------------------- "GCSynthNatElim"
  (GCSynth Gamma (AtomicSpine x (SpineNatElim ge gU gu_22 x_11 x_22 gu_33)) gU_44)]

)
(define-judgment-form L 
 
  #:mode (GCCheck I I I)
  #:contract (GCCheck Gamma gu gU)

;; #source file ./ott/lang_simple.ott  lines 1901 - 1905 
 [
  (GCSynth Gamma grr gU)
  (Consistent gU gU_^)
  -------------------------------------------- "GCCheckSynth"
  (GCCheck Gamma (CanonicalAtomic grr) gU_^)]

;; #source file ./ott/lang_simple.ott  lines 1906 - 1910 
 [
  (GCSynth Gamma gRR (CanonicalAtomic (AtomicSet i)))
   (side-condition ,(and (< 0 (term  i )) (<= (term  i ) (term  j )))) 
  ----------------------------------------------------------------------- "GCCheckLevel"
  (GCCheck Gamma (CanonicalAtomic gRR) (CanonicalAtomic (AtomicSet j)))]

;; #source file ./ott/lang_simple.ott  lines 1912 - 1916 

;; #source file ./ott/lang_simple.ott  lines 1918 - 1923 
 [
   (where   z  ,(gensym)) 
    
  (GCCheck (EnvExt z gU_11 Gamma)  (substitute  gu   x   z )   (substitute  gU_22   y   z ) )
  ------------------------------------------------------------------- "GCCheckLamPiRdxAlpha"
  (GCCheck Gamma  (CanonicalLam x gu)  (CanonicalPi y gU_11 gU_22))]

;; #source file ./ott/lang_simple.ott  lines 1924 - 1928 
 [
    
  (GCCheck (EnvExt x CanonicalDyn Gamma) gu CanonicalDyn)
  ---------------------------------------------------- "GCCheckLamDyn"
  (GCCheck Gamma  (CanonicalLam x gu)  CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 1929 - 1935 
 [
  (ConsistentSet gU_33)
  (GCCheck Gamma gU_11 gU_33)
    
  (GCCheck (EnvExt x gU_11 Gamma) gU_22 gU_33)
  --------------------------------------------------- "GCCheckPi"
  (GCCheck Gamma (CanonicalPi x gU_11 gU_22) gU_33)]

;; #source file ./ott/lang_simple.ott  lines 1937 - 1940 
 [
  (GradualSet Gamma gU)
  --------------------------------- "GCCheckDyn"
  (GCCheck Gamma CanonicalDyn gU)]

)
(define-judgment-form L 
 
  #:mode (ConsistentSet I)
  #:contract (ConsistentSet gU)

;; #source file ./ott/lang_simple.ott  lines 1948 - 1950 
 [------------------------------------------------- "ConsistentSetSet"
  (ConsistentSet (CanonicalAtomic (AtomicSet i)))]

;; #source file ./ott/lang_simple.ott  lines 1951 - 1953 
 [------------------------------ "ConsistentSetDyn"
  (ConsistentSet CanonicalDyn)]

)
(define-judgment-form L 
 
  #:mode (Consistent I I)
  #:contract (Consistent gU gU_^)

;; #source file ./ott/lang_simple.ott  lines 1963 - 1965 
 [-------------------- "ConsistentEq"
  (Consistent gu gu)]

;; #source file ./ott/lang_simple.ott  lines 1966 - 1970 

;; #source file ./ott/lang_simple.ott  lines 1972 - 1977 
 [ (where   z  ,(gensym)) 
  (Consistent gU_11 gU_11^)
  (Consistent  (substitute  gU_22   x   z )   (substitute  gU_22^   y   z ) )
  ------------------------------------------------------------------------ "ConsistentPiRdxAlpha"
  (Consistent (CanonicalPi x gU_11 gU_22) (CanonicalPi y gU_11^ gU_22^))]

;; #source file ./ott/lang_simple.ott  lines 1978 - 1981 

;; #source file ./ott/lang_simple.ott  lines 1983 - 1987 
 [ (where   z  ,(gensym)) 
  (Consistent  (substitute  gu   x   z )   (substitute  gu_^   y   z ) )
  ------------------------------------------------------------ "ConsistentLamRdxAlpha"
  (Consistent  (CanonicalLam x gu)   (CanonicalLam y gu_^) )]

;; #source file ./ott/lang_simple.ott  lines 1988 - 1992 
 [(Consistent (CanonicalAtomic (AtomicSpine x ge)) (CanonicalAtomic (AtomicSpine x ge_^)))
  (Consistent gu gu_^)
  -------------------------------------------------------------------------------------------------------------------------- "ConsistentApp"
  (Consistent (CanonicalAtomic (AtomicSpine x (SpineCons ge gu))) (CanonicalAtomic (AtomicSpine x (SpineCons ge_^ gu_^))))]

;; #source file ./ott/lang_simple.ott  lines 1993 - 1995 
 [------------------------------ "ConsistentDynL"
  (Consistent CanonicalDyn gu)]

;; #source file ./ott/lang_simple.ott  lines 1996 - 1998 
 [------------------------------ "ConsistentDynR"
  (Consistent gu CanonicalDyn)]
)
;; #source file ./ott/lang_simple.ott  lines 1999 - 2004 

;;;;;;;;;;
;; The meet of two pieces of evidence is just the meet of the wrapped types
;;;;;;;;;;;

;;; definitions 

(define-judgment-form
  L
  #:mode (EvMeet I I O)
  #:contract (EvMeet ep_11 ep_22 ep_33)

;; #source file ./ott/lang_simple.ott  lines 2014 - 2017 
 [(Meet gU_11 gU_22 gU_33)
  ------------------------------------------------------------------- "EvMeetUnwrap"
  (EvMeet (EvidenceEv gU_11) (EvidenceEv gU_22) (EvidenceEv gU_33))]
)
;; #source file ./ott/lang_simple.ott  lines 2018 - 2018 


;;;;;;;;;;;;;;;;;;
;; Judgment-form version of Meet and our precision operation
;;;;;;;;;;;;;;;;;;

(define-judgment-form L 
 
  #:mode (Meet I I O)
  #:contract (Meet gU_11 gU_22 gU_33)

  [
  (where gU_3 ,(meet (term gU_1) (term gU_2)))
  ---------------------------------
  (Meet gU_1 gU_2 gU_3)
  ]

)

(define-judgment-form L 
 
  #:mode (MorePrecise I I)
  #:contract (MorePrecise gU gU_^)

  [
  (Meet gU_1 gU_2 gU_1)
  ---------------------------------
  (MorePrecise gU_1 gU_2)
  ]

)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Definitions for whether a term (not canonical form) is more precise than another
;; Used to express our version of the gradual guarantee.
;;
;; Additionally, we define EvConsistent tests whether ep is evidence that gU1 ~=~ gU2
;; It does so by seeing if ep is a wrapper around a type more precise than another
;; This is used when checking our evidence terms
;; TODO: get evidence-term typing working in Redex
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

 

;;; definitions 

(define-judgment-form
  L
  #:mode (TermPrecise I I)
  #:contract (TermPrecise gt gt_^)

;; #source file ./ott/lang_simple.ott  lines 2165 - 2169 

;; #source file ./ott/lang_simple.ott  lines 2173 - 2176 

;; #source file ./ott/lang_simple.ott  lines 2179 - 2183 
 [
  
  (TermPrecise gt_11 gt_11^)
  (TermPrecise gt_22 gt_22^)
  ------------------------------------------------------------- "TermPreciseApp"
  (TermPrecise (TermApp gt_11 gt_22) (TermApp gt_11^ gt_22^))]

;; #source file ./ott/lang_simple.ott  lines 2184 - 2188 
 [
  
  (TermPrecise gt_11 gt_22)
  (TermPrecise gT_11 gT_22)
  ----------------------------------------------------------- "TermPreciseAscr"
  (TermPrecise (TermAnn gt_11 gT_11) (TermAnn gt_22 gT_22))]

;; #source file ./ott/lang_simple.ott  lines 2189 - 2192 
 [
  -------------------------- "TermPreciseDyn"
  (TermPrecise gt TermDyn)]

;; #source file ./ott/lang_simple.ott  lines 2193 - 2195 
 [--------------------- "TermPreciseRefl"
  (TermPrecise gT gT)]

)
(define-judgment-form L 
 
  #:mode (EvPrecise I I)
  #:contract (EvPrecise ep ep_^)

;; #source file ./ott/lang_simple.ott  lines 2202 - 2205 
 [(MorePrecise gU gU_^)
  ----------------------------------------------- "EvPreciseUnwrap"
  (EvPrecise (EvidenceEv gU) (EvidenceEv gU_^))]

)
(define-judgment-form L 
 
  #:mode (EvTermPrecise I I)
  #:contract (EvTermPrecise et et_^)

;; #source file ./ott/lang_simple.ott  lines 2212 - 2216 

;; #source file ./ott/lang_simple.ott  lines 2219 - 2222 

;; #source file ./ott/lang_simple.ott  lines 2224 - 2228 
 [
  
  (EvTermPrecise et_11 et_11^)
  (EvTermPrecise et_22 et_22^)
  --------------------------------------------------------------- "EvTermPreciseApp"
  (EvTermPrecise (TermApp et_11 et_22) (TermApp et_11^ et_22^))]

;; #source file ./ott/lang_simple.ott  lines 2229 - 2233 
 [
  
  (EvTermPrecise et_11 et_22)
  (EvPrecise ep_11 ep_22)
  ----------------------------------------------------------- "EvTermPreciseAscr"
  (EvTermPrecise (TermEp ep_11 et_11) (TermEp ep_22 et_22))]

;; #source file ./ott/lang_simple.ott  lines 2234 - 2236 
 [---------------------------- "EvTermPreciseDyn"
  (EvTermPrecise eT TermDyn)]

;; #source file ./ott/lang_simple.ott  lines 2237 - 2239 
 [------------------------------ "EvTermPreciseErr"
  (EvTermPrecise TermError eT)]

;; #source file ./ott/lang_simple.ott  lines 2240 - 2242 
 [----------------------- "EvTermPreciseRefl"
  (EvTermPrecise eT eT)]

)
(define-judgment-form L 
 
  #:mode (EvConsistent I I I)
  #:contract (EvConsistent ep gU gU_^)

;; #source file ./ott/lang_simple.ott  lines 2249 - 2253 
 [(Meet gU_11 gU_22 gU_33)
  (MorePrecise gU gU_33)
  -------------------------------------------- "EvConsistentDef"
  (EvConsistent (EvidenceEv gU) gU_11 gU_22)]
)
;; #source file ./ott/lang_simple.ott  lines 2254 - 2254 
 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Type-checking judgments for gradual terms
;; GSynth computes the type for the given term
;; GSynth checks a term against the given type
;; The gtSynth syntactic class speeds up pattern matching by restricting us to terms that can synthesize

;;GradualSetNorm computes the normal form for a term while checking that it types against some (Set i)
;;GNSynth and GNCheck are like GSynth and GCheck, but produce an (approximate) normal form for the given term.

;; The GEta judgments to help with eta-expanding terms and neutrals
;; so that we always produce eta-long normal forms

;; GElabSynth and GElabCheck are like GSynth and GCheck, but elaborate the given term
;; into an evidence term that we can run.
;; The main change is that we drop annotations, and ascribe initial evidence wherever
;; we apply the consistency relation during typechecking, so that its applications are explicit
;; in the terms. 
;; All functons and ? occurrences are also ascribed with evidence.

;; GradualNESynth and GradualNECheck perform normalization and elaboration simultaneously,
;; which sometimes speeds us up to avoid duplicate traversals

;; The GradualSynthCheck judgments (for normalization, elaboration, and combined)
;; are optimizations to avoid computing the synthesized type of a term twice
;; when checking if we should apply universe cumulativity or consistency
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;; definitions 

(define-judgment-form
  L
  #:mode (GSynth I I O)
  #:contract (GSynth Gamma gtSynth gU)

;; #source file ./ott/lang_simple.ott  lines 2322 - 2326 
 [
  
  (GradualSetNorm Gamma gU gT)
  (GCheck Gamma gt gU)
  ------------------------------------- "GSynthAnn"
  (GSynth Gamma  (TermAnn gt gT)  gU)]

;; #source file ./ott/lang_simple.ott  lines 2327 - 2330 
 [
   (side-condition ,(> (term  i ) 0)) 
  ------------------------------------------------------------------------ "GSynthSet"
  (GSynth Gamma (TermSet i) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 2332 - 2336 
 [
  (GVarLook x gU Gamma)
    
  ------------------------------- "GSynthVar"
  (GSynth Gamma x gU)]

;; #source file ./ott/lang_simple.ott  lines 2341 - 2346 
 [
  
   (GSynth Gamma gtSynth_11 gU)      
    (Domain gU gU_^)   (GNCheck Gamma gu gt_22 gU_^)  
  (CodSub gu gU gU_22)
  ------------------------------------------------- "GSynthApp"
  (GSynth Gamma (TermApp gtSynth_11 gt_22) gU_22)]

;; #source file ./ott/lang_simple.ott  lines 2347 - 2350 
 [
  ------------------------------------- "GSynthDyn"
  (GSynth Gamma TermDyn CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 2351 - 2353 
 [
  ---------------------------------------------------------- "GSynthNat"
  (GSynth Gamma TermNat (CanonicalAtomic (AtomicSet  1 )))]

;; #source file ./ott/lang_simple.ott  lines 2354 - 2356 
 [
  ----------------------------------------------------- "GSynthZero"
  (GSynth Gamma TermZero (CanonicalAtomic AtomicNat))]

;; #source file ./ott/lang_simple.ott  lines 2357 - 2360 
 [
  
  (GCheck Gamma gt (CanonicalAtomic AtomicNat))
  ---------------------------------------------------------- "GSynthSucc"
  (GSynth Gamma (TermSucc gt) (CanonicalAtomic AtomicNat))]

;; #source file ./ott/lang_simple.ott  lines 2361 - 2372 
 [
  
   (where   y  ,(gensym)) 
  (GNCheck Gamma gu_11 gt_11 (CanonicalAtomic AtomicNat))
  (GNCheck Gamma gU gT (CanonicalPi y (CanonicalAtomic AtomicNat) (CanonicalAtomic (AtomicSet  1 ))))
  (BodySub (CanonicalAtomic AtomicNat) (CanonicalAtomic AtomicZero) gU gU_22)
  (GCheck Gamma gt_22 gU_22)
  (BodySub (CanonicalAtomic AtomicNat) (CanonicalAtomic  (AtomicSpine  x_11  SpineEmpty) ) gU gU_33^)
  (BodySub (CanonicalAtomic AtomicNat) (CanonicalAtomic (AtomicSucc (CanonicalAtomic  (AtomicSpine  x_11  SpineEmpty) ))) gU gU_33)
  (GCheck (EnvExt x_22 gU_33^ (EnvExt x_11 (CanonicalAtomic AtomicNat) Gamma)) gt_33 gU_33)
  (BodySub (CanonicalAtomic AtomicNat) gu_11 gU gU_44)
  ------------------------------------------------------------------- "GSynthNatElim"
  (GSynth Gamma (TermNatElim gt_11 gT gt_22 x_11 x_22 gt_33) gU_44)]

)
(define-judgment-form L 
 
  #:mode (GCheck I I I)
  #:contract (GCheck Gamma gt gU)

;; #source file ./ott/lang_simple.ott  lines 2388 - 2393 
 [
  
  (GSynth Gamma gtSynth gU_^)
  (Consistent gU_^ gU)
  --------------------------- "GCheckSynth"
  (GCheck Gamma gtSynth gU)]

;; #source file ./ott/lang_simple.ott  lines 2394 - 2399 
 [
  (GSynth Gamma gTSynth (CanonicalAtomic (AtomicSet i)))
   (side-condition ,(and (< 0 (term  i )) (<= (term  i ) (term  j )))) 
  -------------------------------------------------------- "GCheckLevel"
  (GCheck Gamma gTSynth (CanonicalAtomic (AtomicSet j)))]

;; #source file ./ott/lang_simple.ott  lines 2408 - 2412 
 [
  
   (GNCheck Gamma gU_^ gT_11 gU)   (ConsistentSet gU) 
        (GCheck (EnvExt x gU_^ Gamma) gT_22 gU) 
  ------------------------------------------ "GCheckPi"
  (GCheck Gamma (TermPi x gT_11 gT_22) gU)]

;; #source file ./ott/lang_simple.ott  lines 2414 - 2418 

;; #source file ./ott/lang_simple.ott  lines 2420 - 2425 
 [
  
   (where   z  ,(gensym)) 
    
  (GCheck (EnvExt z gU_11 Gamma)  (substitute  gt   x   z )   (substitute  gU_22   y   z ) )
  ------------------------------------------------------------- "GCheckLamPiRdxAlpha"
  (GCheck Gamma  (TermLam x gt)  (CanonicalPi y gU_11 gU_22))]

;; #source file ./ott/lang_simple.ott  lines 2427 - 2431 
 [
  
    
  (GCheck (EnvExt x CanonicalDyn Gamma) gt CanonicalDyn)
  ---------------------------------------------- "GCheckLamDyn"
  (GCheck Gamma  (TermLam x gt)  CanonicalDyn)]

)
(define-judgment-form L 
 
  #:mode (GradualSetNorm I O I)
  #:contract (GradualSetNorm Gamma gU TT)

;; #source file ./ott/lang_simple.ott  lines 2449 - 2452 
 [
  
  (GNSynth Gamma TTSynth gU (CanonicalAtomic (AtomicSet i)))
  ----------------------------------- "GradualSetNormSynth"
  (GradualSetNorm Gamma gU TTSynth)]

;; #source file ./ott/lang_simple.ott  lines 2454 - 2458 
 [
  (GradualSetNorm Gamma gU_11 TT_1_1)
  (GradualSetNorm (EnvExt x gU_11 Gamma) gU_22 TT_2_2)
  ----------------------------------------------------------------------------- "GradualSetNormPi"
  (GradualSetNorm Gamma (CanonicalPi x gU_11 gU_22) (TermPi x TT_1_1 TT_2_2))]

;; #source file ./ott/lang_simple.ott  lines 2460 - 2462 
 [
  --------------------------------------------- "GradualSetNormDyn"
  (GradualSetNorm Gamma CanonicalDyn TermDyn)]

)
(define-judgment-form L 
 
  #:mode (GEtaLong I I)
  #:contract (GEtaLong gu gU)

;; #source file ./ott/lang_simple.ott  lines 2468 - 2470 
 [-------------------------------------------------------- "GEtaLongAtomic"
  (GEtaLong (CanonicalAtomic grr) (CanonicalAtomic gRR))]

;; #source file ./ott/lang_simple.ott  lines 2471 - 2473 
 [----------------------------------------------- "GEtaLongAtomicDyn"
  (GEtaLong (CanonicalAtomic grr) CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 2475 - 2478 

;; #source file ./ott/lang_simple.ott  lines 2479 - 2483 
 [ (where   z  ,(gensym)) 
  (GEtaLong  (substitute  gu   x   z )   (substitute  gU   y   z ) )
  ---------------------------------------------------------- "GEtaLongLamRdxAlpha"
  (GEtaLong  (CanonicalLam x gu)  (CanonicalPi y gU_^ gU))]

;; #source file ./ott/lang_simple.ott  lines 2484 - 2486 
 [---------------------------- "GEtaLongDyn"
  (GEtaLong CanonicalDyn gU)]

;; #source file ./ott/lang_simple.ott  lines 2487 - 2489 
 [------------------------------------------ "GEtaLongPi"
  (GEtaLong (CanonicalPi x gU gU_^) gU_^^)]

)
(define-judgment-form L 
 
  #:mode (GEtaExpand I O I)
  #:contract (GEtaExpand grr gu gU)

;; #source file ./ott/lang_simple.ott  lines 2495 - 2497 
 [-------------------------------------------------------------- "GEtaExpandAtomic"
  (GEtaExpand grr (CanonicalAtomic grr) (CanonicalAtomic gRR))]

;; #source file ./ott/lang_simple.ott  lines 2498 - 2500 
 [----------------------------------------------------- "GEtaExpandDyn"
  (GEtaExpand grr (CanonicalAtomic grr) CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 2502 - 2506 
 [(GEtaExpand  (AtomicSpine  y  SpineEmpty)  gu gU_11)
  (GEtaExpand (AtomicSpine x (SpineCons ge gu)) gu_22 gU_22)
  -------------------------------------------------------------------------------------- "GEtaExpandPi"
  (GEtaExpand (AtomicSpine x ge)  (CanonicalLam y gu_22)  (CanonicalPi y gU_11 gU_22))]

)
(define-judgment-form L 
 
  #:mode (GEtaExpandC I O I)
  #:contract (GEtaExpandC gu gu_^ gU)

;; #source file ./ott/lang_simple.ott  lines 2513 - 2516 
 [(GEtaExpand grr gu gU)
  ------------------------------------------- "GEtaExpandCAtomic"
  (GEtaExpandC (CanonicalAtomic grr) gu gU)]

;; #source file ./ott/lang_simple.ott  lines 2517 - 2520 

;; #source file ./ott/lang_simple.ott  lines 2521 - 2525 
 [ (where   z  ,(gensym)) 
  (GEtaExpandC  (substitute  gu   x   z )  gu_^  (substitute  gU_22   x   z ) )
  ----------------------------------------------------------------------------------------- "GEtaExpandCLamRdxAlpha"
  (GEtaExpandC  (CanonicalLam x gu)   (CanonicalLam z gu_^)  (CanonicalPi y gU_11 gU_22))]

;; #source file ./ott/lang_simple.ott  lines 2526 - 2530 
 [(GEtaExpandC gU_11 gU_11^ gU_^^)
  (GEtaExpandC gU_22 gU_22^ gU_^^)
  ------------------------------------------------------------------------------- "GEtaExpandCPi"
  (GEtaExpandC (CanonicalPi x gU_11 gU_22) (CanonicalPi x gU_11^ gU_22^) gU_^^)]

;; #source file ./ott/lang_simple.ott  lines 2532 - 2534 
 [-------------------------------------------- "GEtaExpandCDyn"
  (GEtaExpandC CanonicalDyn CanonicalDyn gU)]

;; #source file ./ott/lang_simple.ott  lines 2535 - 2537 
 [---------------------------------- "GEtaExpandCDynType"
  (GEtaExpandC gu gu CanonicalDyn)]

)
(define-judgment-form L 
 
  #:mode (GNSynth I I O O)
  #:contract (GNSynth Gamma tt gu gU)

;; #source file ./ott/lang_simple.ott  lines 2558 - 2562 
 [
  
  (GradualSetNorm Gamma gU gT)
  (GNCheck Gamma gu gt gU)
  ----------------------------------------- "GNSynthAnn"
  (GNSynth Gamma  (TermAnn gt gT)  gu gU)]

;; #source file ./ott/lang_simple.ott  lines 2563 - 2566 
 [
   (side-condition ,(> (term  i ) 0)) 
  --------------------------------------------------------------------------------------------------------- "GNSynthSet"
  (GNSynth Gamma (TermSet i) (CanonicalAtomic (AtomicSet i)) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 2568 - 2574 
 [
   (side-condition ,(not (hash-has-key? currently-defined-vars (term  x )) )) 
    
  (GVarLook x gU Gamma)
  (GEtaExpand  (AtomicSpine  x  SpineEmpty)  gu gU)
  ----------------------------------- "GNSynthVar"
  (GNSynth Gamma x gu gU)]

;; #source file ./ott/lang_simple.ott  lines 2575 - 2578 
 [
  
   (where (ENTTriple  et   gu   gU ) ,(and (hash-has-key? currently-defined-vars (term  x ) ) (hash-ref currently-defined-vars (term  x )) )) 
  ----------------------------------- "GNSynthVarLook"
  (GNSynth Gamma x gu gU)]

;; #source file ./ott/lang_simple.ott  lines 2583 - 2590 
 [
      (where   x  ,(gensym))    (GNSynth Gamma tt_11 gu_11 gU)    (GEtaExpandC gu_11 gu_11^ (CanonicalPi x CanonicalDyn CanonicalDyn))  
    
   (Domain gU gU_11)   (GNCheck Gamma gu_22 tt_22 gU_11) 
  (BodySub gU_11 gu_22 gu_11^ gu_33)
   (CodSub gu_22 gU gU_22)   (GEtaExpandC gu_33 gu_33^ gU_22) 
  ---------------------------------------------------- "GNSynthApp"
  (GNSynth Gamma (TermApp tt_11 tt_22) gu_33^ gU_22)]

;; #source file ./ott/lang_simple.ott  lines 2592 - 2595 
 [
  --------------------------------------------------- "GNSynthDyn"
  (GNSynth Gamma TermDyn CanonicalDyn CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 2596 - 2599 
 [
  
  (GNCheck Gamma gu et gU)
  --------------------------------------------------- "GNSynthEv"
  (GNSynth Gamma (TermEp (EvidenceEv gU) et) gu gU)]

;; #source file ./ott/lang_simple.ott  lines 2600 - 2602 
 [
  --------------------------------------------------------------------------------------- "GNSynthNat"
  (GNSynth Gamma TermNat (CanonicalAtomic AtomicNat) (CanonicalAtomic (AtomicSet  1 )))]

;; #source file ./ott/lang_simple.ott  lines 2603 - 2605 
 [
  ----------------------------------------------------------------------------------- "GNSynthZero"
  (GNSynth Gamma TermZero (CanonicalAtomic AtomicZero) (CanonicalAtomic AtomicNat))]

;; #source file ./ott/lang_simple.ott  lines 2606 - 2609 
 [
  (GNCheck Gamma gu tt (CanonicalAtomic AtomicNat))
  --------------------------------------------------------------------------------------------- "GNSynthSucc"
  (GNSynth Gamma (TermSucc tt) (CanonicalAtomic (AtomicSucc gu)) (CanonicalAtomic AtomicNat))]

;; #source file ./ott/lang_simple.ott  lines 2610 - 2623 
 [
   (where   y  ,(gensym)) 
  (GNCheck Gamma gu_11 tt_11 (CanonicalAtomic AtomicNat))
  (GNCheck Gamma gU TT (CanonicalPi y (CanonicalAtomic AtomicNat) (CanonicalAtomic (AtomicSet  1 ))))
  (BodySub (CanonicalAtomic AtomicNat) (CanonicalAtomic AtomicZero) gU gU_22)
  (GNCheck Gamma gu_22 tt_22 gU_22)
  (BodySub (CanonicalAtomic AtomicNat) (CanonicalAtomic  (AtomicSpine  x_11  SpineEmpty) ) gU gU_33^)
  (BodySub (CanonicalAtomic AtomicNat) (CanonicalAtomic (AtomicSucc (CanonicalAtomic  (AtomicSpine  x_11  SpineEmpty) ))) gU gU_33)
  (GNCheck (EnvExt x_22 gU_33^ (EnvExt x_11 (CanonicalAtomic AtomicNat) Gamma)) gu_33 tt_33 gU_33)
  (BodySub (CanonicalAtomic AtomicNat) gu_11 gU gU_44)
   (where   z  ,(gensym)) 
  (GHsub z (CanonicalAtomic AtomicNat) gu_11 (CanonicalAtomic (AtomicSpine z (SpineNatElim SpineEmpty gU gu_22 x_11 x_22 gu_33))) gu_44)
  -------------------------------------------------------------------------- "GNSynthNatElim"
  (GNSynth Gamma (TermNatElim tt_11 TT tt_22 x_11 x_22 tt_33) gu_44 gU_44)]

)
(define-judgment-form L 
 
  #:mode (GNSynthCheck I O I I I I)
  #:contract (GNSynthCheck Gamma gu ttSynth gu_^ gU_^ gU)

;; #source file ./ott/lang_simple.ott  lines 2630 - 2633 
 [
   (side-condition ,(and (< 0 (term  i )) (<= (term  i ) (term  j )))) 
  ---------------------------------------------------------------------------------------------------- "GNSynthCheckLevel"
  (GNSynthCheck Gamma gU TTSynth gU (CanonicalAtomic (AtomicSet i)) (CanonicalAtomic (AtomicSet j)))]

;; #source file ./ott/lang_simple.ott  lines 2634 - 2639 
 [
  
   (side-condition ,(not (judgment-holds (BothSets  gU   gU_^ )) )) 
  (Meet gU gU_^ gU_^^)
   (where  gu  ,(if (alpha-equivalent? (term  gU_^ ) (term  gU_^^ )) (term  gu ) (term  CanonicalDyn ))) 
  -------------------------------------------- "GNSynthCheckConsistent"
  (GNSynthCheck Gamma gu ttSynth gu gU_^ gU)]

)
(define-judgment-form L 
 
  #:mode (GNCheck I O I I)
  #:contract (GNCheck Gamma gu tt gU)

;; #source file ./ott/lang_simple.ott  lines 2647 - 2651 
 [
  
  (GNSynth Gamma ttSynth gu_^ gU_^)
  (GNSynthCheck Gamma gu ttSynth gu_^ gU_^ gU)
  ------------------------------- "GNCheckSynthRdx"
  (GNCheck Gamma gu ttSynth gU)]

;; #source file ./ott/lang_simple.ott  lines 2652 - 2658 

;; #source file ./ott/lang_simple.ott  lines 2660 - 2666 

;; #source file ./ott/lang_simple.ott  lines 2667 - 2672 

;; #source file ./ott/lang_simple.ott  lines 2674 - 2682 
 [
  (ConsistentSet gU_33)
  (GNCheck Gamma gU_11 TT_11 gU_33)
    
  (GNCheck (EnvExt x gU_11 Gamma) gU_22 TT_22 gU_33)
  -------------------------------------------------------------------------- "GNCheckPi"
  (GNCheck Gamma (CanonicalPi x gU_11 gU_22) (TermPi x TT_11 TT_22) gU_33)]

;; #source file ./ott/lang_simple.ott  lines 2683 - 2687 

;; #source file ./ott/lang_simple.ott  lines 2688 - 2693 
 [
   (where   z  ,(gensym)) 
    
  (GNCheck (EnvExt z gU_11 Gamma) gu  (substitute  tt   x   z )   (substitute  gU_22   y   z ) )
  ------------------------------------------------------------------------------------ "GNCheckLamPiRdxAlpha"
  (GNCheck Gamma  (CanonicalLam z gu)   (TermLam x tt)  (CanonicalPi y gU_11 gU_22))]

;; #source file ./ott/lang_simple.ott  lines 2694 - 2698 
 [
    
  (GNCheck (EnvExt x CanonicalDyn Gamma) gu tt CanonicalDyn)
  --------------------------------------------------------------------- "GNCheckLamDyn"
  (GNCheck Gamma  (CanonicalLam x gu)   (TermLam x tt)  CanonicalDyn)]

)
(define-judgment-form L 
 
  #:mode (GElabSynth I I O O)
  #:contract (GElabSynth Gamma gtSynth et gU)

;; #source file ./ott/lang_simple.ott  lines 2721 - 2725 
 [
  
  (GradualSetNorm Gamma gU gT)
  (GElabCheck Gamma et gt gU)
  -------------------------------------------- "GElabSynthAnn"
  (GElabSynth Gamma  (TermAnn gt gT)  et gU)]

;; #source file ./ott/lang_simple.ott  lines 2726 - 2729 
 [
   (side-condition ,(> (term  i ) 0)) 
  ---------------------------------------------------------------------------------------- "GElabSynthSet"
  (GElabSynth Gamma (TermSet i) (TermSet i) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 2731 - 2736 
 [
   (side-condition ,(not (hash-has-key? currently-defined-vars (term  x )) )) 
    
  (GVarLook x gU Gamma)
  ----------------------------------------------- "GElabSynthVar"
  (GElabSynth Gamma x x gU)]

;; #source file ./ott/lang_simple.ott  lines 2737 - 2740 
 [
  
   (where (ENTTriple  et   gu   gU ) ,(and (hash-has-key? currently-defined-vars (term  x ) ) (hash-ref currently-defined-vars (term  x )) )) 
  ----------------------------------------------- "GElabSynthVarLook"
  (GElabSynth Gamma x x gU)]

;; #source file ./ott/lang_simple.ott  lines 2744 - 2750 
 [
  
  (GElabSynth Gamma gtSynth_11 et_11 gU)
  (Domain gU gU_11)
  (GradualNECheck Gamma gu et_22 gt_22 gU_11)
  (CodSub gu gU gU_22)
  ----------------------------------------------------------------------------------------------------------------------------------------------------------- "GElabSynthApp"
  (GElabSynth Gamma (TermApp gtSynth_11 gt_22) (TermApp  (TermEp (EvidenceEv  (CanonicalPi ,(gensym)  CanonicalDyn   CanonicalDyn ) ) et_11)  et_22) gU_22)]

;; #source file ./ott/lang_simple.ott  lines 2751 - 2754 
 [
  ------------------------------------------------------------------------------------ "GElabSynthDyn"
  (GElabSynth Gamma TermDyn (TermEp (EvidenceEv CanonicalDyn) TermDyn) CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 2755 - 2757 
 [
  ---------------------------------------------------------------------- "GElabSynthNat"
  (GElabSynth Gamma TermNat TermNat (CanonicalAtomic (AtomicSet  1 )))]

;; #source file ./ott/lang_simple.ott  lines 2758 - 2760 
 [
  ------------------------------------------------------------------ "GElabSynthZero"
  (GElabSynth Gamma TermZero TermZero (CanonicalAtomic AtomicNat))]

;; #source file ./ott/lang_simple.ott  lines 2761 - 2764 
 [
  
  (GElabCheck Gamma et gt (CanonicalAtomic AtomicNat))
  ---------------------------------------------------------------------------- "GElabSynthSucc"
  (GElabSynth Gamma (TermSucc gt) (TermSucc et) (CanonicalAtomic AtomicNat))]

;; #source file ./ott/lang_simple.ott  lines 2765 - 2776 
 [
  
   (where   y  ,(gensym)) 
  (GradualNECheck Gamma gu_11 et_11 gt_11 (CanonicalAtomic AtomicNat))
  (GradualNECheck Gamma gU eT gT (CanonicalPi y (CanonicalAtomic AtomicNat) (CanonicalAtomic (AtomicSet  1 ))))
  (BodySub (CanonicalAtomic AtomicNat) (CanonicalAtomic AtomicZero) gU gU_22)
  (GElabCheck Gamma et_22 gt_22 gU_22)
  (BodySub (CanonicalAtomic AtomicNat) (CanonicalAtomic  (AtomicSpine  x_11  SpineEmpty) ) gU gU_33^)
  (BodySub (CanonicalAtomic AtomicNat) (CanonicalAtomic (AtomicSucc (CanonicalAtomic  (AtomicSpine  x_11  SpineEmpty) ))) gU gU_33)
  (GElabCheck (EnvExt x_22 gU_33^ (EnvExt x_11 (CanonicalAtomic AtomicNat) Gamma)) et_33 gt_33 gU_33)
  (BodySub (CanonicalAtomic AtomicNat) gu_11 gU gU_44)
  -------------------------------------------------------------------------------------------------------------------- "GElabSynthNatElim"
  (GElabSynth Gamma (TermNatElim gt_11 gT gt_22 x_11 x_22 gt_33) (TermNatElim et_11 eT et_22 x_11 x_22 et_33) gU_44)]

)
(define-judgment-form L 
 
  #:mode (GElabSynthCheck I O I I I I)
  #:contract (GElabSynthCheck Gamma et_^ gtSynth et gU_^ gU)

;; #source file ./ott/lang_simple.ott  lines 2783 - 2786 
 [
   (side-condition ,(and (< 0 (term  i )) (<= (term  i ) (term  j )))) 
  ------------------------------------------------------------------------------------------------------- "GElabSynthCheckLevel"
  (GElabSynthCheck Gamma eT gTSynth eT (CanonicalAtomic (AtomicSet i)) (CanonicalAtomic (AtomicSet j)))]

;; #source file ./ott/lang_simple.ott  lines 2790 - 2795 
 [
  
   (side-condition ,(not (judgment-holds (BothSets  gU_^^   gU )) )) 
  (Meet gU_^^ gU gU_^)
  --------------------------------------------------------------------------- "GElabSynthCheckConsistent"
  (GElabSynthCheck Gamma (TermEp (EvidenceEv gU_^) et) gtSynth et gU gU_^^)]

)
(define-judgment-form L 
 
  #:mode (GElabCheck I O I I)
  #:contract (GElabCheck Gamma et gt gU)

;; #source file ./ott/lang_simple.ott  lines 2809 - 2814 
 [
  
  (GElabSynth Gamma gtSynth et_^ gU_^)
  (GElabSynthCheck Gamma et gtSynth et_^ gU_^ gU)
  ---------------------------------- "GElabCheckSynthRdx"
  (GElabCheck Gamma et gtSynth gU)]

;; #source file ./ott/lang_simple.ott  lines 2815 - 2821 

;; #source file ./ott/lang_simple.ott  lines 2822 - 2827 

;; #source file ./ott/lang_simple.ott  lines 2837 - 2845 
 [
  (ConsistentSet gU)
  (GradualNECheck Gamma gU_11 eT_11 gT_11 gU)
    
  (GElabCheck (EnvExt x gU_11 Gamma) eT_22 gT_22 gU)
  --------------------------------------------------------------------- "GElabCheckPi"
  (GElabCheck Gamma (TermPi x eT_11 eT_22) (TermPi x gT_11 gT_22) gU)]

;; #source file ./ott/lang_simple.ott  lines 2846 - 2850 

;; #source file ./ott/lang_simple.ott  lines 2851 - 2857 
 [
  
   (where   z  ,(gensym)) 
    
  (GElabCheck (EnvExt z gU_11 Gamma) et  (substitute  gt   x   z )   (substitute  gU_22   y   z ) )
  ------------------------------------------------------------------------------------------------------------------------------------------------------------- "GElabCheckLamPiRdxAlpha"
  (GElabCheck Gamma (TermEp (EvidenceEv (CanonicalPi z gU_11  (substitute  gU_22   y   z ) ))  (TermLam z et) )  (TermLam x gt)  (CanonicalPi y gU_11 gU_22))]

;; #source file ./ott/lang_simple.ott  lines 2858 - 2862 
 [
  
    
  (GElabCheck (EnvExt x CanonicalDyn Gamma) et gt CanonicalDyn)
  ------------------------------------------------------------------------------------------------------ "GElabCheckLamDyn"
  (GElabCheck Gamma (TermEp (EvidenceEv CanonicalDyn)  (TermLam x et) )  (TermLam x gt)  CanonicalDyn)]

)
(define-judgment-form L 
 
  #:mode (GradualNESynth I I O O O)
  #:contract (GradualNESynth Gamma gtSynth et gu gU)

;; #source file ./ott/lang_simple.ott  lines 2878 - 2882 
 [
  
  (GradualSetNorm Gamma gU gT)
  (GradualNECheck Gamma gu et gt gU)
  --------------------------------------------------- "GradualNESynthAnn"
  (GradualNESynth Gamma  (TermAnn gt gT)  et gu gU)]

;; #source file ./ott/lang_simple.ott  lines 2883 - 2886 
 [
   (side-condition ,(> (term  i ) 0)) 
  ---------------------------------------------------------------------------------------------------------------------------- "GradualNESynthSet"
  (GradualNESynth Gamma (TermSet i) (TermSet i) (CanonicalAtomic (AtomicSet i)) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 2888 - 2894 
 [
   (side-condition ,(not (hash-has-key? currently-defined-vars (term  x )) )) 
    
  (GVarLook x gU Gamma)
  (GEtaExpand  (AtomicSpine  x  SpineEmpty)  gu gU)
  ------------------------------------------------------ "GradualNESynthVar"
  (GradualNESynth Gamma x x gu gU)]

;; #source file ./ott/lang_simple.ott  lines 2895 - 2898 
 [
  
   (where (ENTTriple  et   gu   gU ) ,(and (hash-has-key? currently-defined-vars (term  x ) ) (hash-ref currently-defined-vars (term  x )) )) 
  ------------------------------------------------------ "GradualNESynthVarLook"
  (GradualNESynth Gamma x x gu gU)]

;; #source file ./ott/lang_simple.ott  lines 2902 - 2912 
 [
  
  (GradualNESynth Gamma gtSynth_11 et_11 gu gU)
     (where   x  ,(gensym))    (GEtaExpandC gu gu_^ (CanonicalPi x CanonicalDyn CanonicalDyn))  
    
  (Domain gU gU_11)
  (GradualNECheck Gamma gu_22 et_22 gt_22 gU_11)
  (BodySub gU_11 gu_22 gu_^ gu_^^)
  (CodSub gu_22 gU gU_22)
  (GEtaExpandC gu_^^ gu_^^^ gU_22)
  ---------------------------------------------------------------------------------------------------------------------------------------------------------------------- "GradualNESynthApp"
  (GradualNESynth Gamma (TermApp gtSynth_11 gt_22) (TermApp  (TermEp (EvidenceEv  (CanonicalPi ,(gensym)  CanonicalDyn   CanonicalDyn ) ) et_11)  et_22) gu_^^^ gU_22)]

;; #source file ./ott/lang_simple.ott  lines 2914 - 2916 
 [
  ------------------------------------------------------------------------------------------------------ "GradualNESynthNat"
  (GradualNESynth Gamma TermNat TermNat (CanonicalAtomic AtomicNat) (CanonicalAtomic (AtomicSet  1 )))]

;; #source file ./ott/lang_simple.ott  lines 2917 - 2919 
 [
  --------------------------------------------------------------------------------------------------- "GradualNESynthZero"
  (GradualNESynth Gamma TermZero TermZero (CanonicalAtomic AtomicZero) (CanonicalAtomic AtomicNat))]

;; #source file ./ott/lang_simple.ott  lines 2920 - 2923 
 [
  
  (GradualNECheck Gamma gu et gt (CanonicalAtomic AtomicNat))
  ------------------------------------------------------------------------------------------------------------------ "GradualNESynthSucc"
  (GradualNESynth Gamma (TermSucc gt) (TermSucc et) (CanonicalAtomic (AtomicSucc gu)) (CanonicalAtomic AtomicNat))]

;; #source file ./ott/lang_simple.ott  lines 2924 - 2937 
 [
  
   (where   y  ,(gensym)) 
  (GradualNECheck Gamma gu_11 et_11 gt_11 (CanonicalAtomic AtomicNat))
  (GradualNECheck Gamma gU eT gT (CanonicalPi y (CanonicalAtomic AtomicNat) (CanonicalAtomic (AtomicSet  1 ))))
  (BodySub (CanonicalAtomic AtomicNat) (CanonicalAtomic AtomicZero) gU gU_22)
  (GradualNECheck Gamma gu_22 et_22 gt_22 gU_22)
  (BodySub (CanonicalAtomic AtomicNat) (CanonicalAtomic  (AtomicSpine  x_11  SpineEmpty) ) gU gU_33^)
  (BodySub (CanonicalAtomic AtomicNat) (CanonicalAtomic (AtomicSucc (CanonicalAtomic  (AtomicSpine  x_11  SpineEmpty) ))) gU gU_33)
  (GradualNECheck (EnvExt x_22 gU_33^ (EnvExt x_11 (CanonicalAtomic AtomicNat) Gamma)) gu_33 et_33 gt_33 gU_33)
  (BodySub (CanonicalAtomic AtomicNat) gu_11 gU gU_44)
   (where   z  ,(gensym)) 
  (GHsub z (CanonicalAtomic AtomicNat) gu_11 (CanonicalAtomic (AtomicSpine z (SpineNatElim SpineEmpty gU gu_22 x_11 x_22 gu_33))) gu_44)
  ------------------------------------------------------------------------------------------------------------------------------ "GradualNESynthNatElim"
  (GradualNESynth Gamma (TermNatElim gt_11 gT gt_22 x_11 x_22 gt_33) (TermNatElim et_11 eT et_22 x_11 x_22 et_33) gu_44 gU_44)]

)
(define-judgment-form L 
 
  #:mode (BothSets I I)
  #:contract (BothSets gU gU_^)

;; #source file ./ott/lang_simple.ott  lines 2948 - 2950 
 [---------------------------------------------------------------------------- "BothSetsRule"
  (BothSets (CanonicalAtomic (AtomicSet i)) (CanonicalAtomic (AtomicSet j)))]

)
(define-judgment-form L 
 
  #:mode (GradualNESynthCheck I O O I I I I I)
  #:contract (GradualNESynthCheck Gamma gu et_11 gtSynth gu_^ et gU_^ gU)

;; #source file ./ott/lang_simple.ott  lines 2956 - 2959 
 [
   (side-condition ,(and (< 0 (term  i )) (<= (term  i ) (term  j )))) 
  ----------------------------------------------------------------------------------------------------------------- "GradualNESynthCheckLevel"
  (GradualNESynthCheck Gamma gU eT gTSynth gU eT (CanonicalAtomic (AtomicSet i)) (CanonicalAtomic (AtomicSet j)))]

;; #source file ./ott/lang_simple.ott  lines 2964 - 2969 
 [
  
   (side-condition ,(not (judgment-holds (BothSets  gU   gU_^ )) )) 
  (Meet gU gU_^ gU_^^)
   (where  gu_^^  ,(if (alpha-equivalent? (term  gU_^ ) (term  gU_^^ )) (term  gu_^ ) (term  CanonicalDyn ))) 
  ---------------------------------------------------------------------------------------------- "GradualNESynthCheckConsistent"
  (GradualNESynthCheck Gamma gu_^^ (TermEp (EvidenceEv gU_^^) et_^) gtSynth gu_^ et_^ gU_^ gU)]

)
(define-judgment-form L 
 
  #:mode (GradualNECheck I O O I I)
  #:contract (GradualNECheck Gamma gu et gt gU)

;; #source file ./ott/lang_simple.ott  lines 2986 - 2990 
 [
  
  (GradualNESynth Gamma gtSynth et_^ gu_^ gU_^)
  (GradualNESynthCheck Gamma gu_^^ et_^^ gtSynth gu_^ et_^ gU_^ gU)
  ----------------------------------------------- "GradualNECheckSynthRdx"
  (GradualNECheck Gamma gu_^^ et_^^ gtSynth gU)]

;; #source file ./ott/lang_simple.ott  lines 2992 - 2999 

;; #source file ./ott/lang_simple.ott  lines 3000 - 3005 

;; #source file ./ott/lang_simple.ott  lines 3015 - 3023 
 [
  (ConsistentSet gU_^^)
  (GradualNECheck Gamma gU_11 eT_11 gT_11 gU_^^)
    
  (GradualNECheck (EnvExt x gU_11 Gamma) gU_22 eT_22 gT_22 gU_^^)
  -------------------------------------------------------------------------------------------------------- "GradualNECheckPi"
  (GradualNECheck Gamma (CanonicalPi x gU_11 gU_22) (TermPi x eT_11 eT_22) (TermPi x gT_11 gT_22) gU_^^)]

;; #source file ./ott/lang_simple.ott  lines 3024 - 3028 

;; #source file ./ott/lang_simple.ott  lines 3029 - 3034 
 [
  
   (where   z  ,(gensym)) 
    
  (GradualNECheck (EnvExt z gU_11 Gamma) gu et  (substitute  gt   x   z )   (substitute  gU_22   y   z ) )
  ------------------------------------------------------------------------------------------------------------ "GradualNECheckLamPiRdxAlpha"
  (GradualNECheck Gamma  (CanonicalLam z gu)   (TermLam z et)   (TermLam x gt)  (CanonicalPi y gU_11 gU_22))]

;; #source file ./ott/lang_simple.ott  lines 3035 - 3039 
 [
  
    
  (GradualNECheck (EnvExt x CanonicalDyn Gamma) gu et gt CanonicalDyn)
  --------------------------------------------------------------------------------------------- "GradualNECheckLamDyn"
  (GradualNECheck Gamma  (CanonicalLam x gu)   (TermLam x et)   (TermLam x gt)  CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 3040 - 3043 
 [
  (GradualSet Gamma gU)
  --------------------------------------------------------------------------------- "GradualNECheckDyn"
  (GradualNECheck Gamma CanonicalDyn (TermEp (EvidenceEv gU) TermDyn) TermDyn gU)]
)
;; #source file ./ott/lang_simple.ott  lines 3051 - 3051 
 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; The dynamic semantics for programs
;; We merge layered evidence, and compose evidence when applying functions
;; The meet and dom functiosn throw exceptions (i.e. runtime type errors)
;; any time the meet or domains do not exist
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;; definitions 

(define-judgment-form
  L
  #:mode (Step I O)
  #:contract (Step et_11 et_22)

;; #source file ./ott/lang_simple.ott  lines 3171 - 3174 
 [
  (EvMeet ep_11 ep_22 ep_33)
  ------------------------------------------------------------- "StepAscr"
  (Step (TermEp ep_11  (TermEp ep_22 rv) ) (TermEp ep_33 rv))]

;; #source file ./ott/lang_simple.ott  lines 3177 - 3181 

;; #source file ./ott/lang_simple.ott  lines 3193 - 3198 
 [
  
  (Meet gU_33 gU_11 gU_11^)
  (GNCheck EnvEmpty gu rv gU_11^)
  (GHsub y gU_11^ gu gU_22 gU_22^)
  --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- "StepAppEv"
  (Step (TermApp  (TermEp (EvidenceEv (CanonicalPi y gU_11 gU_22))  (TermLam x et) )   (TermEp (EvidenceEv gU_33) rv) ) (TermEp (EvidenceEv gU_22^)   (esubst  et   x   (TermEp (EvidenceEv gU_11^) rv)   gu   gU_11^ )  ))]

;; #source file ./ott/lang_simple.ott  lines 3201 - 3206 
 [
  
  (GNCheck EnvEmpty gu rv gU_11)
  (GHsub y gU_11 gu gU_22 gU_22^)
  --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- "StepAppEvRaw"
  (Step (TermApp  (TermEp (EvidenceEv (CanonicalPi y gU_11 gU_22))  (TermLam x et) )  rv) (TermEp (EvidenceEv gU_22^)   (esubst  et   x    (TermEp (EvidenceEv gU_11) rv)    gu   gU_11 )  ))]

;; #source file ./ott/lang_simple.ott  lines 3210 - 3214 
 [
  (GNCheck EnvEmpty gu ev gU_11)
  (GHsub x gU_11 gu gU_22 gU_22^)
  ---------------------------------------------------------------------------------------------------------------------- "StepAppDyn"
  (Step (TermApp  (TermEp (EvidenceEv (CanonicalPi x gU_11 gU_22)) TermDyn)  ev) (TermEp (EvidenceEv gU_22^) TermDyn))]

;; #source file ./ott/lang_simple.ott  lines 3216 - 3219 

;; #source file ./ott/lang_simple.ott  lines 3221 - 3224 
 [
  
  (Step  (TermNatElim rv eV ev_22 x_11 x_22 et_33)  et_44)
  ------------------------------------------------------------------------ "StepNatEv"
  (Step  (TermNatElim  (TermEp ep rv)  eV ev_22 x_11 x_22 et_33)  et_44)]

;; #source file ./ott/lang_simple.ott  lines 3225 - 3227 
 [
  
  ---------------------------------------------------------------- "StepNatElimZero"
  (Step  (TermNatElim TermZero eV ev_22 x_11 x_22 et_33)  ev_22)]

;; #source file ./ott/lang_simple.ott  lines 3228 - 3233 
 [
  
   (where   z  ,(gensym)) 
  (GNCheck EnvEmpty gU_11 eV (CanonicalPi z (CanonicalAtomic AtomicNat) (CanonicalAtomic (AtomicSet  1 ))))
  (BodySub (CanonicalAtomic AtomicNat) CanonicalDyn gU_11 gU)
  -------------------------------------------------------------------------------------------------------- "StepNatElimDyn"
  (Step  (TermNatElim  (TermEp ep TermDyn)  eV ev_22 x_11 x_22 et_33)  (TermEp (EvidenceEv gU) TermDyn))]

;; #source file ./ott/lang_simple.ott  lines 3234 - 3241 
 [
  
   (where   z  ,(gensym)) 
  (GNCheck EnvEmpty gu_11 ev_11 (CanonicalAtomic AtomicNat))
  (GNCheck EnvEmpty gU_11 eV (CanonicalPi z (CanonicalAtomic AtomicNat) (CanonicalAtomic (AtomicSet  1 ))))
  (BodySub (CanonicalAtomic AtomicNat) gu_11 gU_11 gU)
  (GNCheck EnvEmpty gu  (TermNatElim ev_11 eV ev_22 x_11 x_22 et_33)  gU)
  ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- "StepNatElimSucc"
  (Step  (TermNatElim  (TermSucc ev_11)  eV ev_22 x_11 x_22 et_33)   (esubst    (esubst  et_33   x_11   ev_11   gu_11   (CanonicalAtomic AtomicNat) )     x_22    (TermNatElim ev_11 eV ev_22 x_11 x_22 et_33)    gu   gU ) )]

;; #source file ./ott/lang_simple.ott  lines 3265 - 3269 

;; #source file ./ott/lang_simple.ott  lines 3270 - 3273 
)
;; #source file ./ott/lang_simple.ott  lines 3349 - 3372 

;;;;;;;;;;;;;;;;;;;;;
;; A judgment form to get both the elaborated evidence term
;; and normal form for a term
;; and wrap them up with their type in a tuple
;;;;;;;;;;;;;;;;;;;;;

(define-judgment-form
  L
  #:mode (ElabNormType I I O)
  [ 
  (GradualNESynth Gamma gt et gu gU)
  (where et_subbed ,(perform-elab-substs (term et)))
  ---------------------------------
  (ElabNormType Gamma gt (ENTTriple et_subbed gu gU))]

)

