;; #source  
;;; generated by Ott 0.28 from: ./ott/lang_simple.ott

#lang racket
(require redex/reduction-semantics)

;; #source file ./ott/lang_simple.ott  lines 4 - 6 
;; #source file ./ott/lang_simple.ott  lines 8 - 33 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Redex model for GDTL
;; Accompanying "Approximate Normalization for Gradual Dependnently Typed Languages"
;; (mostly) auto-generated from an Ott definition
;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(provide (all-defined-out))

(define currently-defined-vars 
  (make-hasheq))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Syntax Definition
;; gt gT : gradual terms, the source language
;; gu gU : gradual canonical forms
;; et eT : evidence terms, used to define dynamic semantics, are result of elaboration
;; ep : the evidence ascribed to terms. Is a wrapper around a canonical type
;; ev eV : evidence values: well-formed evidence terms that cannot be reduced
;; rv rV : raw values: evidence values forbidding ascription with evidence at the top level
;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; #source file ./ott/lang_simple.ott  lines 35 - 111 
;; #source file ./ott/lang_simple.ott  lines 116 - 118 
;; #source file ./ott/lang_simple.ott  lines 121 - 121 
;; #source file ./ott/lang_simple.ott  lines 127 - 135 and file ./ott/lang_simple.ott  lines 140 - 159 and file ./ott/lang_simple.ott  lines 164 - 200 and file ./ott/lang_simple.ott  lines 206 - 215 and file ./ott/lang_simple.ott  lines 224 - 229 and file ./ott/lang_simple.ott  lines 232 - 237 and file ./ott/lang_simple.ott  lines 239 - 241 and file ./ott/lang_simple.ott  lines 244 - 261 and file ./ott/lang_simple.ott  lines 265 - 267 and file ./ott/lang_simple.ott  lines 269 - 300 and file ./ott/lang_simple.ott  lines 304 - 318 and file ./ott/lang_simple.ott  lines 323 - 337 and file ./ott/lang_simple.ott  lines 340 - 341 and file ./ott/lang_simple.ott  lines 343 - 346 and file ./ott/lang_simple.ott  lines 348 - 354 and file ./ott/lang_simple.ott  lines 362 - 364 and file ./ott/lang_simple.ott  lines 373 - 395 and file ./ott/lang_simple.ott  lines 399 - 411 and file ./ott/lang_simple.ott  lines 414 - 419 and file ./ott/lang_simple.ott  lines 421 - 435 and file ./ott/lang_simple.ott  lines 438 - 440 and file ./ott/lang_simple.ott  lines 451 - 456 and file ./ott/lang_simple.ott  lines 458 - 464 and file ./ott/lang_simple.ott  lines 510 - 513 and file ./ott/lang_simple.ott  lines 515 - 519 and file ./ott/lang_simple.ott  lines 521 - 525 and file ./ott/lang_simple.ott  lines 652 - 657 and file ./ott/lang_simple.ott  lines 660 - 662 and file ./ott/lang_simple.ott  lines 664 - 666 and file ./ott/lang_simple.ott  lines 668 - 669 
(define-language L  

(level i j ::= natural)

;; #source file ./ott/lang_simple.ott  lines 304 - 318 
  (canonical gu gU ::= 
    (CanonicalLam var gu)
    (CanonicalAtomic grr)
    CanonicalDyn
    (CanonicalPi var gU_11 gU_22))
  ;grammar_pp, 2817: and 
;; #source file ./ott/lang_simple.ott  lines 323 - 337 
  (atomic grr gRR ::= 
    (AtomicSpine var ge)
    (AtomicSet i)
    AtomicNat
    AtomicZero
    (AtomicSucc gu)
    (AtomicVec gU gu)
    (AtomicNil gU)
    (AtomicCons gU gu_11 gu_22 gu_33)
    (AtomicEq gU gu_11 gu_22)
    (AtomicRefl gU gu))
  ;grammar_pp, 2817: and 
;; #source file ./ott/lang_simple.ott  lines 348 - 354 
  (spine ge ::= 
    SpineEmpty
    (SpineCons ge gu)
    (SpineNatElim ge i gU gu_11 var var gu_22)
    (SpineVecElim ge i gU_11 gu_22 gU_22 gu_33 var var var var gu_44)
    (SpineEqElim ge i gU_11 gU_22 var gu_22 gu_33 gu_44))

;; #source file ./ott/lang_simple.ott  lines 362 - 364 
  (epsilon ep ::= 
    (EvidenceEv gU))

;; #source file ./ott/lang_simple.ott  lines 164 - 200 
  (term tt ett TT ::= 
    (TermLam var tt)
    (TermApp tt_11 tt_22)
    var
    (TermSet i)
    (TermPi var TT_11 TT_22)
    (TermAnn tt TT)
    (TermEp ep tt)
    TermDyn
    TermError
    TermNat
    TermZero
    (TermSucc tt)
    (TermNatElim i tt_11 TT tt_22 var var tt_33)
    (TermVec TT tt)
    (TermNil TT)
    (TermCons TT tt_11 tt_22 tt_33)
    (TermVecElim i tt_11 TT_11 tt_22 TT_22 tt_33 var var var var tt_44)
    (TermEq TT tt_11 tt_22)
    (TermRefl TT tt)
    (TermEqElim i tt_11 TT_11 TT_22 var tt_22 tt_33 tt_44))

;; #source file ./ott/lang_simple.ott  lines 521 - 525 
  (Env ::= 
    EnvEmpty
    (EnvExt var gU Env)
    (Envconcat Env_11 Env_22))

(iinf ::= number)

;; #source file ./ott/lang_simple.ott  lines 438 - 440 
  (dummyev dummyeV ::= 
    (DummyEvidenceValueEv ep rv)
    (DummyEvidenceValueRaw rv))

;; #source file ./ott/lang_simple.ott  lines 668 - 669 
  (ent ::= 
    (ENTTriple et gu gU))

;; #source file ./ott/lang_simple.ott  lines 664 - 666 
  (iinfs jinfs ::= 
    (UniverseMultiSetSingleton iinf)
    (UniverseMultiSetSum iinfs jinfs))

;; #source file ./ott/lang_simple.ott  lines 660 - 662 
  (is js ::= 
    (LevelMultiSetSingleton i)
    (LevelMultiSetSum is js))

;; #source file ./ott/lang_simple.ott  lines 458 - 464 
  (evalContext EC ::= 
    (TermApp hole et)
    (TermApp ev hole)
    (TermPi x hole eT)
    (TermEp ep hole))

;; #source file ./ott/lang_simple.ott  lines 451 - 456 
  (simpleContext SC ::= 
    (TermApp hole t)
    (TermApp sv hole)
    (TermPi x hole T)
    (TermAnn hole T))

;; #source file ./ott/lang_simple.ott  lines 373 - 395 
  (et eT ::= 
    (TermLam var et)
    (TermApp et_11 et_22)
    var
    (TermPi var eT_11 eT_22)
    (TermSet i)
    TermDyn
    (TermEp ep et)
    TermNat
    TermZero
    (TermSucc et)
    (TermNatElim i et_11 eT et_22 var var et_33)
    (TermVec eT et)
    (TermNil eT)
    (TermCons eT et_11 et_22 et_33)
    (TermVecElim i et_11 eT_11 et_22 eT_22 et_33 var var var var et_44)
    (TermEq eT et_11 et_22)
    (TermRefl eT et)
    (TermEqElim i et_11 eT_11 eT_22 var et_22 et_33 et_44)
    TermError)

;; #source file ./ott/lang_simple.ott  lines 224 - 229 
  (u U ::= 
    (CanonicalLam var u)
    (CanonicalAtomic rr)
    (CanonicalPi var U_11 U_22))

;; #source file ./ott/lang_simple.ott  lines 265 - 267 
  (gtCheckOnly gTCheckOnly ::= 
    (TermLam var gt)
    (TermPi var gT_11 gT_22))

;; #source file ./ott/lang_simple.ott  lines 421 - 435 
  (ev eV ::= 
    (TermEp ep rv)
    (TermPi var eV eT)
    (TermLam var et)
    (TermSet i)
    TermDyn
    TermNat
    TermZero
    (TermSucc ev)
    (TermVec eV et)
    (TermNil eV)
    (TermCons eV et_11 et_22 et_33))

;; #source file ./ott/lang_simple.ott  lines 343 - 346 
  (grrNoSub ::= 
    (AtomicSet i)
    AtomicNat
    AtomicZero)

;; #source file ./ott/lang_simple.ott  lines 340 - 341 
  (guNoSub ::= 
    (CanonicalAtomic grrNoSub))

;; #source file ./ott/lang_simple.ott  lines 239 - 241 
  (e ::= 
    SpineEmpty
    (SpineCons e u))

;; #source file ./ott/lang_simple.ott  lines 140 - 159 
  (ttSynth ettSynth TTSynth ::= 
    (TermApp tt_11 tt_22)
    var
    (TermSet i)
    (TermAnn gt gT)
    TermDyn
    (TermEp ep et)
    TermNat
    TermZero
    (TermSucc tt)
    (TermNatElim i tt_11 TT tt_22 var var tt_33)
    (TermVec TT tt)
    (TermNil TT)
    (TermCons TT tt_11 tt_22 tt_33)
    (TermVecElim i tt_11 TT_11 tt_22 TT_22 tt_33 var var var var tt_44)
    (TermEq TT tt_11 tt_22)
    (TermRefl TT tt)
    (TermEqElim i tt_11 TT_11 TT_22 var tt_22 tt_33 tt_44))

;; #source file ./ott/lang_simple.ott  lines 399 - 411 
  (rv rV ::= 
    (TermLam var et)
    (TermPi var eV eT)
    (TermSet i)
    TermDyn
    TermNat
    TermZero
    (TermSucc ev)
    (TermVec eV et)
    (TermNil eV)
    (TermCons eV ev_11 ev_22 ev_33))

;; #source file ./ott/lang_simple.ott  lines 510 - 513 
  (SGamma ::= 
    EnvEmpty
    (EnvExt var U SGamma)
    (Envconcat SGamma_11 SGamma_22))

;; #source file ./ott/lang_simple.ott  lines 515 - 519 
  (Gamma ::= 
    EnvEmpty
    (EnvExt var gU Gamma)
    (Envconcat Gamma_11 Gamma_22))

;; #source file ./ott/lang_simple.ott  lines 206 - 215 
  (t T ::= 
    (TermLam var t)
    (TermApp t_11 t_22)
    var
    (TermPi var T_11 T_22)
    (TermSet i)
    (TermAnn t T))

;; #source file ./ott/lang_simple.ott  lines 244 - 261 
  (gtSynth gTSynth ::= 
    (TermApp gt_11 gt_22)
    var
    (TermSet i)
    (TermAnn gt gT)
    TermDyn
    TermNat
    TermZero
    (TermSucc gt)
    (TermNatElim i gt_11 gT gt_22 var var gt_33)
    (TermVec gT gt)
    (TermNil gT)
    (TermCons gT gt_11 gt_22 gt_33)
    (TermVecElim i gt_11 gT_11 gt_22 gT_22 gt_33 var var var var gt_44)
    (TermEq gT gt_11 gt_22)
    (TermRefl gT gt)
    (TermEqElim i gt_11 gT_11 gT_22 var gt_22 gt_33 gt_44))

;; #source file ./ott/lang_simple.ott  lines 269 - 300 
  (gt gT ::= 
    (TermLam var gt)
    (TermApp gt_11 gt_22)
    var
    (TermSet i)
    (TermPi var gT_11 gT_22)
    (TermAnn gt gT)
    TermDyn
    TermNat
    TermZero
    (TermSucc gt)
    (TermNatElim i gt_11 gT gt_22 var var gt_33)
    (TermVec gT gt)
    (TermNil gT)
    (TermCons gT gt_11 gt_22 gt_33)
    (TermVecElim i gt_11 gT_11 gt_22 gT_22 gt_33 var var var var gt_44)
    (TermEq gT gt_11 gt_22)
    (TermRefl gT gt)
    (TermEqElim i gt_11 gT_11 gT_22 var gt_22 gt_33 gt_44))

;; #source file ./ott/lang_simple.ott  lines 232 - 237 
  (rr RR ::= 
    (AtomicSpine var e)
    (AtomicSet i))

;; #source file ./ott/lang_simple.ott  lines 414 - 419 
  (simpleValue sv sV ::= 
    (TermLam var t)
    (TermPi var sV T)
    (TermSet i))
   (var x y z X Y Z ::= variable-not-otherwise-mentioned)

    #:binding-forms

    (TermSynthNatElim i tt_11 TT tt_22 x_11 x_22 tt_33 #:refers-to (shadow x_11))
    (TermSynthTT i tt_11 TT_11 tt_22 TT_22 tt_33 x_11 x_22 x_33 x_44 tt_44 #:refers-to (shadow x_11))
    (TermSynthEqElim i tt_11 TT_11 TT_22 x tt_22 #:refers-to (shadow x) tt_33 tt_44)
    (TermLam x tt #:refers-to (shadow x))
    (TermPi x TT_11 TT_22 #:refers-to (shadow x))
    (TermNatElim i tt_11 TT tt_22 x_11 x_22 tt_33 #:refers-to (shadow x_11))
    (TermVecElim i tt_11 TT_11 tt_22 TT_22 tt_33 x_11 x_22 x_33 x_44 tt_44 #:refers-to (shadow x_11))
    (TermEqElim i tt_11 TT_11 TT_22 x tt_22 #:refers-to (shadow x) tt_33 tt_44)
    (StaticTermLam x t #:refers-to (shadow x))
    (StaticTermPi x T_11 T_22)
    (SCanonicalLam x u #:refers-to (shadow x))

    (GradualTermSynthNatElim i gt_11 gT gt_22 x_11 x_22 gt_33 #:refers-to (shadow x_11))
    (GradualTermSynthVecElim i gt_11 gT_11 gt_22 gT_22 gt_33 x_11 x_22 x_33 x_44 gt_44 #:refers-to (shadow x_11))
    (GradualTermSynthEqElim i gt_11 gT_11 gT_22 x gt_22 #:refers-to (shadow x) gt_33 gt_44)
    (GradualTermCheckOnlyLam x gt #:refers-to (shadow x))
    (GradualTermCheckOnlyPi x gT_11 gT_22 #:refers-to (shadow x))
    (GradualTermLam x gt #:refers-to (shadow x))
    (GradualTermPi x gT_11 gT_22 #:refers-to (shadow x))
    (GradualTermNatElim i gt_11 gT gt_22 x_11 x_22 gt_33 #:refers-to (shadow x_11))
    (GradualTermgT i gt_11 gT_11 gt_22 gT_22 gt_33 x_11 x_22 x_33 x_44 gt_44 #:refers-to (shadow x_11))
    (GradualTermEqElim i gt_11 gT_11 gT_22 x gt_22 #:refers-to (shadow x) gt_33 gt_44)
    (CanonicalLam x gu #:refers-to (shadow x))
    (CanonicalPi x gU_11 gU_22 #:refers-to (shadow x))

    (SpineNatElim ge i gU gu_11 x_11 x_22 gu_22 #:refers-to (shadow x_11))
    (SpineVecElim ge i gU_11 gu_22 gU_22 gu_33 x_11 x_22 x_33 x_44 gu_44 #:refers-to (shadow x_11))
    (SpineEqElim ge i gU_11 gU_22 x gu_22 #:refers-to (shadow x) gu_33 gu_44)

    (EvidenceTermLam x et #:refers-to (shadow x))
    (EvidenceTermPi x eT_11 eT_22 #:refers-to (shadow x))
    (EvidenceTermNatElim i et_11 eT et_22 x_11 x_22 et_33 #:refers-to (shadow x_11))
    (EvidenceTermeT i et_11 eT_11 et_22 eT_22 et_33 x_11 x_22 x_33 x_44 et_44 #:refers-to (shadow x_11))
    (EvidenceTermEqElim i et_11 eT_11 eT_22 x et_22 #:refers-to (shadow x) et_33 et_44)
    (RawValueLam x et #:refers-to (shadow x))
    (SimpleValueLam x t #:refers-to (shadow x))
    (SimpleValuePi x sV T #:refers-to (shadow x))
    (EvidenceValuePi x eV eT #:refers-to (shadow x))
    (EvidenceValueLam x et #:refers-to (shadow x))

)

;;;; subrules 
;; #source file ./ott/lang_simple.ott  lines 683 - 683 and file ./ott/lang_simple.ott  lines 684 - 684 and file ./ott/lang_simple.ott  lines 687 - 687 and file ./ott/lang_simple.ott  lines 688 - 688 and file ./ott/lang_simple.ott  lines 689 - 689 and file ./ott/lang_simple.ott  lines 690 - 690 and file ./ott/lang_simple.ott  lines 691 - 691 and file ./ott/lang_simple.ott  lines 692 - 692 and file ./ott/lang_simple.ott  lines 693 - 693 and file ./ott/lang_simple.ott  lines 694 - 694 and file ./ott/lang_simple.ott  lines 695 - 695 and file ./ott/lang_simple.ott  lines 696 - 696 and file ./ott/lang_simple.ott  lines 698 - 698 and file ./ott/lang_simple.ott  lines 699 - 699 and file ./ott/lang_simple.ott  lines 704 - 704 and file ./ott/lang_simple.ott  lines 705 - 705 and file ./ott/lang_simple.ott  lines 706 - 706 and file ./ott/lang_simple.ott  lines 709 - 709 
;; #source file ./ott/lang_simple.ott  lines 720 - 731 
;; #source file ./ott/lang_simple.ott  lines 733 - 1217 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Hand-written implementations
;; These are mostly to speed up type-checking and running GDTL programs
;; They should match the inductive definitions in the ott file
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; The (precision) meet of two types/terms
;; Throws an exception if the meet does not exist

(define (meet gu_1 gu_2)
  (with-handlers ([exn:fail:redex? (lambda (exn) (error 'MeetError "Inconsistent types:\n    ~a\nand\n   ~a" (pt gu_1) (pt gu_2) ))])
    (meet_ (term (^ ,gu_1 ,gu_2)))
  ))

(define meet_
  (term-match/single L
               [(^ CanonicalDyn gu) (term gu)]
               [(^ gu CanonicalDyn) (term gu)]
               [(^ guNoSub guNoSub) (term guNoSub)]
               [(^ (CanonicalAtomic (AtomicSucc gu)) (CanonicalAtomic (AtomicSucc gu_2))) (term (CanonicalAtomic (AtomicSucc ,(meet (term gu) (term gu_2) )))) ]
               [(^ (CanonicalAtomic (AtomicVec gU gu)) (CanonicalAtomic (AtomicVec gU_2 gu_2))) (term (CanonicalAtomic (AtomicVec ,(meet (term gU) (term gU_2) ) ,(meet (term gu) (term gu_2) )))) ]
               [(^ (CanonicalAtomic (AtomicNil gU )) (CanonicalAtomic (AtomicNil gU_2))) (term (CanonicalAtomic (AtomicNil ,(meet (term gU) (term gU_2) )))) ]
               [(^ (CanonicalAtomic (AtomicCons gU_T gu_len gu_h gu_t)) (CanonicalAtomic (AtomicCons gU_T^ gu_len^ gu_h^ gu_t^)))
                (term (CanonicalAtomic (AtomicCons (meet (term gU_T) (term gU_T)) (meet (term gu_len) (term gu_len)) (meet (term gu_h) (term gu_h)) (meet (term gu_t))))) ]
               [(^ (CanonicalAtomic (AtomicSpine x SpineEmpty)) (CanonicalAtomic (AtomicSpine x SpineEmpty))) (term (CanonicalAtomic (AtomicSpine x SpineEmpty)))]
               [(^ (CanonicalAtomic (AtomicSpine x (SpineCons ge_1 gu_1))) (CanonicalAtomic (AtomicSpine x (SpineCons ge_2 gu_2))))
                (term-let ([(CanonicalAtomic (AtomicSpine x ge_3)) (meet (term (CanonicalAtomic (AtomicSpine x ge_1))) (term (CanonicalAtomic (AtomicSpine x ge_2))))])
                          (term (CanonicalAtomic (AtomicSpine x (SpineCons ge_3 ,(meet (term gu_1) (term gu_2)))))))]
               [(^ (CanonicalAtomic (AtomicSpine x (SpineNatElim ge_ i  gU_ gu_2 x_1 x_2 gu_3))) (CanonicalAtomic (AtomicSpine x (SpineNatElim ge_^ i  gU_^ gu_2^ x_1^ x_2^ gu_3^))))
                (let ([x_3 (gensym)]
                      [x_4 (gensym)])
                 (term-let ([(CanonicalAtomic (AtomicSpine x ge_3)) (meet (term (CanonicalAtomic (AtomicSpine x ge_))) (term (CanonicalAtomic (AtomicSpine x ge_^))))])
                          (term (CanonicalAtomic (AtomicSpine x (SpineNatElim ge_3 i  ,(meet (term gU_) (term gU_^)) ,(meet (term gu_2) (term gu_2^)) ,x_3 x_4 ,(meet (term (substitute (substitute gu_3 x_1 ,x_3) x_2 ,x_4)) (term (substitute (substitute gu_3 x_1^ ,x_3) x_2^ ,x_4))) ))))))]
               [(^ (CanonicalAtomic (AtomicSpine x (SpineVecElim ge_ i  gU_elem gu_len gU_ gu_N x_1 x_2 x_3 x_4 gu_C)))
                   (CanonicalAtomic (AtomicSpine x (SpineVecElim  ge_^ i  gU_elem^ gu_len^ gU_^ gu_N^ x_1 x_2 x_3 x_4 gu_C^))))
                ;;TODO alpha rename
                (term-let ([(CanonicalAtomic (AtomicSpine x ge_3)) (meet (term (CanonicalAtomic (AtomicSpine x ge_))) (term (CanonicalAtomic (AtomicSpine x ge_^))))])
                          (term (CanonicalAtomic (AtomicSpine x
                                                              (SpineVecElim
                                                               ge_3 i
                                                               ,(meet (term gU_elem) (term gU_elem^))
                                                               ,(meet (term gu_len) (term gu_len^))
                                                               ,(meet (term gU_) (term gU_^))
                                                               ,(meet (term gu_N) (term gu_N^))
                                                               x_1 x_2 x_3 x_4
                                                               ,(meet (term gu_C) (term gu_C^)) )))))]
               ;;;;TODO alpha rename
               [(^ (CanonicalLam x gu_1) (CanonicalLam y gu_2))
                (let ([z (gensym)])
                 (term (CanonicalLam ,z ,(meet (term (substitute gu_1 x ,z)) (term (substitute gu_2 y ,z))) )))]
               [(^ (CanonicalAtomic (AtomicEq gU gu_1 gu_2)) (CanonicalAtomic (AtomicEq gU_^ gu_1^ gu_2^))) (term (CanonicalAtomic (AtomicEq ,(meet (term gU) (term gU_^)) ,(meet (term gu_1) (term gu_1^)) ,(meet (term gu_2) (term gu_2^)))) )]
               [(^ (CanonicalAtomic (AtomicRefl gU gu)) (CanonicalAtomic (AtomicRefl gU_^ gu^))) (term (CanonicalAtomic (AtomicRefl ,(meet (term gU) (term gU_^)) ,(meet (term gu) (term gu^)) ))) ]
               [(^ (CanonicalAtomic (AtomicSpine x (SpineEqElim ge_ i  gU_tipe gU_motive z gu_Refl gu_x gu_y)))
                   (CanonicalAtomic (AtomicSpine x (SpineEqElim  ge_^ i  gU_elem^ gu_len^ gU_^ gu_N^ x_1 x_2 x_3 x_4 gu_C^))))
                ;;TODO alpha rename
                (term-let ([(CanonicalAtomic (AtomicSpine x ge_3)) (meet (term (CanonicalAtomic (AtomicSpine x ge_))) (term (CanonicalAtomic (AtomicSpine x ge_^))))])
                          (term (CanonicalAtomic (AtomicSpine x
                                                              (SpineEqElim
                                                               ge_3 i
                                                               ,(meet (term gU_tipe) (term gU_tipe^))
                                                               ,(meet (term gU_motive) (term gU_motive^))
                                                               z
                                                               ,(meet (term gu_Refl) (term gu_Refl^))
                                                               ,(meet (term gu_z) (term gu_x^))
                                                               
                                                               ,(meet (term gu_y) (term gu_y^)) )))))]
               [(^ (CanonicalPi x gU_11 gU_12) (CanonicalPi y gU_21 gU_22))
                (let ([z (gensym)])
                 (term (CanonicalPi ,z ,(meet (term gU_11) (term gU_21)) ,(meet (term (substitute gU_12 x ,z)) (term (substitute gU_22 y ,z))) )))]
               ))

;;Find the eta-expanded form of gu at type gU
(define (eta-expand gu gU)
  (first (judgment-holds (GEtaExpandC ,gu gu_ret ,gU) gu_ret)
))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Hereditary substitution: normal forms as input and output
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (hsub x_old gu_new gU gu) ((hsub_ gu) x_old gu_new gU) )
(define (ghsub x_old gU gu_new  gu) (hsub x_old gu_new gU gu) )

(define hsub_
  (term-match/single L
                     [CanonicalDyn (lambda (x_old gu_new gU) (term CanonicalDyn))]
                     [(CanonicalLam x gu) (lambda (x_old gu_new gU)
                                            (term (CanonicalLam x ,(hsub x_old gu_new gU (term gu)) )))]
                     [(CanonicalPi x gU_1 gU_2)
                      (lambda (x_old gu_new gU)
                        (term (CanonicalPi x
                                         ,(hsub x_old gu_new gU (term gU_1)) 
                                         ,(hsub x_old gu_new gU (term gU_2)))))]
                     [guNoSub (lambda (x_old gu_new gU)
                                                        (term guNoSub))]
                     [(CanonicalAtomic (AtomicSucc gu)) (lambda (x_old gu_new gU) (term (CanonicalAtomic (AtomicSucc ,(hsub x_old gu_new gU (term gu))))))]
                     [(CanonicalAtomic (AtomicVec gU_type gu)) (lambda (x_old gu_new gU) (term (CanonicalAtomic (AtomicVec ,(hsub x_old gu_new gU (term gU_type)) ,(hsub x_old gu_new gU (term gu))))))]
                     [(CanonicalAtomic (AtomicNil gU_type)) (lambda (x_old gu_new gU) (term (CanonicalAtomic
                                                                                        (AtomicNil ,(hsub x_old gu_new gU (term gU_type))))))]
                     [(CanonicalAtomic (AtomicCons gU_type gu_len gu_h gu_t))
                      (lambda (x_old gu_new gU) (term (CanonicalAtomic (AtomicCons
                                                                        ,(hsub x_old gu_new gU (term gU_type))
                                                                        ,(hsub x_old gu_new gU (term gu_len))
                                                                        ,(hsub x_old gu_new gU (term gu_h))
                                                                        ,(hsub x_old gu_new gU (term gu_t))
                                                                        ))))]
                     [(CanonicalAtomic (AtomicSpine x ge))
                      (lambda (x_old gu_new gU) (if (equal? (term x) x_old)
                                                    (term-let ([(TermPair gu_ret1 gU_ret2) ((hsub-spine (term ge)) x_old gu_new gU)])
                                                               (term gu_ret1)
                                                               )
                                                               (term (CanonicalAtomic (AtomicSpine x ,((hsub-map-spine (term ge)) x_old gu_new gU)) ))))]
                     )
  )

;; Helpers for hsub

;;Perform a substitution in each element of a spine
(define hsub-map-spine
  (term-match/single L
                     [SpineEmpty (lambda (x_old gu_new gU) (term SpineEmpty))]
                     [(SpineCons ge gu) (lambda (x_old gu_new gU)
                                          (term (SpineCons ,((hsub-map-spine (term ge)) x_old gu_new gU) ,(hsub x_old gu_new gU (term gu)))))]
                     [(SpineNatElim ge i  gU_motive gu_2 x_1 x_2 gu_3) (lambda (x_old gu_new gU)
                                          (term (SpineNatElim ,((hsub-map-spine (term ge)) x_old gu_new gU) i
                                                              ,(hsub x_old gu_new gU (term gU_motive))
                                                              ,(hsub x_old gu_new gU (term gu_2))
                                                              x_1
                                                              x_2
                                                              ,(hsub x_old gu_new gU (term gu_3)))))]
                     [(SpineEqElim ge i gU_tipe gU_motive z gu_Refl gu_x gu_y) (lambda (x_old gu_new gU)
                                                                               (term (SpineEqElim
                                                                                      ,(hsub-map-spine (term ge) x_old gu_new gU)
                                                                                      i
                                                                                      ,(hsub x_old gu_new gU (term gU_tipe))
                                                                                      ,(hsub x_old gu_new gU (term gU_motive))
                                                                                      z
                                                                                      ,(hsub x_old gu_new gU (term gU_Refl))
                                                                                      ,(hsub x_old gu_new gU (term gU_x))
                                                                                      ,(hsub x_old gu_new gU (term gU_y))
                                                                                      )))]
                     [(SpineVecElim ge i gU_type gu_len gU_motive gu_N x_len x_head x_tail x_rec gu_C) (lambda (x_old gu_new gU)
                                          (term (SpineNatElim ,((hsub-map-spine (term ge)) x_old gu_new gU) i
                                                              ,(hsub x_old gu_new gU (term gU_type))
                                                              ,(hsub x_old gu_new gU (term gu_len))
                                                              ,(hsub x_old gu_new gU (term gU_motive))
                                                              ,(hsub x_old gu_new gU (term gu_N))
                                                              x_len
                                                              x_head
                                                              x_tail
                                                              x_rec
                                                              ,(hsub x_old gu_new gU (term gu_C)))))]))

;; Perform a hereditary substitution on a spine whose head is the variable being replaced
(define hsub-spine
  (term-match/single L
                     [SpineEmpty (lambda (x gu_new gU) (term (TermPair ,gu_new ,gU)))]
                     [(SpineCons ge gu) (lambda (x_old gu_new gU) (hsub-spine-withsub (term (TermPair ,(hsub x_old gu_new gU (term gu)) ,( (hsub-spine (term ge)) x_old gu_new gU) )) )) ]
                     [(SpineVecElim ge i gU_type gu_len gU_motive gu_N x_len x_head x_tail x_rec gu_C) (lambda (x_old gu_new gU)
                                                                       (let ([subbed (hsub x_old gu_new gU (term (CanonicalAtomic (AtomicSpine ,x_old ge))))])
                                                                        (term (TermPair
                                                                         ,(hsub-vecElim (term (VecElim i ,subbed gU_type gu_len gU_motive gu_N x_len x_head x_tail x_rec gu_C)) )
                                                                         ,(bodysub (term (CanonicalAtomic (AtomicVec gU_type gu_len))) subbed (bodysub (term CNat) (term gu_len) (term gU_motive)))
                                                                         )))
                                                                        
                                                                        ) ]
                     [(SpineNatElim ge i  gU_motive gu_Z x_n x_rec gu_S) (lambda (x_old gu_new gU)
                                                                       (let ([subbed (hsub x_old gu_new gU (term (CanonicalAtomic (AtomicSpine ,x_old ge))))])
                                                                        (term (TermPair
                                                                         ,(hsub-natElim (term (NatElim i ,subbed gU_motive gu_Z x_n x_rec gu_S )) )
                                                                         ,(bodysub (term CNat) subbed (term gU_motive))
                                                                         )))
                                                                        
                                                                        ) ]
                     [(SpineEqElim ge i  gU_tipe gU_motive z gu_Refl gu_x gu_y) (lambda (x_old gu_new gU)
                                                                       (let ([subbed (hsub x_old gu_new gU (term (CanonicalAtomic (AtomicSpine ,x_old ge))))])
                                                                        (term (TermPair
                                                                         ,(hsub-eqElim (term (EqElim i ,subbed  gU_tipe gU_motive z gu_Refl gu_x gu_y )) )
                                                                         ,(bodysub (term (CanonicalAtomic (AtomicEq gU_tipe gu_x gu_y))) subbed
                                                                                   (bodysub (term gU_tipe) (term gu_x)
                                                                                            (bodysub (term gU_tipe) (term gu_y)
                                                                                             (term gU_motive)))
                                                                         )))
                                                                        
                                                                        )) ]))

;; Perform a hereditary subtitution on a cons-spine whose head is the variable being replaced,
;; Given the result of substituting on all but the last element of the spine
(define hsub-spine-withsub
  (term-match/single L
                     [(TermPair gu_subbed (TermPair (CanonicalLam x gu_body) (CanonicalPi y gU_dom gU_cod) ))
                      (let ([gu_val (hsub (term x) (term gu_subbed) (term gU_dom) (term gu_body))]
                            [gU_type (hsub (term y) (term gu_subbed) (term gU_dom) (term gU_cod))])
                       (term (TermPair ,(eta-expand gu_val gU_type) ,gU_type )))]
                     [(TermPair gu_subbed (TermPair gu_spine CanonicalDyn)) (term (TermPair CanonicalDyn CanonicalDyn))]
                     [(TermPair gu_subbed (TermPair CanonicalDyn (CanonicalPi y gU_dom gU_cod)) ) (term (TermPair CanonicalDyn ,(hsub (term y) (term gu_subbed) (term gU_dom) (term gU_cod))))]))

(define-term CNat (CanonicalAtomic AtomicNat))

(define hsub-natElim
  (term-match/single L
                     [(NatElim i (CanonicalAtomic (AtomicSpine x ge)) gU_motive gu_Z x_n x_rec gu_S )
                      (term (CanonicalAtomic (AtomicSpine x (SpineNatElim ge i  gU_motive gu_Z x_n x_rec gu_S))))]
                     [(NatElim i (CanonicalAtomic AtomicZero) gU_motive gu_Z x_n x_rec gu_S  )
                      (term gu_Z)]
                     [(NatElim i (CanonicalAtomic (AtomicSucc gu)) gU_motive gu_Z x_n x_rec gu_S )
                      (hsub (term x_rec)  (hsub-natElim (term (NatElim i gu gU_motive gu_Z x_n x_rec gu_S) )) (bodysub (term CNat) (term gu) (term gU_motive)) (hsub (term x_n) (term gu) (term CNat)  (term gu_S))   )]
                     [(NatElim i CanonicalDyn gU_motive gu_Z x_n x_rec gu_S )
                      (term CanonicalDyn)]))

(define hsub-eqElim
  (term-match/single L
                     [(EqElim i (CanonicalAtomic (AtomicSpine x ge))  gU_tipe gU_motive z gu_Refl gu_x gu_y )
                      (term (CanonicalAtomic (AtomicSpine x (SpineEqElim ge i gU_tipe gU_motive z gu_Refl gu_x gu_y ))))]
                     [(EqElim i (CanonicalAtomic (AtomicRefl gU_tipe1 gu_val))  gU_tipe gU_motive z gu_Refl gu_x gu_y  )
                      (hsub (term z) (term gU_tipe) (term gu_Refl))]
                     [(EqElim i CanonicalDyn  gU_tipe gU_motive z gu_Refl gu_x gu_y )
                      (term CanonicalDyn)]))

(define hsub-vecElim
  (term-match/single L
                     [(VecElim i (CanonicalAtomic (AtomicSpine x ge)) gU_type gu_len gU_motive gu_N x_len x_head x_tail x_rec gu_C)
                      (term (CanonicalAtomic (AtomicSpine x (SpineVecElim ge i gU_type gu_len gU_motive gu_N x_len x_head x_tail x_rec gu_C))))]
                     [(VecElim i (CanonicalAtomic (AtomicNil gU_type^)) gU_type gu_len gU_motive gu_N x_len x_head x_tail x_rec gu_C)
                      (term gu_N)]
                     [(VecElim i (CanonicalAtomic (AtomicCons gU_type^ gu_sublen gu_head gu_tail)) gU_type gu_len gU_motive gu_N x_len x_head x_tail x_rec gu_C)
                      (hsub (term x_rec)
                             (hsub-vecElim (term (VecElim i gu_tail gU_type gu_len gU_motive gu_N x_len x_head x_tail x_rec gu_C)))
                             (bodysub (term (CanonicalAtomic (AtomicVec gU_type gu_sublen))) (term gu_tail) (bodysub (term CNat) (term gu_sublen) (term gU_motive)))
                             (hsub
                              (term x_tail)
                              (term gu_tail)
                              (term (CanonicalAtomic (AtomicVec gU_type gu_sublen)))
                              (hsub
                               (term x_head)
                               (term gu_head)
                               (term gU_type)
                               (hsub
                                (term x_len)
                                (term gu_sublen)
                                (term CNat)
                                (term gu_C)))))]
                     [(VecElim i CanonicalDyn gU_type gu_len gU_motive gu_N x_len x_head x_tail x_rec gu_C)
                      (term CanonicalDyn)]))

(define bodysub_
  (term-match/single L
   [(CanonicalLam x gu) (lambda (gU gu_arg) (hsub (term x) gu_arg gU (term gu) ))]
   [CanonicalDyn (term CanonicalDyn)]
   ))

(define (bodysub gU gu_arg gu_fun)
  ((bodysub_ gu_fun) gU gu_arg))

;; A performance hack
;; We leave all definitions as variables in elaborated form
;; And insert them immediately before evaluating
;; This prevents us from having to re-typecheck definitions
(define perform-elab-substs
  (term-match/single L 
                     [x (if (hash-has-key? currently-defined-vars (term x) ) 
                            (redex-let L ([ (ENTTriple et gu gU) (hash-ref currently-defined-vars (term x)) ]) (term et)  )
                            (term x) )]
                     [(TermLam x et) (term (TermLam x ,(perform-elab-substs (term et)))) ]
                     [(TermApp et_11 et_22) (term (TermApp ,(perform-elab-substs (term et_11)) ,(perform-elab-substs (term et_22))))]
                     [(TermPi x eT_11 eT_22) (term (TermPi x ,(perform-elab-substs (term eT_11)) ,(perform-elab-substs (term eT_22))))]
                     [(TermSet i) (term (TermSet i))]
                     [TermDyn (term TermDyn)]
                     [(TermEp ep et) (term (TermEp ep ,(perform-elab-substs (term et))))]
                     [TermError (term TermError)]
                     [TermNat (term TermNat)]
                     [TermZero (term TermZero)]
                     [(TermSucc et) (term (TermSucc ,(perform-elab-substs (term et))))]
                     [(TermNatElim i et eT et_Z x_m x_r et_S) (term (TermNatElim i ,(perform-elab-substs (term et)) ,(perform-elab-substs (term eT)) ,(perform-elab-substs (term et_Z)) x_m x_r ,(perform-elab-substs (term et_S)) ))]
                     [(TermVec eT et) (term (TermVec ,(perform-elab-substs (term eT)) ,(perform-elab-substs (term et))))]
                     [(TermNil et) (term (TermNil ,(perform-elab-substs (term et))))]
                     [(TermCons eT et_1 et_2 et_3) (term (TermCons ,(perform-elab-substs (term eT)) ,(perform-elab-substs (term et_1)) ,(perform-elab-substs (term et_2)) ,(perform-elab-substs (term et_3))))]
                     [(TermVecElim i et eT_T et_len eT_motive et_N x_1 x_2 x_3 x_4 et_C) (term (TermVecElim i ,(perform-elab-substs (term et)) ,(perform-elab-substs (term eT_T)) ,(perform-elab-substs (term et_len)) ,(perform-elab-substs (term eT_motive)) ,(perform-elab-substs (term et_N)) x_1 x_2 x_3 x_4 ,(perform-elab-substs (term et_C))))]
                     [(TermEq gU gu_1 gu_2) (term (TermEq ,(perform-elab-substs (term gU)) ,(perform-elab-substs (term gu_1)) ,(perform-elab-substs (term gu_2))))]
                     [(TermRefl gU gu_1) (term (TermRefl ,(perform-elab-substs (term gU)) ,(perform-elab-substs (term gu_1)) ))]
                     [(TermEqElim i gt_1 gT_1 gT_2 z gt_2 gt_3 gt_4) 
                      (term (TermEqElim i
                      ,(perform-elab-substs (term gt_1)) 
                      ,(perform-elab-substs (term gT_1))
                      ,(perform-elab-substs (term gT_2))
                      z
                      ,(perform-elab-substs (term gt_2))
                      ,(perform-elab-substs (term gt_3))
                      ,(perform-elab-substs (term gt_4))))]
                     
                     ))

;; Compute the domain of a function type or ?
(define dom
  (term-match/single L
                     [CanonicalDyn (term CanonicalDyn)]
                     [(CanonicalPi x gU gU_2) (term gU)]
                     [_ (error "Cannot treat as a function type")]))

;; Helpers for manipulating universe levels
(define-metafunction L 
  succ : i -> i
  [(succ i) ,(+ (term i) 1)])
  
  (define-metafunction L 
  pred : i -> i
  [(pred i) ,(- (term i) 1)])

;;;;;;;;;;;;;;;;;;;;;;;;;
;; Computes replacing of x_old by et_new in et, where et_new has normal form gu at type gU
;; Substitution on evidence terms
;; Because evidence terms contain evidence, when performing a substitution
;; We may also need to subsitute in the evidence
;; Since this is (type-directed) hereditary substitution on normal forms,
;; We need to know the type and normal form of the value we're inserting
;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-metafunction L 
  esubst : et var et gu gU -> et 
  [(esubst x_old x_old et_new gu gU) et_new ]
  [(esubst y x_old et_new gu gU) y (side-condition (not (equal? (term x_old) (term y)))) ]
  [(esubst (TermPi y eT_1 eT_2) x_old et_new gu gU) 
    (TermPi y (esubst eT_1 x_old et_new gu gU) (esubst eT_2 x_old et_new gu gU ))
    (side-condition (not (equal? (term x_old) (term y))))
  ]
  [(esubst (TermLam y et) x_old et_new gu gU) 
    (TermLam y (esubst et x_old et_new gu gU ))
    (side-condition (not (equal? (term x_old) (term y))))]
  [(esubst (TermApp et_1 et_2) x_old et_new gu gU) (TermApp (esubst et_1 x_old et_new gu gU) (esubst et_2 x_old et_new gu gU))]
  [(esubst (TermEp (EvidenceEv gU_1 ) et) x_old et_new gu gU) (TermEp (EvidenceEv gU_new) (esubst et x_old et_new gu gU))
    (judgment-holds (GHsub  x_old gU gu gU_1 gU_new))]
  [(esubst (TermSet i) x_old et_new gu gU) (TermSet i) ]
  [(esubst TermDyn x_old et_new gu gU) TermDyn]
  [(esubst TermNat x_old et_new gu gU) TermNat]
  [(esubst TermZero x_old et_new gu gU) TermZero]
  [(esubst (TermSucc et) x_old et_new gu gU) (TermSucc (esubst et x_old et_new gu gU))]
  [(esubst (TermNatElim i et eT et_Z x_m x_r et_S) x_old et_new gu gU)  (TermNatElim i (esubst et x_old et_new gu gU) (esubst eT x_old et_new gu gU) (esubst et_Z x_old et_new gu gU) x_m x_r (esubst et_S x_old et_new gu gU) )]
  [(esubst (TermVec eT et) x_old et_new gu gU) (TermVec (esubst eT x_old et_new gu gU) (esubst et x_old et_new gu gU))]
  [(esubst (TermNil eT) x_old et_new gu gU) (TermNil (esubst eT x_old et_new gu gU))]
  [(esubst (TermCons eT et_len et_head et_tail) x_old et_new gu gU) (TermCons (esubst eT x_old et_new gu gU) (esubst et_len x_old et_new gu gU) (esubst et_head x_old et_new gu gU) (esubst et_tail x_old et_new gu gU))]
  [(esubst (TermVecElim i et eT_type et_len eT_motive et_N x_len x_head x_tail x_rec et_C) x_old et_new gu gU)
   (TermVecElim i (esubst et x_old et_new gu gU) (esubst eT_type x_old et_new gu gU) (esubst et_len x_old et_new gu gU) (esubst eT_motive x_old et_new gu gU) (esubst et_N x_old et_new gu gU) x_len x_head x_tail x_rec (esubst et_C x_old et_new gu gU))]
  )

;; Test whether a term can possibly synthesize a type
(define-metafunction L 
 is-check-only : term -> boolean
 [(is-check-only TermDyn) #t]
 [(is-check-only (TermPi x TT_1 TT_2)) #t]
 [(is-check-only (TermLam x tt)) #t]
 [(is-check-only tt) #f] 
)

;;;;;;;;;;;;;;;;;;;
;; Checks whether the input types areof the form (Set i) (Set j)
;; where i < j
;; We need this because Set i and Set j are not *consistent*, we can only convert between them in one direction
;; So when we switch between synthesis and checking, we need to tell whether we're checking the types for Consistency
;; Or checking if we can raise from a lower universe to a higher one
;;;;;;;;;;;;;;;;;;

(define-metafunction L 
 is-set-pair : gU gU_V -> boolean
 [(is-set-pair (CanonicalAtomic (AtomicSet i)) (CanonicalAtomic (AtomicSet j))) #t (side-condition (< (term i) (term j)))]
 [(is-set-pair gU gU_V) #f] 
)

;; Get the typed wrapped in evidence
(define-metafunction L 
 type-in-ev : ep -> gU
 [(type-in-ev (EvidenceEv gU)) gU]
)

(define (mparens-pt tt)
  (let ([str (pt tt)])
    (if (string-contains? str " ")
        (string-append "(" str ")")
        str)
    ))

;; Pretty-print a term
;; Pattern-matcher for pretty-printing terms 
(define pt
    (term-match/single L
    [x (symbol->string (term x))]
    [(TermLam x any_tt) (string-append "λ " (pt (term x)) " . " (pt (term any_tt)) )]
    [(TermPi x any_TT_1 any_TT_2) (string-append "( " (pt (term x)) " : " (pt (term any_TT_1)) ") -> " (pt (term any_TT_2)) )]
    [(TermSet i) (string-append "Set" (number->string (term i)))]
    [(TermApp any_tt_1 any_tt_2) (string-append  (mparens-pt (term any_tt_1)) " " (mparens-pt (term any_tt_2)) )]
    [TermDyn "?"]
    [TermError "⊥"]
    [(TermAnn any_tt_1 any_tt_2) (string-append (pt (term any_tt_1)) " :: " (pt (term any_tt_2)))]
    [(TermDynAnn any_gU) (string-append "?" (mparens-pt (term any_gU)))]
    [(TermEp (EvidenceEv any_gU ) any_tt) (string-append "〈" (pt (term any_gU)) "〉" (mparens-pt (term any_tt)) )]
    [(CanonicalAtomic any_grr) (mparens-pt (term any_grr))]
    [(CanonicalLam x any_gu) (string-append "λ " (pt (term x)) " . " (pt (term any_gu)) )]
    [(CanonicalPi x any_gU any_gU_V) (string-append "( " (pt (term x)) " : " (pt (term any_gU)) ") -> " (pt (term any_gU_V)) )]
    [(AtomicSet i) (string-append "Set" (number->string (term i)))]
    [AtomicNat "Nat"]
    [AtomicZero "0"]
    [CanonicalDyn "?"]
    [(Atomic any_tt) (string-append "Succ " (mparens-pt (term any_tt)))]
    [(AtomicSpine x any_ge) (string-append  (mparens-pt (term x)) " " (mparens-pt (term any_ge)) )]
    [SpineEmpty ""]
    [(SpineCons any_ge any_gu) (string-append (mparens-pt (term any_ge)) " " (mparens-pt (term any_gu)))]
    [(SpineNatElim any_TT i any_tt_Z x_m x_r any_tt_S) (string-append "NatElim " (mparens-pt (term any_TT)) " " (mparens-pt (term any_tt_Z)) " " (mparens-pt (term x_m)) " " (mparens-pt (term x_r)) " " (mparens-pt (term any_tt_S)) " ")]
    [TermNat "Nat"]
    [TermZero "0"]
    [(TermSucc any_tt) (printNat 1 (term any_tt))]
    [(AtomicSucc any_tt) (printNat 1 (term any_tt))]
    [(TermNatElim i any_tt any_TT any_tt_Z x_m x_r any_tt_S) (string-append "NatElim " (mparens-pt (term any_tt)) " " (mparens-pt (term any_TT)) " " (mparens-pt (term any_tt_Z)) " " (mparens-pt (term x_m)) " " (mparens-pt (term x_r)) " " (mparens-pt (term any_tt_S)))]
    [any (format "~a" (term any))]
    
    ))

(define (printNat n t)
  ((printNat_ t) n) )

(define printNat_
  (term-match/single
   L
   [(TermEp ep TermZero) (lambda (n) (number->string n))]
   [TermZero (lambda (n) (number->string n))]
   [(TermEp ep (TermSucc any)) (lambda (n) (printNat (+ n 1) (term any)))]
   [(TermSucc any) (lambda (n) (printNat (+ n 1) (term any)))]
   [any (lambda (n) (string-append (number->string n) " + " (mparens-pt (term any))))]
   ))

;; Print the type wrapped in evidence
(define (printEvType ep)
 (term-let ([(EvidenceEv gU ) ep]) (pt (term gU))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Ott's notion of context doesn't play nice with Redex
;; So we extend our language with our own notion of evaluation contexts
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extended-language LContext
  L
  (redexContext RC ::= 
    hole
    (TermApp RC et)
    (TermApp ev RC)
    (TermPi x RC eT)
    (TermEp ep RC)
    (TermSucc RC)
    (TermNatElim i RC eT et_Z x_1 x_2 et_S)
    (TermNatElim i ev RC et_Z x_1 x_2 et_S)
    (TermNatElim i ev eV RC x_1 x_2 et_S)
    (TermVec RC et)
    (TermVec eV RC)
    (TermNil RC)
    (TermCons RC et1 et2 et2)
    (TermCons eV RC et2 et2)
    (TermCons eV ev1 RC et2)
    (TermCons eV ev1 ev2 RC)
    (TermVecElim i RC eT_T et_len eT_motive et_N x_1 x_2 x_3 x_4 et_C)
    (TermVecElim i ev RC et_len eT_motive et_N x_1 x_2 x_3 x_4 et_C)
    (TermVecElim i ev eV_T RC eT_motive et_N x_1 x_2 x_3 x_4 et_C)
    (TermVecElim i ev eV_T ev_len RC et_N x_1 x_2 x_3 x_4 et_C)
    (TermVecElim i ev eV_T ev_len eV_motive RC x_1 x_2 x_3 x_4 et_C)

    )
)

;;;;;;;;;;;;;;;;
;; The contextual-closure of our single-small-step reduction relation
;;;;;;;;;;;;;;;
(define Red
  (reduction-relation LContext
  (--> et_1 et_2 (judgment-holds (Step et_1 et_2)))
  )
)

 

;; #source file ./ott/lang_simple.ott  lines 1219 - 1221 


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Environment helpers, implemented by hand for speed
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Returns the type for x in environment Gamma, or #f if x is not in Gamma
(define (gVarLook x Gamma)
  ((gVarLook_ Gamma) x)
  )

(define gVarLook_
  (term-match/single L 
                     [EnvEmpty (lambda (x) #f)]
                     [(EnvExt y gU Gamma) (lambda (x) (if (equal? x (term y))
                                                          (term gU)
                                                          (gVarLook x (term Gamma)) 
                                                          ))]
                     ))

;; Returns whether x is free in Gamma 
(define (gVarFree x Gamma)
  ((gVarFree Gamma) x)
  )

(define gVarFree_
  (term-match/single L 
                     [EnvEmpty #t]
                     [(EnvExt y gU Gamma) (lambda (x) (if (equal? x (term y))
                                                          #f
                                                          (gVarFree x (term Gamma)) 
                                                          ))]))
;;Judgment-form versions of the above functions

(define-judgment-form
  L
  #:mode (GVarLook I O I)
  #:contract (GVarLook x gU Gamma)

  [
   (where gU ,(gVarLook (term x) (term Gamma)))
   ------------------------------------- "GVarLookHead"
   (GVarLook x gU Gamma)]

  )
(define-judgment-form L 
 
  #:mode (GVarFree I I)
  #:contract (GVarFree x Gamma)

  ;; #source file ./ott/lang_simple.ott  lines 895 - 899 
  [
   (side-condition ,(gVarFree (term x) (term Gamma)))
   ---------------------------------- "GFreeLookCons"
   (GVarFree x Gamma)]
  )

;; #source file ./ott/lang_simple.ott  lines 1390 - 1392 

  

  ;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Hereditary substitution on environments
  ;;;;;;;;;;;;;;;;;;;;;;;;;

;;; definitions 

(define-judgment-form
  L
  #:mode (GradualEnvSub I I I I O)
  #:contract (GradualEnvSub x gU gu Gamma Gamma_^)

;; #source file ./ott/lang_simple.ott  lines 1752 - 1754 
 [------------------------------------------- "GradualEnvSubEmpty"
  (GradualEnvSub x gU gu EnvEmpty EnvEmpty)]

;; #source file ./ott/lang_simple.ott  lines 1755 - 1760 
 [
  
   (side-condition ,(not (alpha-equivalent? L (term  (CanonicalAtomic  (AtomicSpine  x  SpineEmpty) ) ) (term  (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) )))) 
  (GHsub x gU gu gU_11 gU_22)
  (GradualEnvSub x gU gu Gamma Gamma_^)
  ------------------------------------------------------------------------- "GradualEnvSubVarDiff"
  (GradualEnvSub x gU gu (EnvExt y gU_11 Gamma) (EnvExt y gU_22 Gamma_^))]

;; #source file ./ott/lang_simple.ott  lines 1761 - 1764 
 [
  
  (GradualEnvSub x gU gu Gamma Gamma_^)
  ------------------------------------------------------- "GradualEnvSubVarSame"
  (GradualEnvSub x gU gu (EnvExt x gU_^ Gamma) Gamma_^)]
)
;; #source file ./ott/lang_simple.ott  lines 1766 - 1766 


;;;;;;;;;;;;;;;;;
;; Judgment form versions of hereditary substitution and other related functions
;;;;;;;;;;;;;;;;

(define-judgment-form L 
 
  #:mode (GHsub I I I I O)
  #:contract (GHsub x gU gu_11 gu_22 gu_33)

  [ (where gu_33 ,(hsub (term x) (term gu_11) (term gU) (term gu_22)))
  --------------------------------------
  (GHsub x gU gu_11 gu_22 gu_33)
  ]

)

(define-judgment-form L 
 
  #:mode (Domain I O)
  #:contract (Domain gU gU_2)

  [ (where gU_2 ,(dom (term gU)))
  --------------------------------------
  (Domain gU gU_2)
  ]

)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Functions to substitute into the codomain of a function type
;; or the body of a function
;; Used to compute the return type and normal form (respectively) of function application.
;; Produces ? if the input is ?
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;; definitions 

(define-judgment-form
  L
  #:mode (CodSub I I O)
  #:contract (CodSub gu gU gU_^)

;; #source file ./ott/lang_simple.ott  lines 1944 - 1947 
 [(GHsub x gU_11 gu gU_22 gU_22^)
  ------------------------------------------------ "CodSubPi"
  (CodSub gu (CanonicalPi x gU_11 gU_22) gU_22^)]

;; #source file ./ott/lang_simple.ott  lines 1948 - 1950 
 [--------------------------------------- "CodSubDyn"
  (CodSub gu CanonicalDyn CanonicalDyn)]

)
(define-judgment-form L 
 
  #:mode (BodySub I I I O)
  #:contract (BodySub gU gu gu_22 gu_33)

;; #source file ./ott/lang_simple.ott  lines 1976 - 1979 
 [(GHsub x gU gu gu_22 gu_22^)
  ------------------------------------------------- "BodySubPi"
  (BodySub gU gu  (CanonicalLam x gu_22)  gu_22^)]

;; #source file ./ott/lang_simple.ott  lines 1980 - 1982 
 [------------------------------------------- "BodySubDyn"
  (BodySub gU gu CanonicalDyn CanonicalDyn)]
)
;; #source file ./ott/lang_simple.ott  lines 1984 - 1995 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Well-formedness checks for gradual canonical forms
;; GradualSet checks if there's some (Set i) that a given type checks against
;; WF checks if an environment is well formed (i.e. if each type in it checks against some Set i)
;; GCSynth synthesizes types for atomic (neutral) forms
;; And GCCheck checks a canonical form against a given type
;;
;; Consistent checks if two types are consistent i.e. equal, except for possible occurrences of ?
;; ConsistentSet checks if a type is (Set i) or ?. Used in type-checking Pi-types.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;; definitions 

(define-judgment-form
  L
  #:mode (GradualSet I I)
  #:contract (GradualSet Gamma gU)

;; #source file ./ott/lang_simple.ott  lines 2008 - 2011 
 [
  (GCSynth Gamma grr CanonicalDyn)
  ------------------------------------------ "GradualSetDynTy"
  (GradualSet Gamma (CanonicalAtomic grr))]

;; #source file ./ott/lang_simple.ott  lines 2012 - 2015 
 [
  (GCSynth Gamma grr (CanonicalAtomic (AtomicSet i)))
  ------------------------------------------ "GradualSetSet"
  (GradualSet Gamma (CanonicalAtomic grr))]

;; #source file ./ott/lang_simple.ott  lines 2018 - 2023 
 [
  (GradualSet Gamma gU_11)
    
  (GradualSet (EnvExt x gU_11 Gamma) gU_22)
  ------------------------------------------------ "GradualSetPi"
  (GradualSet Gamma (CanonicalPi x gU_11 gU_22))]

;; #source file ./ott/lang_simple.ott  lines 2025 - 2027 
 [
  --------------------------------- "GradualSetDynVal"
  (GradualSet Gamma CanonicalDyn)]

)
(define-judgment-form L 
 
  #:mode (WF I)
  #:contract (WF Gamma)

;; #source file ./ott/lang_simple.ott  lines 2033 - 2035 
 [--------------- "WFEmpty"
  (WF EnvEmpty)]

;; #source file ./ott/lang_simple.ott  lines 2036 - 2040 
 [
   (WF Gamma)   (GradualSet Gamma gU) 
  (GVarFree x Gamma)
  -------------------------- "WFExt"
  (WF (EnvExt x gU Gamma))]

)
(define-judgment-form L 
 
  #:mode (GCSynth I I O)
  #:contract (GCSynth Gamma grr gU)

;; #source file ./ott/lang_simple.ott  lines 2046 - 2049 
 [
   (side-condition ,(> (term  i ) 0)) 
  --------------------------------------------------------------------------- "GCSynthSet"
  (GCSynth Gamma (AtomicSet i) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 2051 - 2055 
 [
    
  (GVarLook x gU Gamma)
  --------------------------------------------------- "GCSynthVar"
  (GCSynth Gamma  (AtomicSpine  x  SpineEmpty)  gU)]

;; #source file ./ott/lang_simple.ott  lines 2059 - 2066 
 [
  (GCSynth Gamma (AtomicSpine x ge) gU)
  (Domain gU gU_22)
  (GCCheck Gamma gu gU_22)
  (CodSub gu gU gU_33)
  --------------------------------------------------------- "GCSynthApp"
  (GCSynth Gamma (AtomicSpine x (SpineCons ge gu)) gU_33)]

;; #source file ./ott/lang_simple.ott  lines 2067 - 2069 
 [
  ------------------------------------------------------------- "GCSynthNat"
  (GCSynth Gamma AtomicNat (CanonicalAtomic (AtomicSet  1 )))]

;; #source file ./ott/lang_simple.ott  lines 2070 - 2072 
 [
  -------------------------------------------------------- "GCSynthZero"
  (GCSynth Gamma AtomicZero (CanonicalAtomic AtomicNat))]

;; #source file ./ott/lang_simple.ott  lines 2073 - 2076 
 [
  (GCCheck Gamma gu (CanonicalAtomic AtomicNat))
  ------------------------------------------------------------- "GCSynthSucc"
  (GCSynth Gamma (AtomicSucc gu) (CanonicalAtomic AtomicNat))]

;; #source file ./ott/lang_simple.ott  lines 2077 - 2088 
 [
   (where   y  ,(gensym)) 
  (GCCheck Gamma (CanonicalAtomic (AtomicSpine x ge)) (CanonicalAtomic AtomicNat))
  (GCCheck Gamma gU (CanonicalPi y (CanonicalAtomic AtomicNat) (CanonicalAtomic (AtomicSet i))))
  (BodySub (CanonicalAtomic AtomicNat) (CanonicalAtomic AtomicZero) gU gU_22)
  (GCCheck Gamma gu_22 gU_22)
  (BodySub (CanonicalAtomic AtomicNat) (CanonicalAtomic  (AtomicSpine  x_11  SpineEmpty) ) gU gU_33^)
  (BodySub (CanonicalAtomic AtomicNat) (CanonicalAtomic (AtomicSucc (CanonicalAtomic  (AtomicSpine  x_11  SpineEmpty) ))) gU gU_33)
  (GCCheck (EnvExt x_22 gU_33^ (EnvExt x_11 (CanonicalAtomic AtomicNat) Gamma)) gu_33 gU_33)
  (BodySub (CanonicalAtomic AtomicNat) (CanonicalAtomic (AtomicSpine x ge)) gU gU_44)
  ------------------------------------------------------------------------------------ "GCSynthNatElim"
  (GCSynth Gamma (AtomicSpine x (SpineNatElim ge i gU gu_22 x_11 x_22 gu_33)) gU_44)]

;; #source file ./ott/lang_simple.ott  lines 2089 - 2093 
 [
  (GCCheck Gamma gU (CanonicalAtomic (AtomicSet  1 )))
  (GCCheck Gamma gu (CanonicalAtomic AtomicNat))
  --------------------------------------------------------------------- "GCSynthVec"
  (GCSynth Gamma (AtomicVec gU gu) (CanonicalAtomic (AtomicSet  1 )))]

;; #source file ./ott/lang_simple.ott  lines 2094 - 2097 
 [
  (GCCheck Gamma gU (CanonicalAtomic (AtomicSet  1 )))
  ---------------------------------------------------------------------------------------------- "GCSynthNil"
  (GCSynth Gamma (AtomicNil gU) (CanonicalAtomic (AtomicVec gU (CanonicalAtomic AtomicZero))))]

;; #source file ./ott/lang_simple.ott  lines 2098 - 2104 
 [
  (GCCheck Gamma gU (CanonicalAtomic (AtomicSet  1 )))
  (GCCheck Gamma gu_11 (CanonicalAtomic AtomicNat))
  (GCCheck Gamma gu_22 gU)
  (GCCheck Gamma gu_33 (CanonicalAtomic (AtomicVec gU gu_11)))
  --------------------------------------------------------------------------------------------------------------------------- "GCSynthCons"
  (GCSynth Gamma (AtomicCons gU gu_11 gu_22 gu_33) (CanonicalAtomic (AtomicVec gU (CanonicalAtomic  (AtomicSucc gu_11) ))))]

;; #source file ./ott/lang_simple.ott  lines 2105 - 2123 
 [
   (where   y_11  ,(gensym)) 
   (where   y_22  ,(gensym)) 
  (GCCheck Gamma gU_11 (CanonicalAtomic (AtomicSet  1 )))
  (GCCheck Gamma gu_22 (CanonicalAtomic AtomicNat))
  (GCCheck Gamma (CanonicalAtomic (AtomicSpine x ge)) (CanonicalAtomic (AtomicVec gU_11 gu_22)))
  (GCCheck Gamma gU_22 (CanonicalPi y_11 (CanonicalAtomic AtomicNat) (CanonicalPi y_22 (CanonicalAtomic (AtomicVec gU_11 (CanonicalAtomic  (AtomicSpine  y_22  SpineEmpty) ))) (CanonicalAtomic (AtomicSet i)))))
  (BodySub (CanonicalAtomic AtomicNat) (CanonicalAtomic AtomicZero) gU_22 gU_33^)
  (BodySub (CanonicalAtomic (AtomicVec gU_11 (CanonicalAtomic AtomicZero))) (CanonicalAtomic (AtomicNil gU_11)) gU_33^ gU_33)
  (GCCheck Gamma gu_33 gU_33)
  (BodySub (CanonicalAtomic AtomicNat) (CanonicalAtomic  (AtomicSpine  x_11  SpineEmpty) ) gU_22 gU_4141^)
  (BodySub (CanonicalAtomic (AtomicVec gU_11 (CanonicalAtomic  (AtomicSpine  x_11  SpineEmpty) ))) (CanonicalAtomic  (AtomicSpine  x_33  SpineEmpty) ) gU_4141^ gU_4141)
  (BodySub (CanonicalAtomic AtomicNat) (CanonicalAtomic  (AtomicSucc (CanonicalAtomic  (AtomicSpine  x_11  SpineEmpty) )) ) gU_22 gU_4242^)
  (BodySub (CanonicalAtomic (AtomicVec gU_11 (CanonicalAtomic  (AtomicSucc (CanonicalAtomic  (AtomicSpine  x_11  SpineEmpty) )) ))) (CanonicalAtomic (AtomicCons gU_11 (CanonicalAtomic  (AtomicSpine  x_11  SpineEmpty) ) (CanonicalAtomic  (AtomicSpine  x_22  SpineEmpty) ) (CanonicalAtomic  (AtomicSpine  x_33  SpineEmpty) ))) gU_4242^ gU_4242)
  (GCCheck (EnvExt x_44 gU_4141 (EnvExt x_33 (CanonicalAtomic (AtomicVec gU_11 (CanonicalAtomic  (AtomicSpine  x_11  SpineEmpty) ))) (EnvExt x_22 gU_11 (EnvExt x_11 (CanonicalAtomic AtomicNat) Gamma)))) gu_44 gU_4242)
  (BodySub (CanonicalAtomic AtomicNat) gu_22 gU_22 gU_55^)
  (BodySub (CanonicalAtomic (AtomicVec gU_11 gu_22)) (CanonicalAtomic (AtomicSpine x ge)) gU_55^ gU_55)
  ------------------------------------------------------------------------------------------------------------- "GCSynthVecElim"
  (GCSynth Gamma (AtomicSpine x (SpineVecElim ge i gU_11 gu_22 gU_22 gu_33 x_11 x_22 x_33 x_44 gu_44)) gU_55)]

;; #source file ./ott/lang_simple.ott  lines 2124 - 2129 
 [
  (GCCheck Gamma gU (CanonicalAtomic (AtomicSet  1 )))
  (GCCheck Gamma gu_11 gU)
  (GCCheck Gamma gu_22 gU)
  ----------------------------------------------------------------------------- "GCSynthEq"
  (GCSynth Gamma (AtomicEq gU gu_11 gu_22) (CanonicalAtomic (AtomicSet  1 )))]

;; #source file ./ott/lang_simple.ott  lines 2130 - 2134 
 [
  (GCCheck Gamma gU (CanonicalAtomic (AtomicSet  1 )))
  (GCCheck Gamma gu gU)
  -------------------------------------------------------------------------- "GCSynthRefl"
  (GCSynth Gamma (AtomicRefl gU gu) (CanonicalAtomic (AtomicEq gU gu gu)))]

;; #source file ./ott/lang_simple.ott  lines 2135 - 2152 
 [
   (where   z_11  ,(gensym)) 
   (where   z_22  ,(gensym)) 
   (where   z_33  ,(gensym)) 
  (GCCheck Gamma gU_11 (CanonicalAtomic (AtomicSet  1 )))
  (GCCheck Gamma gU_22 (CanonicalPi z_11 gU_11 (CanonicalPi z_22 gU_11 (CanonicalPi z_33 (CanonicalAtomic (AtomicEq gU_11 (CanonicalAtomic  (AtomicSpine  z_11  SpineEmpty) ) (CanonicalAtomic  (AtomicSpine  z_22  SpineEmpty) ))) (CanonicalAtomic (AtomicSet i))))))
  (BodySub gU_11 (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) gU_22 gU_33^)
  (BodySub gU_11 (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) gU_33^ gU_33^^)
  (BodySub gU_11 (CanonicalAtomic (AtomicRefl gU_11 (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ))) gU_33^^ gU_33)
  (GCCheck (EnvExt y gU_11 Gamma) gu_22 gU_33)
  (GCCheck Gamma gu_33 gU_11)
  (GCCheck Gamma gu_44 gU_11)
  (GCCheck Gamma (CanonicalAtomic (AtomicSpine x ge)) (CanonicalAtomic (AtomicEq gU_11 gu_33 gu_44)))
  (BodySub gU_11 gu_33 gU_22 gU_44^)
  (BodySub gU_11 gu_44 gU_33^ gU_44^^)
  (BodySub gU_11 (CanonicalAtomic (AtomicSpine x ge)) gU_44^^ gU_44)
  ------------------------------------------------------------------------------------------ "GCSynthEqElim"
  (GCSynth Gamma (AtomicSpine x (SpineEqElim ge i gU_11 gU_22 y gu_22 gu_33 gu_44)) gU_44)]

)
(define-judgment-form L 
 
  #:mode (GCCheck I I I)
  #:contract (GCCheck Gamma gu gU)

;; #source file ./ott/lang_simple.ott  lines 2159 - 2163 
 [
  (GCSynth Gamma grr gU)
  (Consistent gU gU_^)
  -------------------------------------------- "GCCheckSynth"
  (GCCheck Gamma (CanonicalAtomic grr) gU_^)]

;; #source file ./ott/lang_simple.ott  lines 2164 - 2168 
 [
  (GCSynth Gamma gRR (CanonicalAtomic (AtomicSet i)))
   (side-condition ,(and (< 0 (term  i )) (<= (term  i ) (term  j )))) 
  ----------------------------------------------------------------------- "GCCheckLevel"
  (GCCheck Gamma (CanonicalAtomic gRR) (CanonicalAtomic (AtomicSet j)))]

;; #source file ./ott/lang_simple.ott  lines 2170 - 2174 

;; #source file ./ott/lang_simple.ott  lines 2176 - 2181 
 [
   (where   z  ,(gensym)) 
    
  (GCCheck (EnvExt z gU_11 Gamma)  (substitute  gu   x   z )   (substitute  gU_22   y   z ) )
  ------------------------------------------------------------------- "GCCheckLamPiRdxAlpha"
  (GCCheck Gamma  (CanonicalLam x gu)  (CanonicalPi y gU_11 gU_22))]

;; #source file ./ott/lang_simple.ott  lines 2182 - 2186 
 [
    
  (GCCheck (EnvExt x CanonicalDyn Gamma) gu CanonicalDyn)
  ---------------------------------------------------- "GCCheckLamDyn"
  (GCCheck Gamma  (CanonicalLam x gu)  CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 2187 - 2193 
 [
  (ConsistentSet gU_33)
  (GCCheck Gamma gU_11 gU_33)
    
  (GCCheck (EnvExt x gU_11 Gamma) gU_22 gU_33)
  --------------------------------------------------- "GCCheckPi"
  (GCCheck Gamma (CanonicalPi x gU_11 gU_22) gU_33)]

;; #source file ./ott/lang_simple.ott  lines 2195 - 2198 
 [
  (GradualSet Gamma gU)
  --------------------------------- "GCCheckDyn"
  (GCCheck Gamma CanonicalDyn gU)]

)
(define-judgment-form L 
 
  #:mode (ConsistentSet I)
  #:contract (ConsistentSet gU)

;; #source file ./ott/lang_simple.ott  lines 2206 - 2208 
 [------------------------------------------------- "ConsistentSetSet"
  (ConsistentSet (CanonicalAtomic (AtomicSet i)))]

;; #source file ./ott/lang_simple.ott  lines 2209 - 2211 
 [------------------------------ "ConsistentSetDyn"
  (ConsistentSet CanonicalDyn)]

)
(define-judgment-form L 
 
  #:mode (Consistent I I)
  #:contract (Consistent gU gU_^)

;; #source file ./ott/lang_simple.ott  lines 2221 - 2223 
 [-------------------- "ConsistentEq"
  (Consistent gu gu)]

;; #source file ./ott/lang_simple.ott  lines 2224 - 2228 

;; #source file ./ott/lang_simple.ott  lines 2230 - 2235 
 [ (where   z  ,(gensym)) 
  (Consistent gU_11 gU_11^)
  (Consistent  (substitute  gU_22   x   z )   (substitute  gU_22^   y   z ) )
  ------------------------------------------------------------------------ "ConsistentPiRdxAlpha"
  (Consistent (CanonicalPi x gU_11 gU_22) (CanonicalPi y gU_11^ gU_22^))]

;; #source file ./ott/lang_simple.ott  lines 2236 - 2239 

;; #source file ./ott/lang_simple.ott  lines 2241 - 2245 
 [ (where   z  ,(gensym)) 
  (Consistent  (substitute  gu   x   z )   (substitute  gu_^   y   z ) )
  ------------------------------------------------------------ "ConsistentLamRdxAlpha"
  (Consistent  (CanonicalLam x gu)   (CanonicalLam y gu_^) )]

;; #source file ./ott/lang_simple.ott  lines 2246 - 2250 
 [(Consistent (CanonicalAtomic (AtomicSpine x ge)) (CanonicalAtomic (AtomicSpine x ge_^)))
  (Consistent gu gu_^)
  -------------------------------------------------------------------------------------------------------------------------- "ConsistentApp"
  (Consistent (CanonicalAtomic (AtomicSpine x (SpineCons ge gu))) (CanonicalAtomic (AtomicSpine x (SpineCons ge_^ gu_^))))]

;; #source file ./ott/lang_simple.ott  lines 2251 - 2253 
 [------------------------------ "ConsistentDynL"
  (Consistent CanonicalDyn gu)]

;; #source file ./ott/lang_simple.ott  lines 2254 - 2256 
 [------------------------------ "ConsistentDynR"
  (Consistent gu CanonicalDyn)]
)
;; #source file ./ott/lang_simple.ott  lines 2257 - 2262 

;;;;;;;;;;
;; The meet of two pieces of evidence is just the meet of the wrapped types
;;;;;;;;;;;

;;; definitions 

(define-judgment-form
  L
  #:mode (EvMeet I I O)
  #:contract (EvMeet ep_11 ep_22 ep_33)

;; #source file ./ott/lang_simple.ott  lines 2272 - 2275 
 [(Meet gU_11 gU_22 gU_33)
  ------------------------------------------------------------------- "EvMeetUnwrap"
  (EvMeet (EvidenceEv gU_11) (EvidenceEv gU_22) (EvidenceEv gU_33))]
)
;; #source file ./ott/lang_simple.ott  lines 2276 - 2276 


;;;;;;;;;;;;;;;;;;
;; Judgment-form version of Meet and our precision operation
;;;;;;;;;;;;;;;;;;

(define-judgment-form L 
 
  #:mode (Meet I I O)
  #:contract (Meet gU_11 gU_22 gU_33)

  [
  (where gU_3 ,(meet (term gU_1) (term gU_2)))
  ---------------------------------
  (Meet gU_1 gU_2 gU_3)
  ]

)

(define-judgment-form L 
 
  #:mode (MorePrecise I I)
  #:contract (MorePrecise gU gU_^)

  [
  (Meet gU_1 gU_2 gU_1)
  ---------------------------------
  (MorePrecise gU_1 gU_2)
  ]

)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Definitions for whether a term (not canonical form) is more precise than another
;; Used to express our version of the gradual guarantee.
;;
;; Additionally, we define EvConsistent tests whether ep is evidence that gU1 ~=~ gU2
;; It does so by seeing if ep is a wrapper around a type more precise than another
;; This is used when checking our evidence terms
;; TODO: get evidence-term typing working in Redex
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

 

;;; definitions 

(define-judgment-form
  L
  #:mode (TermPrecise I I)
  #:contract (TermPrecise gt gt_^)

;; #source file ./ott/lang_simple.ott  lines 2423 - 2427 

;; #source file ./ott/lang_simple.ott  lines 2431 - 2434 

;; #source file ./ott/lang_simple.ott  lines 2437 - 2441 
 [
  
  (TermPrecise gt_11 gt_11^)
  (TermPrecise gt_22 gt_22^)
  ------------------------------------------------------------- "TermPreciseApp"
  (TermPrecise (TermApp gt_11 gt_22) (TermApp gt_11^ gt_22^))]

;; #source file ./ott/lang_simple.ott  lines 2442 - 2446 
 [
  
  (TermPrecise gt_11 gt_22)
  (TermPrecise gT_11 gT_22)
  ----------------------------------------------------------- "TermPreciseAscr"
  (TermPrecise (TermAnn gt_11 gT_11) (TermAnn gt_22 gT_22))]

;; #source file ./ott/lang_simple.ott  lines 2447 - 2450 
 [
  -------------------------- "TermPreciseDyn"
  (TermPrecise gt TermDyn)]

;; #source file ./ott/lang_simple.ott  lines 2451 - 2453 
 [--------------------- "TermPreciseRefl"
  (TermPrecise gT gT)]

)
(define-judgment-form L 
 
  #:mode (EvPrecise I I)
  #:contract (EvPrecise ep ep_^)

;; #source file ./ott/lang_simple.ott  lines 2460 - 2463 
 [(MorePrecise gU gU_^)
  ----------------------------------------------- "EvPreciseUnwrap"
  (EvPrecise (EvidenceEv gU) (EvidenceEv gU_^))]

)
(define-judgment-form L 
 
  #:mode (EvTermPrecise I I)
  #:contract (EvTermPrecise et et_^)

;; #source file ./ott/lang_simple.ott  lines 2470 - 2474 

;; #source file ./ott/lang_simple.ott  lines 2477 - 2480 

;; #source file ./ott/lang_simple.ott  lines 2482 - 2486 
 [
  
  (EvTermPrecise et_11 et_11^)
  (EvTermPrecise et_22 et_22^)
  --------------------------------------------------------------- "EvTermPreciseApp"
  (EvTermPrecise (TermApp et_11 et_22) (TermApp et_11^ et_22^))]

;; #source file ./ott/lang_simple.ott  lines 2487 - 2491 
 [
  
  (EvTermPrecise et_11 et_22)
  (EvPrecise ep_11 ep_22)
  ----------------------------------------------------------- "EvTermPreciseAscr"
  (EvTermPrecise (TermEp ep_11 et_11) (TermEp ep_22 et_22))]

;; #source file ./ott/lang_simple.ott  lines 2492 - 2494 
 [---------------------------- "EvTermPreciseDyn"
  (EvTermPrecise eT TermDyn)]

;; #source file ./ott/lang_simple.ott  lines 2495 - 2497 
 [------------------------------ "EvTermPreciseErr"
  (EvTermPrecise TermError eT)]

;; #source file ./ott/lang_simple.ott  lines 2498 - 2500 
 [----------------------- "EvTermPreciseRefl"
  (EvTermPrecise eT eT)]

)
(define-judgment-form L 
 
  #:mode (EvConsistent I I I)
  #:contract (EvConsistent ep gU gU_^)

;; #source file ./ott/lang_simple.ott  lines 2507 - 2511 
 [(Meet gU_11 gU_22 gU_33)
  (MorePrecise gU gU_33)
  -------------------------------------------- "EvConsistentDef"
  (EvConsistent (EvidenceEv gU) gU_11 gU_22)]
)
;; #source file ./ott/lang_simple.ott  lines 2512 - 2512 
 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Type-checking judgments for gradual terms
;; GSynth computes the type for the given term
;; GSynth checks a term against the given type
;; The gtSynth syntactic class speeds up pattern matching by restricting us to terms that can synthesize

;;GradualSetNorm computes the normal form for a term while checking that it types against some (Set i)
;;GNSynth and GNCheck are like GSynth and GCheck, but produce an (approximate) normal form for the given term.

;; The GEta judgments to help with eta-expanding terms and neutrals
;; so that we always produce eta-long normal forms

;; GElabSynth and GElabCheck are like GSynth and GCheck, but elaborate the given term
;; into an evidence term that we can run.
;; The main change is that we drop annotations, and ascribe initial evidence wherever
;; we apply the consistency relation during typechecking, so that its applications are explicit
;; in the terms. 
;; All functons and ? occurrences are also ascribed with evidence.

;; GradualNESynth and GradualNECheck perform normalization and elaboration simultaneously,
;; which sometimes speeds us up to avoid duplicate traversals

;; The GradualSynthCheck judgments (for normalization, elaboration, and combined)
;; are optimizations to avoid computing the synthesized type of a term twice
;; when checking if we should apply universe cumulativity or consistency
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;; definitions 

(define-judgment-form
  L
  #:mode (GSynth I I O)
  #:contract (GSynth Gamma gtSynth gU)

;; #source file ./ott/lang_simple.ott  lines 2580 - 2584 
 [
  
  (GradualSetNorm Gamma gU gT)
  (GCheck Gamma gt gU)
  ------------------------------------- "GSynthAnn"
  (GSynth Gamma  (TermAnn gt gT)  gU)]

;; #source file ./ott/lang_simple.ott  lines 2585 - 2588 
 [
   (side-condition ,(> (term  i ) 0)) 
  ------------------------------------------------------------------------ "GSynthSet"
  (GSynth Gamma (TermSet i) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 2590 - 2594 
 [
  (GVarLook x gU Gamma)
    
  ------------------------------- "GSynthVar"
  (GSynth Gamma x gU)]

;; #source file ./ott/lang_simple.ott  lines 2599 - 2604 
 [
  
   (GSynth Gamma gtSynth_11 gU)      
    (Domain gU gU_^)   (GNCheck Gamma gu gt_22 gU_^)  
  (CodSub gu gU gU_22)
  ------------------------------------------------- "GSynthApp"
  (GSynth Gamma (TermApp gtSynth_11 gt_22) gU_22)]

;; #source file ./ott/lang_simple.ott  lines 2605 - 2608 
 [
  ------------------------------------- "GSynthDyn"
  (GSynth Gamma TermDyn CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 2609 - 2611 
 [
  ---------------------------------------------------------- "GSynthNat"
  (GSynth Gamma TermNat (CanonicalAtomic (AtomicSet  1 )))]

;; #source file ./ott/lang_simple.ott  lines 2612 - 2614 
 [
  ----------------------------------------------------- "GSynthZero"
  (GSynth Gamma TermZero (CanonicalAtomic AtomicNat))]

;; #source file ./ott/lang_simple.ott  lines 2615 - 2618 
 [
  
  (GCheck Gamma gt (CanonicalAtomic AtomicNat))
  ---------------------------------------------------------- "GSynthSucc"
  (GSynth Gamma (TermSucc gt) (CanonicalAtomic AtomicNat))]

;; #source file ./ott/lang_simple.ott  lines 2619 - 2630 
 [
  
   (where   y  ,(gensym)) 
  (GNCheck Gamma gu_11 gt_11 (CanonicalAtomic AtomicNat))
  (GNCheck Gamma gU gT (CanonicalPi y (CanonicalAtomic AtomicNat) (CanonicalAtomic (AtomicSet i))))
  (BodySub (CanonicalAtomic AtomicNat) (CanonicalAtomic AtomicZero) gU gU_22)
  (GCheck Gamma gt_22 gU_22)
  (BodySub (CanonicalAtomic AtomicNat) (CanonicalAtomic  (AtomicSpine  x_11  SpineEmpty) ) gU gU_33^)
  (BodySub (CanonicalAtomic AtomicNat) (CanonicalAtomic (AtomicSucc (CanonicalAtomic  (AtomicSpine  x_11  SpineEmpty) ))) gU gU_33)
  (GCheck (EnvExt x_22 gU_33^ (EnvExt x_11 (CanonicalAtomic AtomicNat) Gamma)) gt_33 gU_33)
  (BodySub (CanonicalAtomic AtomicNat) gu_11 gU gU_44)
  --------------------------------------------------------------------- "GSynthNatElim"
  (GSynth Gamma (TermNatElim i gt_11 gT gt_22 x_11 x_22 gt_33) gU_44)]

;; #source file ./ott/lang_simple.ott  lines 2632 - 2636 
 [
  
  (GCheck Gamma gT (CanonicalAtomic (AtomicSet  1 )))
  (GCheck Gamma gt (CanonicalAtomic AtomicNat))
  ------------------------------------------------------------------ "GSynthVec"
  (GSynth Gamma (TermVec gT gt) (CanonicalAtomic (AtomicSet  1 )))]

;; #source file ./ott/lang_simple.ott  lines 2637 - 2640 
 [
  
  (GNCheck Gamma gU gT (CanonicalAtomic (AtomicSet  1 )))
  ------------------------------------------------------------------------------------------- "GSynthNil"
  (GSynth Gamma (TermNil gT) (CanonicalAtomic (AtomicVec gU (CanonicalAtomic AtomicZero))))]

;; #source file ./ott/lang_simple.ott  lines 2641 - 2647 
 [
  
  (GNCheck Gamma gU gT (CanonicalAtomic (AtomicSet  1 )))
  (GNCheck Gamma gu_11 gt_11 (CanonicalAtomic AtomicNat))
  (GCheck Gamma gt_22 gU)
  (GCheck Gamma gt_33 (CanonicalAtomic (AtomicVec gU gu_11)))
  ------------------------------------------------------------------------------------------------------------------------ "GSynthCons"
  (GSynth Gamma (TermCons gT gt_11 gt_22 gt_33) (CanonicalAtomic (AtomicVec gU (CanonicalAtomic  (AtomicSucc gu_11) ))))]

;; #source file ./ott/lang_simple.ott  lines 2648 - 2666 
 [
  
   (where   y_11  ,(gensym)) 
   (where   y_22  ,(gensym)) 
  (GNCheck Gamma gU_11 gT_11 (CanonicalAtomic (AtomicSet  1 )))
  (GNCheck Gamma gu_22 gt_22 (CanonicalAtomic AtomicNat))
  (GNCheck Gamma gu_11 gt_11 (CanonicalAtomic (AtomicVec gU_11 gu_22)))
  (GNCheck Gamma gU_22 gT_22 (CanonicalPi y_11 (CanonicalAtomic AtomicNat) (CanonicalPi y_22 (CanonicalAtomic (AtomicVec gU_11 (CanonicalAtomic  (AtomicSpine  y_22  SpineEmpty) ))) (CanonicalAtomic (AtomicSet i)))))
  (BodySub (CanonicalAtomic AtomicNat) (CanonicalAtomic AtomicZero) gU_22 gU_33^)
  (BodySub (CanonicalAtomic (AtomicVec gU_11 (CanonicalAtomic AtomicZero))) (CanonicalAtomic (AtomicNil gU_11)) gU_33^ gU_33)
  (GCheck Gamma gt_33 gU_33)
  (BodySub (CanonicalAtomic AtomicNat) (CanonicalAtomic  (AtomicSpine  x_11  SpineEmpty) ) gU_22 gU_4141^)
  (BodySub (CanonicalAtomic (AtomicVec gU_11 (CanonicalAtomic  (AtomicSpine  x_11  SpineEmpty) ))) (CanonicalAtomic  (AtomicSpine  x_33  SpineEmpty) ) gU_4141^ gU_4141)
  (BodySub (CanonicalAtomic AtomicNat) (CanonicalAtomic  (AtomicSucc (CanonicalAtomic  (AtomicSpine  x_11  SpineEmpty) )) ) gU_22 gU_4242^)
  (BodySub (CanonicalAtomic (AtomicVec gU_11 (CanonicalAtomic  (AtomicSucc (CanonicalAtomic  (AtomicSpine  x_11  SpineEmpty) )) ))) (CanonicalAtomic (AtomicCons gU_11 (CanonicalAtomic  (AtomicSpine  x_11  SpineEmpty) ) (CanonicalAtomic  (AtomicSpine  x_22  SpineEmpty) ) (CanonicalAtomic  (AtomicSpine  x_33  SpineEmpty) ))) gU_4242^ gU_4242)
  (GCheck (EnvExt x_44 gU_4141 (EnvExt x_33 (CanonicalAtomic (AtomicVec gU_11 (CanonicalAtomic  (AtomicSpine  x_11  SpineEmpty) ))) (EnvExt x_22 gU_11 (EnvExt x_11 (CanonicalAtomic AtomicNat) Gamma)))) gt_44 gU_4242)
  (BodySub (CanonicalAtomic AtomicNat) gu_22 gU_22 gU_55^)
  (BodySub (CanonicalAtomic (AtomicVec gU_11 gu_22)) gu_11 gU_55^ gU_55)
  ---------------------------------------------------------------------------------------------- "GSynthVecElim"
  (GSynth Gamma (TermVecElim i gt_11 gT_11 gt_22 gT_22 gt_33 x_11 x_22 x_33 x_44 gt_44) gU_55)]

;; #source file ./ott/lang_simple.ott  lines 2667 - 2672 
 [
  
  (GNCheck Gamma gU gT (CanonicalAtomic (AtomicSet  1 )))
  (GCheck Gamma gt_11 gU)
  (GCheck Gamma gt_22 gU)
  -------------------------------------------------------------------------- "GSynthEq"
  (GSynth Gamma (TermEq gT gt_11 gt_22) (CanonicalAtomic (AtomicSet  1 )))]

;; #source file ./ott/lang_simple.ott  lines 2673 - 2677 
 [
  
  (GNCheck Gamma gU gT (CanonicalAtomic (AtomicSet  1 )))
  (GNCheck Gamma gu gt gU)
  ----------------------------------------------------------------------- "GSynthRefl"
  (GSynth Gamma (TermRefl gT gt) (CanonicalAtomic (AtomicEq gU gu gu)))]

;; #source file ./ott/lang_simple.ott  lines 2678 - 2695 
 [
  
   (where   z_11  ,(gensym)) 
   (where   z_22  ,(gensym)) 
   (where   z_33  ,(gensym)) 
  (GNCheck Gamma gU_11 gT_11 (CanonicalAtomic (AtomicSet  1 )))
  (GNCheck Gamma gU_22 gT_22 (CanonicalPi z_11 gU_11 (CanonicalPi z_22 gU_11 (CanonicalPi z_33 (CanonicalAtomic (AtomicEq gU_11 (CanonicalAtomic  (AtomicSpine  z_11  SpineEmpty) ) (CanonicalAtomic  (AtomicSpine  z_22  SpineEmpty) ))) (CanonicalAtomic (AtomicSet i))))))
  (BodySub gU_11 (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) gU_22 gU_33^)
  (BodySub gU_11 (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) gU_33^ gU_33^^)
  (BodySub gU_11 (CanonicalAtomic (AtomicRefl gU_11 (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ))) gU_33^^ gU_33)
  (GCheck (EnvExt y gU_11 Gamma) gt_22 gU_33)
  (GNCheck Gamma gu_33 gt_33 gU_11)
  (GNCheck Gamma gu_44 gt_44 gU_11)
  (GNCheck Gamma gu_11 gt_11 (CanonicalAtomic (AtomicEq gU_11 gu_33 gu_44)))
  (BodySub gU_11 gu_33 gU_22 gU_44^)
  (BodySub gU_11 gu_44 gU_33^ gU_44^^)
  (BodySub gU_11 gu_11 gU_44^^ gU_44)
  --------------------------------------------------------------------------- "GSynthEqElim"
  (GSynth Gamma (TermEqElim i gt_11 gT_11 gT_22 y gt_22 gt_33 gt_44) gU_44)]

)
(define-judgment-form L 
 
  #:mode (GCheck I I I)
  #:contract (GCheck Gamma gt gU)

;; #source file ./ott/lang_simple.ott  lines 2709 - 2714 
 [
  
  (GSynth Gamma gtSynth gU_^)
  (Consistent gU_^ gU)
  --------------------------- "GCheckSynth"
  (GCheck Gamma gtSynth gU)]

;; #source file ./ott/lang_simple.ott  lines 2715 - 2720 
 [
  (GSynth Gamma gTSynth (CanonicalAtomic (AtomicSet i)))
   (side-condition ,(and (< 0 (term  i )) (<= (term  i ) (term  j )))) 
  -------------------------------------------------------- "GCheckLevel"
  (GCheck Gamma gTSynth (CanonicalAtomic (AtomicSet j)))]

;; #source file ./ott/lang_simple.ott  lines 2729 - 2733 
 [
  
   (GNCheck Gamma gU_^ gT_11 gU)   (ConsistentSet gU) 
        (GCheck (EnvExt x gU_^ Gamma) gT_22 gU) 
  ------------------------------------------ "GCheckPi"
  (GCheck Gamma (TermPi x gT_11 gT_22) gU)]

;; #source file ./ott/lang_simple.ott  lines 2735 - 2739 

;; #source file ./ott/lang_simple.ott  lines 2741 - 2746 
 [
  
   (where   z  ,(gensym)) 
    
  (GCheck (EnvExt z gU_11 Gamma)  (substitute  gt   x   z )   (substitute  gU_22   y   z ) )
  ------------------------------------------------------------- "GCheckLamPiRdxAlpha"
  (GCheck Gamma  (TermLam x gt)  (CanonicalPi y gU_11 gU_22))]

;; #source file ./ott/lang_simple.ott  lines 2748 - 2752 
 [
  
    
  (GCheck (EnvExt x CanonicalDyn Gamma) gt CanonicalDyn)
  ---------------------------------------------- "GCheckLamDyn"
  (GCheck Gamma  (TermLam x gt)  CanonicalDyn)]

)
(define-judgment-form L 
 
  #:mode (GradualSetNorm I O I)
  #:contract (GradualSetNorm Gamma gU TT)

;; #source file ./ott/lang_simple.ott  lines 2770 - 2773 
 [
  
  (GNSynth Gamma TTSynth gU (CanonicalAtomic (AtomicSet i)))
  ----------------------------------- "GradualSetNormSynth"
  (GradualSetNorm Gamma gU TTSynth)]

;; #source file ./ott/lang_simple.ott  lines 2775 - 2779 
 [
  (GradualSetNorm Gamma gU_11 TT_1_1)
  (GradualSetNorm (EnvExt x gU_11 Gamma) gU_22 TT_2_2)
  ----------------------------------------------------------------------------- "GradualSetNormPi"
  (GradualSetNorm Gamma (CanonicalPi x gU_11 gU_22) (TermPi x TT_1_1 TT_2_2))]

;; #source file ./ott/lang_simple.ott  lines 2781 - 2783 
 [
  --------------------------------------------- "GradualSetNormDyn"
  (GradualSetNorm Gamma CanonicalDyn TermDyn)]

)
(define-judgment-form L 
 
  #:mode (GEtaLong I I)
  #:contract (GEtaLong gu gU)

;; #source file ./ott/lang_simple.ott  lines 2789 - 2791 
 [-------------------------------------------------------- "GEtaLongAtomic"
  (GEtaLong (CanonicalAtomic grr) (CanonicalAtomic gRR))]

;; #source file ./ott/lang_simple.ott  lines 2792 - 2794 
 [----------------------------------------------- "GEtaLongAtomicDyn"
  (GEtaLong (CanonicalAtomic grr) CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 2796 - 2799 

;; #source file ./ott/lang_simple.ott  lines 2800 - 2804 
 [ (where   z  ,(gensym)) 
  (GEtaLong  (substitute  gu   x   z )   (substitute  gU   y   z ) )
  ---------------------------------------------------------- "GEtaLongLamRdxAlpha"
  (GEtaLong  (CanonicalLam x gu)  (CanonicalPi y gU_^ gU))]

;; #source file ./ott/lang_simple.ott  lines 2805 - 2807 
 [---------------------------- "GEtaLongDyn"
  (GEtaLong CanonicalDyn gU)]

;; #source file ./ott/lang_simple.ott  lines 2808 - 2810 
 [------------------------------------------ "GEtaLongPi"
  (GEtaLong (CanonicalPi x gU gU_^) gU_^^)]

)
(define-judgment-form L 
 
  #:mode (GEtaExpand I O I)
  #:contract (GEtaExpand grr gu gU)

;; #source file ./ott/lang_simple.ott  lines 2816 - 2818 
 [-------------------------------------------------------------- "GEtaExpandAtomic"
  (GEtaExpand grr (CanonicalAtomic grr) (CanonicalAtomic gRR))]

;; #source file ./ott/lang_simple.ott  lines 2819 - 2821 
 [----------------------------------------------------- "GEtaExpandDyn"
  (GEtaExpand grr (CanonicalAtomic grr) CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 2823 - 2827 
 [(GEtaExpand  (AtomicSpine  y  SpineEmpty)  gu gU_11)
  (GEtaExpand (AtomicSpine x (SpineCons ge gu)) gu_22 gU_22)
  -------------------------------------------------------------------------------------- "GEtaExpandPi"
  (GEtaExpand (AtomicSpine x ge)  (CanonicalLam y gu_22)  (CanonicalPi y gU_11 gU_22))]

)
(define-judgment-form L 
 
  #:mode (GEtaExpandC I O I)
  #:contract (GEtaExpandC gu gu_^ gU)

;; #source file ./ott/lang_simple.ott  lines 2834 - 2837 
 [(GEtaExpand grr gu gU)
  ------------------------------------------- "GEtaExpandCAtomic"
  (GEtaExpandC (CanonicalAtomic grr) gu gU)]

;; #source file ./ott/lang_simple.ott  lines 2838 - 2841 

;; #source file ./ott/lang_simple.ott  lines 2842 - 2846 
 [ (where   z  ,(gensym)) 
  (GEtaExpandC  (substitute  gu   x   z )  gu_^  (substitute  gU_22   x   z ) )
  ----------------------------------------------------------------------------------------- "GEtaExpandCLamRdxAlpha"
  (GEtaExpandC  (CanonicalLam x gu)   (CanonicalLam z gu_^)  (CanonicalPi y gU_11 gU_22))]

;; #source file ./ott/lang_simple.ott  lines 2847 - 2851 
 [(GEtaExpandC gU_11 gU_11^ gU_^^)
  (GEtaExpandC gU_22 gU_22^ gU_^^)
  ------------------------------------------------------------------------------- "GEtaExpandCPi"
  (GEtaExpandC (CanonicalPi x gU_11 gU_22) (CanonicalPi x gU_11^ gU_22^) gU_^^)]

;; #source file ./ott/lang_simple.ott  lines 2853 - 2855 
 [-------------------------------------------- "GEtaExpandCDyn"
  (GEtaExpandC CanonicalDyn CanonicalDyn gU)]

;; #source file ./ott/lang_simple.ott  lines 2856 - 2858 
 [---------------------------------- "GEtaExpandCDynType"
  (GEtaExpandC gu gu CanonicalDyn)]

)
(define-judgment-form L 
 
  #:mode (GNSynth I I O O)
  #:contract (GNSynth Gamma tt gu gU)

;; #source file ./ott/lang_simple.ott  lines 2879 - 2883 
 [
  (GradualSetNorm Gamma gU TT)
  (GNCheck Gamma gu tt gU)
  ----------------------------------------- "GNSynthAnn"
  (GNSynth Gamma  (TermAnn tt TT)  gu gU)]

;; #source file ./ott/lang_simple.ott  lines 2884 - 2887 
 [
   (side-condition ,(> (term  i ) 0)) 
  --------------------------------------------------------------------------------------------------------- "GNSynthSet"
  (GNSynth Gamma (TermSet i) (CanonicalAtomic (AtomicSet i)) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 2889 - 2895 
 [
   (side-condition ,(not (hash-has-key? currently-defined-vars (term  x )) )) 
    
  (GVarLook x gU Gamma)
  (GEtaExpand  (AtomicSpine  x  SpineEmpty)  gu gU)
  ----------------------------------- "GNSynthVar"
  (GNSynth Gamma x gu gU)]

;; #source file ./ott/lang_simple.ott  lines 2896 - 2899 
 [
  
   (where (ENTTriple  et   gu   gU ) ,(and (hash-has-key? currently-defined-vars (term  x ) ) (hash-ref currently-defined-vars (term  x )) )) 
  ----------------------------------- "GNSynthVarLook"
  (GNSynth Gamma x gu gU)]

;; #source file ./ott/lang_simple.ott  lines 2904 - 2911 
 [
      (where   x  ,(gensym))    (GNSynth Gamma tt_11 gu_11 gU)    (GEtaExpandC gu_11 gu_11^ (CanonicalPi x CanonicalDyn CanonicalDyn))  
    
   (Domain gU gU_11)   (GNCheck Gamma gu_22 tt_22 gU_11) 
  (BodySub gU_11 gu_22 gu_11^ gu_33)
   (CodSub gu_22 gU gU_22)   (GEtaExpandC gu_33 gu_33^ gU_22) 
  ---------------------------------------------------- "GNSynthApp"
  (GNSynth Gamma (TermApp tt_11 tt_22) gu_33^ gU_22)]

;; #source file ./ott/lang_simple.ott  lines 2913 - 2916 
 [
  --------------------------------------------------- "GNSynthDyn"
  (GNSynth Gamma TermDyn CanonicalDyn CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 2917 - 2920 
 [
  
  (GNCheck Gamma gu et gU)
  --------------------------------------------------- "GNSynthEv"
  (GNSynth Gamma (TermEp (EvidenceEv gU) et) gu gU)]

;; #source file ./ott/lang_simple.ott  lines 2921 - 2923 
 [
  --------------------------------------------------------------------------------------- "GNSynthNat"
  (GNSynth Gamma TermNat (CanonicalAtomic AtomicNat) (CanonicalAtomic (AtomicSet  1 )))]

;; #source file ./ott/lang_simple.ott  lines 2924 - 2926 
 [
  ----------------------------------------------------------------------------------- "GNSynthZero"
  (GNSynth Gamma TermZero (CanonicalAtomic AtomicZero) (CanonicalAtomic AtomicNat))]

;; #source file ./ott/lang_simple.ott  lines 2927 - 2930 
 [
  (GNCheck Gamma gu tt (CanonicalAtomic AtomicNat))
  --------------------------------------------------------------------------------------------- "GNSynthSucc"
  (GNSynth Gamma (TermSucc tt) (CanonicalAtomic (AtomicSucc gu)) (CanonicalAtomic AtomicNat))]

;; #source file ./ott/lang_simple.ott  lines 2931 - 2944 
 [
   (where   y  ,(gensym)) 
  (GNCheck Gamma gu_11 tt_11 (CanonicalAtomic AtomicNat))
  (GNCheck Gamma gU TT (CanonicalPi y (CanonicalAtomic AtomicNat) (CanonicalAtomic (AtomicSet i))))
  (BodySub (CanonicalAtomic AtomicNat) (CanonicalAtomic AtomicZero) gU gU_22)
  (GNCheck Gamma gu_22 tt_22 gU_22)
  (BodySub (CanonicalAtomic AtomicNat) (CanonicalAtomic  (AtomicSpine  x_11  SpineEmpty) ) gU gU_33^)
  (BodySub (CanonicalAtomic AtomicNat) (CanonicalAtomic (AtomicSucc (CanonicalAtomic  (AtomicSpine  x_11  SpineEmpty) ))) gU gU_33)
  (GNCheck (EnvExt x_22 gU_33^ (EnvExt x_11 (CanonicalAtomic AtomicNat) Gamma)) gu_33 tt_33 gU_33)
  (BodySub (CanonicalAtomic AtomicNat) gu_11 gU gU_44)
   (where   z  ,(gensym)) 
  (GHsub z (CanonicalAtomic AtomicNat) gu_11 (CanonicalAtomic (AtomicSpine z (SpineNatElim SpineEmpty i gU gu_22 x_11 x_22 gu_33))) gu_44)
  ---------------------------------------------------------------------------- "GNSynthNatElim"
  (GNSynth Gamma (TermNatElim i tt_11 TT tt_22 x_11 x_22 tt_33) gu_44 gU_44)]

;; #source file ./ott/lang_simple.ott  lines 2946 - 2950 
 [
  (GNCheck Gamma gU TT (CanonicalAtomic (AtomicSet  1 )))
  (GNCheck Gamma gu tt (CanonicalAtomic AtomicNat))
  ------------------------------------------------------------------------------------------------------- "GNSynthVec"
  (GNSynth Gamma (TermVec TT tt) (CanonicalAtomic (AtomicVec gU gu)) (CanonicalAtomic (AtomicSet  1 )))]

;; #source file ./ott/lang_simple.ott  lines 2951 - 2954 
 [
  (GNCheck Gamma gU TT (CanonicalAtomic (AtomicSet  1 )))
  ----------------------------------------------------------------------------------------------------------------------------- "GNSynthNil"
  (GNSynth Gamma (TermNil TT) (CanonicalAtomic (AtomicNil gU)) (CanonicalAtomic (AtomicVec gU (CanonicalAtomic AtomicZero))))]

;; #source file ./ott/lang_simple.ott  lines 2955 - 2961 
 [
  (GNCheck Gamma gU TT (CanonicalAtomic (AtomicSet  1 )))
  (GNCheck Gamma gu_11 tt_11 (CanonicalAtomic AtomicNat))
  (GNCheck Gamma gu_22 tt_22 gU)
  (GNCheck Gamma gu_33 tt_33 (CanonicalAtomic (AtomicVec gU gu_11)))
  ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- "GNSynthCons"
  (GNSynth Gamma (TermCons TT tt_11 tt_22 tt_33) (CanonicalAtomic (AtomicCons gU gu_11 gu_22 gu_33)) (CanonicalAtomic (AtomicVec gU (CanonicalAtomic  (AtomicSucc gu_11) ))))]

;; #source file ./ott/lang_simple.ott  lines 2962 - 2982 
 [
   (where   y_11  ,(gensym)) 
   (where   y_22  ,(gensym)) 
  (GNCheck Gamma gU_11 TT_11 (CanonicalAtomic (AtomicSet  1 )))
  (GNCheck Gamma gu_22 tt_22 (CanonicalAtomic AtomicNat))
  (GNCheck Gamma gu_11 tt_11 (CanonicalAtomic (AtomicVec gU_11 gu_22)))
  (GNCheck Gamma gU_22 TT_22 (CanonicalPi y_11 (CanonicalAtomic AtomicNat) (CanonicalPi y_22 (CanonicalAtomic (AtomicVec gU_11 (CanonicalAtomic  (AtomicSpine  y_22  SpineEmpty) ))) (CanonicalAtomic (AtomicSet i)))))
  (BodySub (CanonicalAtomic AtomicNat) (CanonicalAtomic AtomicZero) gU_22 gU_33^)
  (BodySub (CanonicalAtomic (AtomicVec gU_11 (CanonicalAtomic AtomicZero))) (CanonicalAtomic (AtomicNil gU_11)) gU_33^ gU_33)
  (GNCheck Gamma gu_33 tt_33 gU_33)
  (BodySub (CanonicalAtomic AtomicNat) (CanonicalAtomic  (AtomicSpine  x_11  SpineEmpty) ) gU_22 gU_4141^)
  (BodySub (CanonicalAtomic (AtomicVec gU_11 (CanonicalAtomic  (AtomicSpine  x_11  SpineEmpty) ))) (CanonicalAtomic  (AtomicSpine  x_33  SpineEmpty) ) gU_4141^ gU_4141)
  (BodySub (CanonicalAtomic AtomicNat) (CanonicalAtomic  (AtomicSucc (CanonicalAtomic  (AtomicSpine  x_11  SpineEmpty) )) ) gU_22 gU_4242^)
  (BodySub (CanonicalAtomic (AtomicVec gU_11 (CanonicalAtomic  (AtomicSucc (CanonicalAtomic  (AtomicSpine  x_11  SpineEmpty) )) ))) (CanonicalAtomic (AtomicCons gU_11 (CanonicalAtomic  (AtomicSpine  x_11  SpineEmpty) ) (CanonicalAtomic  (AtomicSpine  x_22  SpineEmpty) ) (CanonicalAtomic  (AtomicSpine  x_33  SpineEmpty) ))) gU_4242^ gU_4242)
  (GNCheck (EnvExt x_44 gU_4141 (EnvExt x_33 (CanonicalAtomic (AtomicVec gU_11 (CanonicalAtomic  (AtomicSpine  x_11  SpineEmpty) ))) (EnvExt x_22 gU_11 (EnvExt x_11 (CanonicalAtomic AtomicNat) Gamma)))) gu_44 tt_44 gU_4242)
  (BodySub (CanonicalAtomic AtomicNat) gu_22 gU_22 gU_55^)
  (BodySub (CanonicalAtomic (AtomicVec gU_11 gu_22)) gu_11 gU_55^ gU_55)
   (where   z  ,(gensym)) 
  (GHsub z (CanonicalAtomic (AtomicVec gU_11 gu_22)) gu_11 (CanonicalAtomic (AtomicSpine z (SpineVecElim SpineEmpty i gU_11 gu_22 gU_22 gu_33 x_11 x_22 x_33 x_44 gu_44))) gu_55)
  ----------------------------------------------------------------------------------------------------- "GNSynthVecElim"
  (GNSynth Gamma (TermVecElim i tt_11 TT_11 tt_22 TT_22 tt_33 x_11 x_22 x_33 x_44 tt_44) gu_55 gU_55)]

;; #source file ./ott/lang_simple.ott  lines 2984 - 2989 
 [
  
  (GNCheck Gamma gU gT (CanonicalAtomic (AtomicSet  1 )))
  (GNCheck Gamma gu_11 gt_11 gU)
  (GNCheck Gamma gu_22 gt_22 gU)
  ----------------------------------------------------------------------------------------------------------------------- "GNSynthEq"
  (GNSynth Gamma (TermEq gT gt_11 gt_22) (CanonicalAtomic (AtomicEq gU gu_11 gu_22)) (CanonicalAtomic (AtomicSet  1 )))]

;; #source file ./ott/lang_simple.ott  lines 2990 - 2994 
 [
  
  (GNCheck Gamma gU gT (CanonicalAtomic (AtomicSet  1 )))
  (GNCheck Gamma gu gt gU)
  ------------------------------------------------------------------------------------------------------------- "GNSynthRefl"
  (GNSynth Gamma (TermRefl gT gt) (CanonicalAtomic (AtomicRefl gU gu)) (CanonicalAtomic (AtomicEq gU gu gu)))]

;; #source file ./ott/lang_simple.ott  lines 2995 - 3013 
 [
  
   (where   z_11  ,(gensym)) 
   (where   z_22  ,(gensym)) 
   (where   z_33  ,(gensym)) 
  (GNCheck Gamma gU_11 gT_11 (CanonicalAtomic (AtomicSet  1 )))
  (GNCheck Gamma gU_22 gT_22 (CanonicalPi z_11 gU_11 (CanonicalPi z_22 gU_11 (CanonicalPi z_33 (CanonicalAtomic (AtomicEq gU_11 (CanonicalAtomic  (AtomicSpine  z_11  SpineEmpty) ) (CanonicalAtomic  (AtomicSpine  z_22  SpineEmpty) ))) (CanonicalAtomic (AtomicSet i))))))
  (BodySub gU_11 (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) gU_22 gU_33^)
  (BodySub gU_11 (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) gU_33^ gU_33^^)
  (BodySub gU_11 (CanonicalAtomic (AtomicRefl gU_11 (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ))) gU_33^^ gU_33)
  (GNCheck (EnvExt y gU_11 Gamma) gu_22 gt_22 gU_33)
  (GNCheck Gamma gu_33 gt_33 gU_11)
  (GNCheck Gamma gu_44 gt_44 gU_11)
  (GNCheck Gamma gu_11 gt_11 (CanonicalAtomic (AtomicEq gU_11 gu_33 gu_44)))
  (BodySub gU_11 gu_33 gU_22 gU_44^)
  (BodySub gU_11 gu_44 gU_33^ gU_44^^)
  (BodySub gU_11 gu_11 gU_44^^ gU_44)
  (GHsub y (CanonicalAtomic (AtomicEq gU_11 gu_33 gu_44)) gu_11 gu_22 gu_55)
  ---------------------------------------------------------------------------------- "GNSynthEqElim"
  (GNSynth Gamma (TermEqElim i gt_11 gT_11 gT_22 y gt_22 gt_33 gt_44) gu_55 gU_44)]

)
(define-judgment-form L 
 
  #:mode (GNSynthCheck I O I I I I)
  #:contract (GNSynthCheck Gamma gu ttSynth gu_^ gU_^ gU)

;; #source file ./ott/lang_simple.ott  lines 3019 - 3022 
 [
   (side-condition ,(and (< 0 (term  i )) (<= (term  i ) (term  j )))) 
  ---------------------------------------------------------------------------------------------------- "GNSynthCheckLevel"
  (GNSynthCheck Gamma gU TTSynth gU (CanonicalAtomic (AtomicSet i)) (CanonicalAtomic (AtomicSet j)))]

;; #source file ./ott/lang_simple.ott  lines 3023 - 3028 
 [
  
   (side-condition ,(not (judgment-holds (BothSets  gU   gU_^ )) )) 
  (Meet gU gU_^ gU_^^)
   (where  gu_^  ,(if (alpha-equivalent? (term  gU_^ ) (term  gU_^^ )) (term  gu ) (term  CanonicalDyn ))) 
  ---------------------------------------------- "GNSynthCheckConsistent"
  (GNSynthCheck Gamma gu_^ ttSynth gu gU_^ gU)]

)
(define-judgment-form L 
 
  #:mode (GNCheck I O I I)
  #:contract (GNCheck Gamma gu tt gU)

;; #source file ./ott/lang_simple.ott  lines 3036 - 3040 
 [
  
  (GNSynth Gamma ttSynth gu_^ gU_^)
  (GNSynthCheck Gamma gu ttSynth gu_^ gU_^ gU)
  ------------------------------- "GNCheckSynthRdx"
  (GNCheck Gamma gu ttSynth gU)]

;; #source file ./ott/lang_simple.ott  lines 3041 - 3047 

;; #source file ./ott/lang_simple.ott  lines 3049 - 3055 

;; #source file ./ott/lang_simple.ott  lines 3056 - 3061 

;; #source file ./ott/lang_simple.ott  lines 3063 - 3071 
 [
  (ConsistentSet gU_33)
  (GNCheck Gamma gU_11 TT_11 gU_33)
    
  (GNCheck (EnvExt x gU_11 Gamma) gU_22 TT_22 gU_33)
  -------------------------------------------------------------------------- "GNCheckPi"
  (GNCheck Gamma (CanonicalPi x gU_11 gU_22) (TermPi x TT_11 TT_22) gU_33)]

;; #source file ./ott/lang_simple.ott  lines 3072 - 3076 

;; #source file ./ott/lang_simple.ott  lines 3077 - 3082 
 [
   (where   z  ,(gensym)) 
    
  (GNCheck (EnvExt z gU_11 Gamma) gu  (substitute  tt   x   z )   (substitute  gU_22   y   z ) )
  ------------------------------------------------------------------------------------ "GNCheckLamPiRdxAlpha"
  (GNCheck Gamma  (CanonicalLam z gu)   (TermLam x tt)  (CanonicalPi y gU_11 gU_22))]

;; #source file ./ott/lang_simple.ott  lines 3083 - 3087 
 [
    
  (GNCheck (EnvExt x CanonicalDyn Gamma) gu tt CanonicalDyn)
  --------------------------------------------------------------------- "GNCheckLamDyn"
  (GNCheck Gamma  (CanonicalLam x gu)   (TermLam x tt)  CanonicalDyn)]

)
(define-judgment-form L 
 
  #:mode (GElabSynth I I O O)
  #:contract (GElabSynth Gamma gtSynth et gU)

;; #source file ./ott/lang_simple.ott  lines 3110 - 3114 
 [
  
  (GradualSetNorm Gamma gU gT)
  (GElabCheck Gamma et gt gU)
  -------------------------------------------- "GElabSynthAnn"
  (GElabSynth Gamma  (TermAnn gt gT)  et gU)]

;; #source file ./ott/lang_simple.ott  lines 3115 - 3118 
 [
   (side-condition ,(> (term  i ) 0)) 
  ---------------------------------------------------------------------------------------- "GElabSynthSet"
  (GElabSynth Gamma (TermSet i) (TermSet i) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 3120 - 3125 
 [
   (side-condition ,(not (hash-has-key? currently-defined-vars (term  x )) )) 
    
  (GVarLook x gU Gamma)
  ----------------------------------------------- "GElabSynthVar"
  (GElabSynth Gamma x x gU)]

;; #source file ./ott/lang_simple.ott  lines 3126 - 3129 
 [
  
   (where (ENTTriple  et   gu   gU ) ,(and (hash-has-key? currently-defined-vars (term  x ) ) (hash-ref currently-defined-vars (term  x )) )) 
  ----------------------------------------------- "GElabSynthVarLook"
  (GElabSynth Gamma x x gU)]

;; #source file ./ott/lang_simple.ott  lines 3133 - 3139 
 [
  
  (GElabSynth Gamma gtSynth_11 et_11 gU)
  (Domain gU gU_11)
  (GradualNECheck Gamma gu et_22 gt_22 gU_11)
  (CodSub gu gU gU_22)
  ----------------------------------------------------------------------------------------------------------------------------------------------------------- "GElabSynthApp"
  (GElabSynth Gamma (TermApp gtSynth_11 gt_22) (TermApp  (TermEp (EvidenceEv  (CanonicalPi ,(gensym)  CanonicalDyn   CanonicalDyn ) ) et_11)  et_22) gU_22)]

;; #source file ./ott/lang_simple.ott  lines 3140 - 3143 
 [
  ------------------------------------------------------------------------------------ "GElabSynthDyn"
  (GElabSynth Gamma TermDyn (TermEp (EvidenceEv CanonicalDyn) TermDyn) CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 3144 - 3146 
 [
  ---------------------------------------------------------------------- "GElabSynthNat"
  (GElabSynth Gamma TermNat TermNat (CanonicalAtomic (AtomicSet  1 )))]

;; #source file ./ott/lang_simple.ott  lines 3147 - 3149 
 [
  ------------------------------------------------------------------ "GElabSynthZero"
  (GElabSynth Gamma TermZero TermZero (CanonicalAtomic AtomicNat))]

;; #source file ./ott/lang_simple.ott  lines 3150 - 3153 
 [
  
  (GElabCheck Gamma et gt (CanonicalAtomic AtomicNat))
  ---------------------------------------------------------------------------- "GElabSynthSucc"
  (GElabSynth Gamma (TermSucc gt) (TermSucc et) (CanonicalAtomic AtomicNat))]

;; #source file ./ott/lang_simple.ott  lines 3154 - 3165 
 [
  
   (where   y  ,(gensym)) 
  (GradualNECheck Gamma gu_11 et_11 gt_11 (CanonicalAtomic AtomicNat))
  (GradualNECheck Gamma gU eT gT (CanonicalPi y (CanonicalAtomic AtomicNat) (CanonicalAtomic (AtomicSet i))))
  (BodySub (CanonicalAtomic AtomicNat) (CanonicalAtomic AtomicZero) gU gU_22)
  (GElabCheck Gamma et_22 gt_22 gU_22)
  (BodySub (CanonicalAtomic AtomicNat) (CanonicalAtomic  (AtomicSpine  x_11  SpineEmpty) ) gU gU_33^)
  (BodySub (CanonicalAtomic AtomicNat) (CanonicalAtomic (AtomicSucc (CanonicalAtomic  (AtomicSpine  x_11  SpineEmpty) ))) gU gU_33)
  (GElabCheck (EnvExt x_22 gU_33^ (EnvExt x_11 (CanonicalAtomic AtomicNat) Gamma)) et_33 gt_33 gU_33)
  (BodySub (CanonicalAtomic AtomicNat) gu_11 gU gU_44)
  ------------------------------------------------------------------------------------------------------------------------ "GElabSynthNatElim"
  (GElabSynth Gamma (TermNatElim i gt_11 gT gt_22 x_11 x_22 gt_33) (TermNatElim i et_11 eT et_22 x_11 x_22 et_33) gU_44)]

;; #source file ./ott/lang_simple.ott  lines 3166 - 3170 
 [
  
  (GElabCheck Gamma eT gT (CanonicalAtomic (AtomicSet  1 )))
  (GElabCheck Gamma et gt (CanonicalAtomic AtomicNat))
  -------------------------------------------------------------------------------------- "GElabSynthVec"
  (GElabSynth Gamma (TermVec gT gt) (TermVec eT et) (CanonicalAtomic (AtomicSet  1 )))]

;; #source file ./ott/lang_simple.ott  lines 3171 - 3174 
 [
  (GradualNECheck Gamma gU eT gT (CanonicalAtomic (AtomicSet  1 )))
  ------------------------------------------------------------------------------------------------------------ "GElabSynthNil"
  (GElabSynth Gamma (TermNil gT) (TermNil eT) (CanonicalAtomic (AtomicVec gU (CanonicalAtomic AtomicZero))))]

;; #source file ./ott/lang_simple.ott  lines 3175 - 3181 
 [
  
  (GradualNECheck Gamma gU eT gT (CanonicalAtomic (AtomicSet  1 )))
  (GradualNECheck Gamma gu_11 et_11 gt_11 (CanonicalAtomic AtomicNat))
  (GElabCheck Gamma et_22 gt_22 gU)
  (GElabCheck Gamma et_33 gt_33 (CanonicalAtomic (AtomicVec gU gu_11)))
  ------------------------------------------------------------------------------------------------------------------------------------------------------------ "GElabSynthCons"
  (GElabSynth Gamma (TermCons gT gt_11 gt_22 gt_33) (TermCons eT et_11 et_22 et_33) (CanonicalAtomic (AtomicVec gU (CanonicalAtomic  (AtomicSucc gu_11) ))))]

;; #source file ./ott/lang_simple.ott  lines 3182 - 3200 
 [
  
   (where   y_11  ,(gensym)) 
   (where   y_22  ,(gensym)) 
  (GradualNECheck Gamma gU_11 eT_11 gT_11 (CanonicalAtomic (AtomicSet  1 )))
  (GradualNECheck Gamma gu_22 et_22 gt_22 (CanonicalAtomic AtomicNat))
  (GradualNECheck Gamma gu_11 et_11 gt_11 (CanonicalAtomic (AtomicVec gU_11 gu_22)))
  (GradualNECheck Gamma gU_22 eT_22 gT_22 (CanonicalPi y_11 (CanonicalAtomic AtomicNat) (CanonicalPi y_22 (CanonicalAtomic (AtomicVec gU_11 (CanonicalAtomic  (AtomicSpine  y_22  SpineEmpty) ))) (CanonicalAtomic (AtomicSet i)))))
  (BodySub (CanonicalAtomic AtomicNat) (CanonicalAtomic AtomicZero) gU_22 gU_33^)
  (BodySub (CanonicalAtomic (AtomicVec gU_11 (CanonicalAtomic AtomicZero))) (CanonicalAtomic (AtomicNil gU_11)) gU_33^ gU_33)
  (GElabCheck Gamma et_33 gt_33 gU_33)
  (BodySub (CanonicalAtomic AtomicNat) (CanonicalAtomic  (AtomicSpine  x_11  SpineEmpty) ) gU_22 gU_4141^)
  (BodySub (CanonicalAtomic (AtomicVec gU_11 (CanonicalAtomic  (AtomicSpine  x_11  SpineEmpty) ))) (CanonicalAtomic  (AtomicSpine  x_33  SpineEmpty) ) gU_4141^ gU_4141)
  (BodySub (CanonicalAtomic AtomicNat) (CanonicalAtomic  (AtomicSucc (CanonicalAtomic  (AtomicSpine  x_11  SpineEmpty) )) ) gU_22 gU_4242^)
  (BodySub (CanonicalAtomic (AtomicVec gU_11 (CanonicalAtomic  (AtomicSucc (CanonicalAtomic  (AtomicSpine  x_11  SpineEmpty) )) ))) (CanonicalAtomic (AtomicCons gU_11 (CanonicalAtomic  (AtomicSpine  x_11  SpineEmpty) ) (CanonicalAtomic  (AtomicSpine  x_22  SpineEmpty) ) (CanonicalAtomic  (AtomicSpine  x_33  SpineEmpty) ))) gU_4242^ gU_4242)
  (GElabCheck (EnvExt x_44 gU_4141 (EnvExt x_33 (CanonicalAtomic (AtomicVec gU_11 (CanonicalAtomic  (AtomicSpine  x_11  SpineEmpty) ))) (EnvExt x_22 gU_11 (EnvExt x_11 (CanonicalAtomic AtomicNat) Gamma)))) et_44 gt_44 gU_4242)
  (BodySub (CanonicalAtomic AtomicNat) gu_22 gU_22 gU_55^)
  (BodySub (CanonicalAtomic (AtomicVec gU_11 gu_22)) gu_11 gU_55^ gU_55)
  -------------------------------------------------------------------------------------------------------------------------------------------------------------------------- "GElabSynthVecElim"
  (GElabSynth Gamma (TermVecElim i gt_11 gT_11 gt_22 gT_22 gt_33 x_11 x_22 x_33 x_44 gt_44) (TermVecElim i et_11 eT_11 et_22 eT_22 et_33 x_11 x_22 x_33 x_44 et_44) gU_55)]

;; #source file ./ott/lang_simple.ott  lines 3202 - 3207 
 [
  
  (GradualNECheck Gamma gU eT gT (CanonicalAtomic (AtomicSet  1 )))
  (GElabCheck Gamma et_11 gt_11 gU)
  (GElabCheck Gamma et_22 gt_22 gU)
  ------------------------------------------------------------------------------------------------------ "GElabSynthEq"
  (GElabSynth Gamma (TermEq gT gt_11 gt_22) (TermEq eT et_11 et_22) (CanonicalAtomic (AtomicSet  1 )))]

;; #source file ./ott/lang_simple.ott  lines 3208 - 3212 
 [
  
  (GradualNECheck Gamma gU eT gT (CanonicalAtomic (AtomicSet  1 )))
  (GradualNECheck Gamma gu et gt gU)
  -------------------------------------------------------------------------------------------- "GElabSynthRefl"
  (GElabSynth Gamma (TermRefl gT gt) (TermRefl eT et) (CanonicalAtomic (AtomicEq gU gu gu)))]

;; #source file ./ott/lang_simple.ott  lines 3213 - 3230 
 [
  
   (where   z_11  ,(gensym)) 
   (where   z_22  ,(gensym)) 
   (where   z_33  ,(gensym)) 
  (GradualNECheck Gamma gU_11 eT_11 gT_11 (CanonicalAtomic (AtomicSet  1 )))
  (GradualNECheck Gamma gU_22 eT_22 gT_22 (CanonicalPi z_11 gU_11 (CanonicalPi z_22 gU_11 (CanonicalPi z_33 (CanonicalAtomic (AtomicEq gU_11 (CanonicalAtomic  (AtomicSpine  z_11  SpineEmpty) ) (CanonicalAtomic  (AtomicSpine  z_22  SpineEmpty) ))) (CanonicalAtomic (AtomicSet i))))))
  (BodySub gU_11 (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) gU_22 gU_33^)
  (BodySub gU_11 (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) gU_33^ gU_33^^)
  (BodySub gU_11 (CanonicalAtomic (AtomicRefl gU_11 (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ))) gU_33^^ gU_33)
  (GElabCheck (EnvExt y gU_11 Gamma) et_22 gt_22 gU_33)
  (GradualNECheck Gamma gu_33 et_33 gt_33 gU_11)
  (GradualNECheck Gamma gu_44 et_44 gt_44 gU_11)
  (GradualNECheck Gamma gu_11 et_11 gt_11 (CanonicalAtomic (AtomicEq gU_11 gu_33 gu_44)))
  (BodySub gU_11 gu_33 gU_22 gU_44^)
  (BodySub gU_11 gu_44 gU_33^ gU_44^^)
  (BodySub gU_11 gu_11 gU_44^^ gU_44)
  ------------------------------------------------------------------------------------------------------------------------------------ "GElabSynthEqElim"
  (GElabSynth Gamma (TermEqElim i gt_11 gT_11 gT_22 y gt_22 gt_33 gt_44) (TermEqElim i et_11 eT_11 eT_22 y et_22 et_33 et_44) gU_44)]

)
(define-judgment-form L 
 
  #:mode (GElabSynthCheck I O I I I I)
  #:contract (GElabSynthCheck Gamma et_^ gtSynth et gU_^ gU)

;; #source file ./ott/lang_simple.ott  lines 3236 - 3239 
 [
   (side-condition ,(and (< 0 (term  i )) (<= (term  i ) (term  j )))) 
  ------------------------------------------------------------------------------------------------------- "GElabSynthCheckLevel"
  (GElabSynthCheck Gamma eT gTSynth eT (CanonicalAtomic (AtomicSet i)) (CanonicalAtomic (AtomicSet j)))]

;; #source file ./ott/lang_simple.ott  lines 3243 - 3248 
 [
  
   (side-condition ,(not (judgment-holds (BothSets  gU_^^   gU )) )) 
  (Meet gU_^^ gU gU_^)
  --------------------------------------------------------------------------- "GElabSynthCheckConsistent"
  (GElabSynthCheck Gamma (TermEp (EvidenceEv gU_^) et) gtSynth et gU gU_^^)]

)
(define-judgment-form L 
 
  #:mode (GElabCheck I O I I)
  #:contract (GElabCheck Gamma et gt gU)

;; #source file ./ott/lang_simple.ott  lines 3262 - 3267 
 [
  
  (GElabSynth Gamma gtSynth et_^ gU_^)
  (GElabSynthCheck Gamma et gtSynth et_^ gU_^ gU)
  ---------------------------------- "GElabCheckSynthRdx"
  (GElabCheck Gamma et gtSynth gU)]

;; #source file ./ott/lang_simple.ott  lines 3268 - 3274 

;; #source file ./ott/lang_simple.ott  lines 3275 - 3280 

;; #source file ./ott/lang_simple.ott  lines 3290 - 3298 
 [
  (ConsistentSet gU)
  (GradualNECheck Gamma gU_11 eT_11 gT_11 gU)
    
  (GElabCheck (EnvExt x gU_11 Gamma) eT_22 gT_22 gU)
  --------------------------------------------------------------------- "GElabCheckPi"
  (GElabCheck Gamma (TermPi x eT_11 eT_22) (TermPi x gT_11 gT_22) gU)]

;; #source file ./ott/lang_simple.ott  lines 3299 - 3303 

;; #source file ./ott/lang_simple.ott  lines 3304 - 3310 
 [
  
   (where   z  ,(gensym)) 
    
  (GElabCheck (EnvExt z gU_11 Gamma) et  (substitute  gt   x   z )   (substitute  gU_22   y   z ) )
  ------------------------------------------------------------------------------------------------------------------------------------------------------------- "GElabCheckLamPiRdxAlpha"
  (GElabCheck Gamma (TermEp (EvidenceEv (CanonicalPi z gU_11  (substitute  gU_22   y   z ) ))  (TermLam z et) )  (TermLam x gt)  (CanonicalPi y gU_11 gU_22))]

;; #source file ./ott/lang_simple.ott  lines 3311 - 3315 
 [
  
    
  (GElabCheck (EnvExt x CanonicalDyn Gamma) et gt CanonicalDyn)
  ------------------------------------------------------------------------------------------------------ "GElabCheckLamDyn"
  (GElabCheck Gamma (TermEp (EvidenceEv CanonicalDyn)  (TermLam x et) )  (TermLam x gt)  CanonicalDyn)]

)
(define-judgment-form L 
 
  #:mode (GradualNESynth I I O O O)
  #:contract (GradualNESynth Gamma gtSynth et gu gU)

;; #source file ./ott/lang_simple.ott  lines 3331 - 3335 
 [
  
  (GradualSetNorm Gamma gU gT)
  (GradualNECheck Gamma gu et gt gU)
  --------------------------------------------------- "GradualNESynthAnn"
  (GradualNESynth Gamma  (TermAnn gt gT)  et gu gU)]

;; #source file ./ott/lang_simple.ott  lines 3336 - 3339 
 [
   (side-condition ,(> (term  i ) 0)) 
  ---------------------------------------------------------------------------------------------------------------------------- "GradualNESynthSet"
  (GradualNESynth Gamma (TermSet i) (TermSet i) (CanonicalAtomic (AtomicSet i)) (CanonicalAtomic  (AtomicSet (succ  i ) ) ))]

;; #source file ./ott/lang_simple.ott  lines 3341 - 3347 
 [
   (side-condition ,(not (hash-has-key? currently-defined-vars (term  x )) )) 
    
  (GVarLook x gU Gamma)
  (GEtaExpand  (AtomicSpine  x  SpineEmpty)  gu gU)
  ------------------------------------------------------ "GradualNESynthVar"
  (GradualNESynth Gamma x x gu gU)]

;; #source file ./ott/lang_simple.ott  lines 3348 - 3351 
 [
  
   (where (ENTTriple  et   gu   gU ) ,(and (hash-has-key? currently-defined-vars (term  x ) ) (hash-ref currently-defined-vars (term  x )) )) 
  ------------------------------------------------------ "GradualNESynthVarLook"
  (GradualNESynth Gamma x x gu gU)]

;; #source file ./ott/lang_simple.ott  lines 3355 - 3365 
 [
  
  (GradualNESynth Gamma gtSynth_11 et_11 gu gU)
     (where   x  ,(gensym))    (GEtaExpandC gu gu_^ (CanonicalPi x CanonicalDyn CanonicalDyn))  
    
  (Domain gU gU_11)
  (GradualNECheck Gamma gu_22 et_22 gt_22 gU_11)
  (BodySub gU_11 gu_22 gu_^ gu_^^)
  (CodSub gu_22 gU gU_22)
  (GEtaExpandC gu_^^ gu_^^^ gU_22)
  ---------------------------------------------------------------------------------------------------------------------------------------------------------------------- "GradualNESynthApp"
  (GradualNESynth Gamma (TermApp gtSynth_11 gt_22) (TermApp  (TermEp (EvidenceEv  (CanonicalPi ,(gensym)  CanonicalDyn   CanonicalDyn ) ) et_11)  et_22) gu_^^^ gU_22)]

;; #source file ./ott/lang_simple.ott  lines 3367 - 3369 
 [
  ------------------------------------------------------------------------------------------------------ "GradualNESynthNat"
  (GradualNESynth Gamma TermNat TermNat (CanonicalAtomic AtomicNat) (CanonicalAtomic (AtomicSet  1 )))]

;; #source file ./ott/lang_simple.ott  lines 3370 - 3372 
 [
  --------------------------------------------------------------------------------------------------- "GradualNESynthZero"
  (GradualNESynth Gamma TermZero TermZero (CanonicalAtomic AtomicZero) (CanonicalAtomic AtomicNat))]

;; #source file ./ott/lang_simple.ott  lines 3373 - 3376 
 [
  
  (GradualNECheck Gamma gu et gt (CanonicalAtomic AtomicNat))
  ------------------------------------------------------------------------------------------------------------------ "GradualNESynthSucc"
  (GradualNESynth Gamma (TermSucc gt) (TermSucc et) (CanonicalAtomic (AtomicSucc gu)) (CanonicalAtomic AtomicNat))]

;; #source file ./ott/lang_simple.ott  lines 3377 - 3390 
 [
  
   (where   y  ,(gensym)) 
  (GradualNECheck Gamma gu_11 et_11 gt_11 (CanonicalAtomic AtomicNat))
  (GradualNECheck Gamma gU eT gT (CanonicalPi y (CanonicalAtomic AtomicNat) (CanonicalAtomic (AtomicSet i))))
  (BodySub (CanonicalAtomic AtomicNat) (CanonicalAtomic AtomicZero) gU gU_22)
  (GradualNECheck Gamma gu_22 et_22 gt_22 gU_22)
  (BodySub (CanonicalAtomic AtomicNat) (CanonicalAtomic  (AtomicSpine  x_11  SpineEmpty) ) gU gU_33^)
  (BodySub (CanonicalAtomic AtomicNat) (CanonicalAtomic (AtomicSucc (CanonicalAtomic  (AtomicSpine  x_11  SpineEmpty) ))) gU gU_33)
  (GradualNECheck (EnvExt x_22 gU_33^ (EnvExt x_11 (CanonicalAtomic AtomicNat) Gamma)) gu_33 et_33 gt_33 gU_33)
  (BodySub (CanonicalAtomic AtomicNat) gu_11 gU gU_44)
   (where   z  ,(gensym)) 
  (GHsub z (CanonicalAtomic AtomicNat) gu_11 (CanonicalAtomic (AtomicSpine z (SpineNatElim SpineEmpty i gU gu_22 x_11 x_22 gu_33))) gu_44)
  ---------------------------------------------------------------------------------------------------------------------------------- "GradualNESynthNatElim"
  (GradualNESynth Gamma (TermNatElim i gt_11 gT gt_22 x_11 x_22 gt_33) (TermNatElim i et_11 eT et_22 x_11 x_22 et_33) gu_44 gU_44)]

;; #source file ./ott/lang_simple.ott  lines 3391 - 3395 
 [
  
  (GradualNECheck Gamma gU eT gT (CanonicalAtomic (AtomicSet  1 )))
  (GradualNECheck Gamma gu et gt (CanonicalAtomic AtomicNat))
  ------------------------------------------------------------------------------------------------------------------------------ "GradualNESynthVec"
  (GradualNESynth Gamma (TermVec gT gt) (TermVec eT et) (CanonicalAtomic (AtomicVec gU gu)) (CanonicalAtomic (AtomicSet  1 )))]

;; #source file ./ott/lang_simple.ott  lines 3396 - 3399 
 [
  (GradualNECheck Gamma gU eT gT (CanonicalAtomic (AtomicSet  1 )))
  ------------------------------------------------------------------------------------------------------------------------------------------------- "GradualNESynthNil"
  (GradualNESynth Gamma (TermNil gT) (TermNil eT) (CanonicalAtomic (AtomicNil gU)) (CanonicalAtomic (AtomicVec gU (CanonicalAtomic AtomicZero))))]

;; #source file ./ott/lang_simple.ott  lines 3400 - 3406 
 [
  
  (GradualNECheck Gamma gU eT gT (CanonicalAtomic (AtomicSet  1 )))
  (GradualNECheck Gamma gu_11 et_11 gt_11 (CanonicalAtomic AtomicNat))
  (GradualNECheck Gamma gu_22 et_22 gt_22 gU)
  (GradualNECheck Gamma gu_33 et_33 gt_33 (CanonicalAtomic (AtomicVec gU gu_11)))
  -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- "GradualNESynthCons"
  (GradualNESynth Gamma (TermCons gT gt_11 gt_22 gt_33) (TermCons eT et_11 et_22 et_33) (CanonicalAtomic (AtomicCons gU gu_11 gu_22 gu_33)) (CanonicalAtomic (AtomicVec gU (CanonicalAtomic  (AtomicSucc gu_11) ))))]

;; #source file ./ott/lang_simple.ott  lines 3407 - 3427 
 [
  
   (where   y_11  ,(gensym)) 
   (where   y_22  ,(gensym)) 
  (GradualNECheck Gamma gU_11 eT_11 gT_11 (CanonicalAtomic (AtomicSet  1 )))
  (GradualNECheck Gamma gu_22 et_22 gt_22 (CanonicalAtomic AtomicNat))
  (GradualNECheck Gamma gu_11 et_11 gt_11 (CanonicalAtomic (AtomicVec gU_11 gu_22)))
  (GradualNECheck Gamma gU_22 eT_22 gT_22 (CanonicalPi y_11 (CanonicalAtomic AtomicNat) (CanonicalPi y_22 (CanonicalAtomic (AtomicVec gU_11 (CanonicalAtomic  (AtomicSpine  y_22  SpineEmpty) ))) (CanonicalAtomic (AtomicSet i)))))
  (BodySub (CanonicalAtomic AtomicNat) (CanonicalAtomic AtomicZero) gU_22 gU_33^)
  (BodySub (CanonicalAtomic (AtomicVec gU_11 (CanonicalAtomic AtomicZero))) (CanonicalAtomic (AtomicNil gU_11)) gU_33^ gU_33)
  (GradualNECheck Gamma gu_33 et_33 gt_33 gU_33)
  (BodySub (CanonicalAtomic AtomicNat) (CanonicalAtomic  (AtomicSpine  x_11  SpineEmpty) ) gU_22 gU_4141^)
  (BodySub (CanonicalAtomic (AtomicVec gU_11 (CanonicalAtomic  (AtomicSpine  x_11  SpineEmpty) ))) (CanonicalAtomic  (AtomicSpine  x_33  SpineEmpty) ) gU_4141^ gU_4141)
  (BodySub (CanonicalAtomic AtomicNat) (CanonicalAtomic  (AtomicSucc (CanonicalAtomic  (AtomicSpine  x_11  SpineEmpty) )) ) gU_22 gU_4242^)
  (BodySub (CanonicalAtomic (AtomicVec gU_11 (CanonicalAtomic  (AtomicSucc (CanonicalAtomic  (AtomicSpine  x_11  SpineEmpty) )) ))) (CanonicalAtomic (AtomicCons gU_11 (CanonicalAtomic  (AtomicSpine  x_11  SpineEmpty) ) (CanonicalAtomic  (AtomicSpine  x_22  SpineEmpty) ) (CanonicalAtomic  (AtomicSpine  x_33  SpineEmpty) ))) gU_4242^ gU_4242)
  (GradualNECheck (EnvExt x_44 gU_4141 (EnvExt x_33 (CanonicalAtomic (AtomicVec gU_11 (CanonicalAtomic  (AtomicSpine  x_11  SpineEmpty) ))) (EnvExt x_22 gU_11 (EnvExt x_11 (CanonicalAtomic AtomicNat) Gamma)))) gu_44 et_44 gt_44 gU_4242)
  (BodySub (CanonicalAtomic AtomicNat) gu_22 gU_22 gU_55^)
  (BodySub (CanonicalAtomic (AtomicVec gU_11 gu_22)) gu_11 gU_55^ gU_55)
   (where   z  ,(gensym)) 
  (GHsub z (CanonicalAtomic (AtomicVec gU_11 gu_22)) gu_11 (CanonicalAtomic (AtomicSpine z (SpineVecElim SpineEmpty i gU_11 gu_22 gU_22 gu_33 x_11 x_22 x_33 x_44 gu_44))) gu_55)
  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ "GradualNESynthVecElim"
  (GradualNESynth Gamma (TermVecElim i gt_11 gT_11 gt_22 gT_22 gt_33 x_11 x_22 x_33 x_44 gt_44) (TermVecElim i et_11 eT_11 et_22 eT_22 et_33 x_11 x_22 x_33 x_44 et_44) gu_55 gU_55)]

;; #source file ./ott/lang_simple.ott  lines 3429 - 3434 
 [
  
  (GradualNECheck Gamma gU eT gT (CanonicalAtomic (AtomicSet  1 )))
  (GradualNECheck Gamma gu_11 et_11 gt_11 gU)
  (GradualNECheck Gamma gu_22 et_22 gt_22 gU)
  ------------------------------------------------------------------------------------------------------------------------------------------------------ "GradualNESynthEq"
  (GradualNESynth Gamma (TermEq gT gt_11 gt_22) (TermEq eT et_11 et_22) (CanonicalAtomic (AtomicEq gU gu_11 gu_22)) (CanonicalAtomic (AtomicSet  1 )))]

;; #source file ./ott/lang_simple.ott  lines 3435 - 3439 
 [
  
  (GradualNECheck Gamma gU eT gT (CanonicalAtomic (AtomicSet  1 )))
  (GradualNECheck Gamma gu et gt gU)
  ------------------------------------------------------------------------------------------------------------------------------------- "GradualNESynthRefl"
  (GradualNESynth Gamma (TermRefl gT gt) (TermRefl eT et) (CanonicalAtomic (AtomicRefl gU gu)) (CanonicalAtomic (AtomicEq gU gu gu)))]

;; #source file ./ott/lang_simple.ott  lines 3440 - 3458 
 [
  
   (where   z_11  ,(gensym)) 
   (where   z_22  ,(gensym)) 
   (where   z_33  ,(gensym)) 
  (GradualNECheck Gamma gU_11 eT_11 gT_11 (CanonicalAtomic (AtomicSet  1 )))
  (GradualNECheck Gamma gU_22 eT_22 gT_22 (CanonicalPi z_11 gU_11 (CanonicalPi z_22 gU_11 (CanonicalPi z_33 (CanonicalAtomic (AtomicEq gU_11 (CanonicalAtomic  (AtomicSpine  z_11  SpineEmpty) ) (CanonicalAtomic  (AtomicSpine  z_22  SpineEmpty) ))) (CanonicalAtomic (AtomicSet i))))))
  (BodySub gU_11 (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) gU_22 gU_33^)
  (BodySub gU_11 (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) gU_33^ gU_33^^)
  (BodySub gU_11 (CanonicalAtomic  (AtomicSpine  y  SpineEmpty) ) gU_33^^ gU_33)
  (GradualNECheck (EnvExt y gU_11 Gamma) gu_22 et_22 gt_22 gU_33)
  (GradualNECheck Gamma gu_33 et_33 gt_33 gU_11)
  (GradualNECheck Gamma gu_44 et_44 gt_44 gU_11)
  (GradualNECheck Gamma gu_11 et_11 gt_11 (CanonicalAtomic (AtomicEq gU_11 gu_33 gu_44)))
  (BodySub gU_11 gu_33 gU_22 gU_44^)
  (BodySub gU_11 gu_44 gU_33^ gU_44^^)
  (BodySub gU_11 gu_11 gU_44^^ gU_44)
  (GHsub y (CanonicalAtomic (AtomicEq gU_11 gu_33 gu_44)) gu_11 gu_22 gu_55)
  ---------------------------------------------------------------------------------------------------------------------------------------------- "GradualNESynthEqElim"
  (GradualNESynth Gamma (TermEqElim i gt_11 gT_11 gT_22 y gt_22 gt_33 gt_44) (TermEqElim i et_11 eT_11 eT_11 y et_22 et_33 et_44) gu_55 gU_44)]

)
(define-judgment-form L 
 
  #:mode (BothSets I I)
  #:contract (BothSets gU gU_^)

;; #source file ./ott/lang_simple.ott  lines 3468 - 3470 
 [---------------------------------------------------------------------------- "BothSetsRule"
  (BothSets (CanonicalAtomic (AtomicSet i)) (CanonicalAtomic (AtomicSet j)))]

)
(define-judgment-form L 
 
  #:mode (GradualNESynthCheck I O O I I I I I)
  #:contract (GradualNESynthCheck Gamma gu et_11 gtSynth gu_^ et gU_^ gU)

;; #source file ./ott/lang_simple.ott  lines 3476 - 3479 
 [
   (side-condition ,(and (< 0 (term  i )) (<= (term  i ) (term  j )))) 
  ----------------------------------------------------------------------------------------------------------------- "GradualNESynthCheckLevel"
  (GradualNESynthCheck Gamma gU eT gTSynth gU eT (CanonicalAtomic (AtomicSet i)) (CanonicalAtomic (AtomicSet j)))]

;; #source file ./ott/lang_simple.ott  lines 3484 - 3489 
 [
  
   (side-condition ,(not (judgment-holds (BothSets  gU   gU_^ )) )) 
  (Meet gU gU_^ gU_^^)
   (where  gu_^^  ,(if (alpha-equivalent? (term  gU_^ ) (term  gU_^^ )) (term  gu_^ ) (term  CanonicalDyn ))) 
  ---------------------------------------------------------------------------------------------- "GradualNESynthCheckConsistent"
  (GradualNESynthCheck Gamma gu_^^ (TermEp (EvidenceEv gU_^^) et_^) gtSynth gu_^ et_^ gU_^ gU)]

)
(define-judgment-form L 
 
  #:mode (GradualNECheck I O O I I)
  #:contract (GradualNECheck Gamma gu et gt gU)

;; #source file ./ott/lang_simple.ott  lines 3506 - 3510 
 [
  
  (GradualNESynth Gamma gtSynth et_^ gu_^ gU_^)
  (GradualNESynthCheck Gamma gu_^^ et_^^ gtSynth gu_^ et_^ gU_^ gU)
  ----------------------------------------------- "GradualNECheckSynthRdx"
  (GradualNECheck Gamma gu_^^ et_^^ gtSynth gU)]

;; #source file ./ott/lang_simple.ott  lines 3512 - 3519 

;; #source file ./ott/lang_simple.ott  lines 3520 - 3525 

;; #source file ./ott/lang_simple.ott  lines 3535 - 3543 
 [
  (ConsistentSet gU_^^)
  (GradualNECheck Gamma gU_11 eT_11 gT_11 gU_^^)
    
  (GradualNECheck (EnvExt x gU_11 Gamma) gU_22 eT_22 gT_22 gU_^^)
  -------------------------------------------------------------------------------------------------------- "GradualNECheckPi"
  (GradualNECheck Gamma (CanonicalPi x gU_11 gU_22) (TermPi x eT_11 eT_22) (TermPi x gT_11 gT_22) gU_^^)]

;; #source file ./ott/lang_simple.ott  lines 3544 - 3548 

;; #source file ./ott/lang_simple.ott  lines 3549 - 3554 
 [
  
   (where   z  ,(gensym)) 
    
  (GradualNECheck (EnvExt z gU_11 Gamma) gu et  (substitute  gt   x   z )   (substitute  gU_22   y   z ) )
  ------------------------------------------------------------------------------------------------------------ "GradualNECheckLamPiRdxAlpha"
  (GradualNECheck Gamma  (CanonicalLam z gu)   (TermLam z et)   (TermLam x gt)  (CanonicalPi y gU_11 gU_22))]

;; #source file ./ott/lang_simple.ott  lines 3555 - 3559 
 [
  
    
  (GradualNECheck (EnvExt x CanonicalDyn Gamma) gu et gt CanonicalDyn)
  --------------------------------------------------------------------------------------------- "GradualNECheckLamDyn"
  (GradualNECheck Gamma  (CanonicalLam x gu)   (TermLam x et)   (TermLam x gt)  CanonicalDyn)]

;; #source file ./ott/lang_simple.ott  lines 3560 - 3563 
 [
  (GradualSet Gamma gU)
  --------------------------------------------------------------------------------- "GradualNECheckDyn"
  (GradualNECheck Gamma CanonicalDyn (TermEp (EvidenceEv gU) TermDyn) TermDyn gU)]
)
;; #source file ./ott/lang_simple.ott  lines 3571 - 3571 
 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; The dynamic semantics for programs
;; We merge layered evidence, and compose evidence when applying functions
;; The meet and dom functiosn throw exceptions (i.e. runtime type errors)
;; any time the meet or domains do not exist
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;; definitions 

(define-judgment-form
  L
  #:mode (Step I O)
  #:contract (Step et_11 et_22)

;; #source file ./ott/lang_simple.ott  lines 3691 - 3694 
 [
  (EvMeet ep_11 ep_22 ep_33)
  ------------------------------------------------------------- "StepAscr"
  (Step (TermEp ep_11  (TermEp ep_22 rv) ) (TermEp ep_33 rv))]

;; #source file ./ott/lang_simple.ott  lines 3697 - 3700 

;; #source file ./ott/lang_simple.ott  lines 3712 - 3717 
 [
  
  (Meet gU_33 gU_11 gU_11^)
  (GNCheck EnvEmpty gu rv gU_11^)
  (GHsub y gU_11^ gu gU_22 gU_22^)
  --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- "StepAppEv"
  (Step (TermApp  (TermEp (EvidenceEv (CanonicalPi y gU_11 gU_22))  (TermLam x et) )   (TermEp (EvidenceEv gU_33) rv) ) (TermEp (EvidenceEv gU_22^)   (esubst  et   x   (TermEp (EvidenceEv gU_11^) rv)   gu   gU_11^ )  ))]

;; #source file ./ott/lang_simple.ott  lines 3720 - 3725 
 [
  
  (GNCheck EnvEmpty gu rv gU_11)
  (GHsub y gU_11 gu gU_22 gU_22^)
  --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- "StepAppEvRaw"
  (Step (TermApp  (TermEp (EvidenceEv (CanonicalPi y gU_11 gU_22))  (TermLam x et) )  rv) (TermEp (EvidenceEv gU_22^)   (esubst  et   x    (TermEp (EvidenceEv gU_11) rv)    gu   gU_11 )  ))]

;; #source file ./ott/lang_simple.ott  lines 3729 - 3733 
 [
  (GNCheck EnvEmpty gu ev gU_11)
  (GHsub x gU_11 gu gU_22 gU_22^)
  ---------------------------------------------------------------------------------------------------------------------- "StepAppDyn"
  (Step (TermApp  (TermEp (EvidenceEv (CanonicalPi x gU_11 gU_22)) TermDyn)  ev) (TermEp (EvidenceEv gU_22^) TermDyn))]

;; #source file ./ott/lang_simple.ott  lines 3735 - 3738 

;; #source file ./ott/lang_simple.ott  lines 3740 - 3743 
 [
  
  (Step  (TermNatElim i rv eV ev_22 x_11 x_22 et_33)  et_44)
  -------------------------------------------------------------------------- "StepNatEv"
  (Step  (TermNatElim i  (TermEp ep rv)  eV ev_22 x_11 x_22 et_33)  et_44)]

;; #source file ./ott/lang_simple.ott  lines 3744 - 3746 
 [
  
  ------------------------------------------------------------------ "StepNatElimZero"
  (Step  (TermNatElim i TermZero eV ev_22 x_11 x_22 et_33)  ev_22)]

;; #source file ./ott/lang_simple.ott  lines 3747 - 3752 
 [
  
   (where   z  ,(gensym)) 
  (GNCheck EnvEmpty gU_11 eV (CanonicalPi z (CanonicalAtomic AtomicNat) (CanonicalAtomic (AtomicSet i))))
  (BodySub (CanonicalAtomic AtomicNat) CanonicalDyn gU_11 gU)
  ---------------------------------------------------------------------------------------------------------- "StepNatElimDyn"
  (Step  (TermNatElim i  (TermEp ep TermDyn)  eV ev_22 x_11 x_22 et_33)  (TermEp (EvidenceEv gU) TermDyn))]

;; #source file ./ott/lang_simple.ott  lines 3753 - 3760 
 [
  
   (where   z  ,(gensym)) 
  (GNCheck EnvEmpty gu_11 ev_11 (CanonicalAtomic AtomicNat))
  (GNCheck EnvEmpty gU_11 eV (CanonicalPi z (CanonicalAtomic AtomicNat) (CanonicalAtomic (AtomicSet i))))
  (BodySub (CanonicalAtomic AtomicNat) gu_11 gU_11 gU)
  (GNCheck EnvEmpty gu  (TermNatElim i ev_11 eV ev_22 x_11 x_22 et_33)  gU)
  --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- "StepNatElimSucc"
  (Step  (TermNatElim i  (TermSucc ev_11)  eV ev_22 x_11 x_22 et_33)   (esubst    (esubst  et_33   x_11   ev_11   gu_11   (CanonicalAtomic AtomicNat) )     x_22    (TermNatElim i ev_11 eV ev_22 x_11 x_22 et_33)    gu   gU ) )]

;; #source file ./ott/lang_simple.ott  lines 3761 - 3764 
 [
  
  (Step  (TermVecElim i rv_11 eV_11 ev_22 eV_22 ev_33 x_11 x_22 x_33 x_44 et_44)  et)
  --------------------------------------------------------------------------------------------------- "StepVecElimEv"
  (Step  (TermVecElim i  (TermEp ep rv_11)  eV_11 ev_22 eV_22 ev_33 x_11 x_22 x_33 x_44 et_44)  et)]

;; #source file ./ott/lang_simple.ott  lines 3765 - 3767 
 [
  
  ---------------------------------------------------------------------------------------------------- "StepVecElimNil"
  (Step  (TermVecElim i  (TermNil eV_33)  eV_11 ev_22 eV_22 ev_33 x_11 x_22 x_33 x_44 et_44)  ev_33)]

;; #source file ./ott/lang_simple.ott  lines 3768 - 3780 
 [
  
  (GNCheck EnvEmpty gU_33 eV_33 (CanonicalAtomic (AtomicSet  1 )))
  (GNCheck EnvEmpty gu_11^ ev_11^ (CanonicalAtomic AtomicNat))
  (GNCheck EnvEmpty gu_22^ ev_22^ gU_33)
  (GNCheck EnvEmpty gu_33^ ev_33^ (CanonicalAtomic (AtomicVec gU_33 gu_11^)))
   (where   y  ,(gensym)) 
   (where   z  ,(gensym)) 
  (GNCheck EnvEmpty gU_22 eV_22 (CanonicalPi y (CanonicalAtomic AtomicNat)  (CanonicalPi z (CanonicalAtomic (AtomicVec gU_33 gu_11^)) (CanonicalAtomic (AtomicSet i))) ))
  (BodySub (CanonicalAtomic AtomicNat) gu_11^ gU_22 gU_22^)
  (BodySub (CanonicalAtomic AtomicNat) gu_33^ gU_22^ gU_22^^)
  (GNCheck EnvEmpty gu_44^  (TermVecElim i ev_33^ eV_11 ev_11^ eV_22 ev_33 x_11 x_22 x_33 x_44 et_44)  gU_22^^)
  --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- "StepVecElimCons"
  (Step  (TermVecElim i  (TermCons eV_33 ev_11^ ev_22^ ev_33^)  eV_11 ev_22 eV_22 ev_33 x_11 x_22 x_33 x_44 et_44)   (esubst   (esubst   (esubst   (esubst  et_44   x_11   ev_11^   gu_11^   (CanonicalAtomic AtomicNat) )    x_22   ev_22^   gu_22^   gU_33 )    x_33   ev_33^   gu_33^   (CanonicalAtomic (AtomicVec gU_33 gu_11^)) )    x_44    (TermVecElim i ev_33^ eV_11 ev_22 eV_22 ev_33 x_11 x_22 x_33 x_44 et_44)    gu_44^   gU_22^^ ) )]

;; #source file ./ott/lang_simple.ott  lines 3781 - 3790 
 [
  
  (GNCheck EnvEmpty gu_22 ev_22 (CanonicalAtomic AtomicNat))
  (GNCheck EnvEmpty gU_11 eV_11 (CanonicalAtomic (AtomicSet  1 )))
   (where   y  ,(gensym)) 
   (where   z  ,(gensym)) 
  (GNCheck EnvEmpty gU_22 eV_22 (CanonicalPi y (CanonicalAtomic AtomicNat)  (CanonicalPi z (CanonicalAtomic (AtomicVec gU_11 gu_22)) (CanonicalAtomic (AtomicSet i))) ))
  (BodySub (CanonicalAtomic AtomicNat) gu_22 gU_22 gU_22^)
  (BodySub (CanonicalAtomic AtomicNat) CanonicalDyn gU_22^ gU_22^^)
  ---------------------------------------------------------------------------------------------------------------------------------------- "StepVecElimDyn"
  (Step  (TermVecElim i  (TermEp ep TermDyn)  eV_11 ev_22 eV_22 ev_33 x_11 x_22 x_33 x_44 et_44)  (TermEp (EvidenceEv gU_22^^) TermDyn))]

;; #source file ./ott/lang_simple.ott  lines 3812 - 3816 

;; #source file ./ott/lang_simple.ott  lines 3817 - 3820 
)
;; #source file ./ott/lang_simple.ott  lines 3896 - 3919 

;;;;;;;;;;;;;;;;;;;;;
;; A judgment form to get both the elaborated evidence term
;; and normal form for a term
;; and wrap them up with their type in a tuple
;;;;;;;;;;;;;;;;;;;;;

(define-judgment-form
  L
  #:mode (ElabNormType I I O)
  [ 
  (GradualNESynth Gamma gt et gu gU)
  (where et_subbed ,(perform-elab-substs (term et)))
  ---------------------------------
  (ElabNormType Gamma gt (ENTTriple et_subbed gu gU))]

)

